
FYP_STM32F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fee4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  0800fff8  0800fff8  00010ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106a4  080106a4  000121ec  2**0
                  CONTENTS
  4 .ARM          00000008  080106a4  080106a4  000116a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106ac  080106ac  000121ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106ac  080106ac  000116ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080106b0  080106b0  000116b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  080106b4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004498  200001f0  080108a0  000121f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004688  080108a0  00012688  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000121ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025d37  00000000  00000000  00012215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005083  00000000  00000000  00037f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020c0  00000000  00000000  0003cfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000197c  00000000  00000000  0003f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e5c7  00000000  00000000  00040a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000276f4  00000000  00000000  0005efd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a77cb  00000000  00000000  000866c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012de92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cb0  00000000  00000000  0012ded8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000da  00000000  00000000  00137b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ffdc 	.word	0x0800ffdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800ffdc 	.word	0x0800ffdc

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	@ 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20002f68 	.word	0x20002f68

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_frsub>:
 8000bb4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	e002      	b.n	8000bc0 <__addsf3>
 8000bba:	bf00      	nop

08000bbc <__aeabi_fsub>:
 8000bbc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bc0 <__addsf3>:
 8000bc0:	0042      	lsls	r2, r0, #1
 8000bc2:	bf1f      	itttt	ne
 8000bc4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc8:	ea92 0f03 	teqne	r2, r3
 8000bcc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bd0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd4:	d06a      	beq.n	8000cac <__addsf3+0xec>
 8000bd6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bda:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bde:	bfc1      	itttt	gt
 8000be0:	18d2      	addgt	r2, r2, r3
 8000be2:	4041      	eorgt	r1, r0
 8000be4:	4048      	eorgt	r0, r1
 8000be6:	4041      	eorgt	r1, r0
 8000be8:	bfb8      	it	lt
 8000bea:	425b      	neglt	r3, r3
 8000bec:	2b19      	cmp	r3, #25
 8000bee:	bf88      	it	hi
 8000bf0:	4770      	bxhi	lr
 8000bf2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bf6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4240      	negne	r0, r0
 8000c02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c06:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c0a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4249      	negne	r1, r1
 8000c12:	ea92 0f03 	teq	r2, r3
 8000c16:	d03f      	beq.n	8000c98 <__addsf3+0xd8>
 8000c18:	f1a2 0201 	sub.w	r2, r2, #1
 8000c1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c20:	eb10 000c 	adds.w	r0, r0, ip
 8000c24:	f1c3 0320 	rsb	r3, r3, #32
 8000c28:	fa01 f103 	lsl.w	r1, r1, r3
 8000c2c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c30:	d502      	bpl.n	8000c38 <__addsf3+0x78>
 8000c32:	4249      	negs	r1, r1
 8000c34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c38:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c3c:	d313      	bcc.n	8000c66 <__addsf3+0xa6>
 8000c3e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c42:	d306      	bcc.n	8000c52 <__addsf3+0x92>
 8000c44:	0840      	lsrs	r0, r0, #1
 8000c46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c4a:	f102 0201 	add.w	r2, r2, #1
 8000c4e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c50:	d251      	bcs.n	8000cf6 <__addsf3+0x136>
 8000c52:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c5a:	bf08      	it	eq
 8000c5c:	f020 0001 	biceq.w	r0, r0, #1
 8000c60:	ea40 0003 	orr.w	r0, r0, r3
 8000c64:	4770      	bx	lr
 8000c66:	0049      	lsls	r1, r1, #1
 8000c68:	eb40 0000 	adc.w	r0, r0, r0
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c74:	d2ed      	bcs.n	8000c52 <__addsf3+0x92>
 8000c76:	fab0 fc80 	clz	ip, r0
 8000c7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c86:	bfaa      	itet	ge
 8000c88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c8c:	4252      	neglt	r2, r2
 8000c8e:	4318      	orrge	r0, r3
 8000c90:	bfbc      	itt	lt
 8000c92:	40d0      	lsrlt	r0, r2
 8000c94:	4318      	orrlt	r0, r3
 8000c96:	4770      	bx	lr
 8000c98:	f092 0f00 	teq	r2, #0
 8000c9c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ca0:	bf06      	itte	eq
 8000ca2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ca6:	3201      	addeq	r2, #1
 8000ca8:	3b01      	subne	r3, #1
 8000caa:	e7b5      	b.n	8000c18 <__addsf3+0x58>
 8000cac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb4:	bf18      	it	ne
 8000cb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cba:	d021      	beq.n	8000d00 <__addsf3+0x140>
 8000cbc:	ea92 0f03 	teq	r2, r3
 8000cc0:	d004      	beq.n	8000ccc <__addsf3+0x10c>
 8000cc2:	f092 0f00 	teq	r2, #0
 8000cc6:	bf08      	it	eq
 8000cc8:	4608      	moveq	r0, r1
 8000cca:	4770      	bx	lr
 8000ccc:	ea90 0f01 	teq	r0, r1
 8000cd0:	bf1c      	itt	ne
 8000cd2:	2000      	movne	r0, #0
 8000cd4:	4770      	bxne	lr
 8000cd6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cda:	d104      	bne.n	8000ce6 <__addsf3+0x126>
 8000cdc:	0040      	lsls	r0, r0, #1
 8000cde:	bf28      	it	cs
 8000ce0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ce4:	4770      	bx	lr
 8000ce6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cea:	bf3c      	itt	cc
 8000cec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cf0:	4770      	bxcc	lr
 8000cf2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cf6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cfe:	4770      	bx	lr
 8000d00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d04:	bf16      	itet	ne
 8000d06:	4608      	movne	r0, r1
 8000d08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d0c:	4601      	movne	r1, r0
 8000d0e:	0242      	lsls	r2, r0, #9
 8000d10:	bf06      	itte	eq
 8000d12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d16:	ea90 0f01 	teqeq	r0, r1
 8000d1a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_ui2f>:
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e004      	b.n	8000d30 <__aeabi_i2f+0x8>
 8000d26:	bf00      	nop

08000d28 <__aeabi_i2f>:
 8000d28:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d2c:	bf48      	it	mi
 8000d2e:	4240      	negmi	r0, r0
 8000d30:	ea5f 0c00 	movs.w	ip, r0
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d3c:	4601      	mov	r1, r0
 8000d3e:	f04f 0000 	mov.w	r0, #0
 8000d42:	e01c      	b.n	8000d7e <__aeabi_l2f+0x2a>

08000d44 <__aeabi_ul2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e00a      	b.n	8000d68 <__aeabi_l2f+0x14>
 8000d52:	bf00      	nop

08000d54 <__aeabi_l2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d60:	d502      	bpl.n	8000d68 <__aeabi_l2f+0x14>
 8000d62:	4240      	negs	r0, r0
 8000d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d68:	ea5f 0c01 	movs.w	ip, r1
 8000d6c:	bf02      	ittt	eq
 8000d6e:	4684      	moveq	ip, r0
 8000d70:	4601      	moveq	r1, r0
 8000d72:	2000      	moveq	r0, #0
 8000d74:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d78:	bf08      	it	eq
 8000d7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d82:	fabc f28c 	clz	r2, ip
 8000d86:	3a08      	subs	r2, #8
 8000d88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d8c:	db10      	blt.n	8000db0 <__aeabi_l2f+0x5c>
 8000d8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d92:	4463      	add	r3, ip
 8000d94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d98:	f1c2 0220 	rsb	r2, r2, #32
 8000d9c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000da0:	fa20 f202 	lsr.w	r2, r0, r2
 8000da4:	eb43 0002 	adc.w	r0, r3, r2
 8000da8:	bf08      	it	eq
 8000daa:	f020 0001 	biceq.w	r0, r0, #1
 8000dae:	4770      	bx	lr
 8000db0:	f102 0220 	add.w	r2, r2, #32
 8000db4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db8:	f1c2 0220 	rsb	r2, r2, #32
 8000dbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc4:	eb43 0002 	adc.w	r0, r3, r2
 8000dc8:	bf08      	it	eq
 8000dca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_fmul>:
 8000dd0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd8:	bf1e      	ittt	ne
 8000dda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dde:	ea92 0f0c 	teqne	r2, ip
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d06f      	beq.n	8000ec8 <__aeabi_fmul+0xf8>
 8000de8:	441a      	add	r2, r3
 8000dea:	ea80 0c01 	eor.w	ip, r0, r1
 8000dee:	0240      	lsls	r0, r0, #9
 8000df0:	bf18      	it	ne
 8000df2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000df6:	d01e      	beq.n	8000e36 <__aeabi_fmul+0x66>
 8000df8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dfc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e00:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e04:	fba0 3101 	umull	r3, r1, r0, r1
 8000e08:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e0c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e10:	bf3e      	ittt	cc
 8000e12:	0049      	lslcc	r1, r1, #1
 8000e14:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e18:	005b      	lslcc	r3, r3, #1
 8000e1a:	ea40 0001 	orr.w	r0, r0, r1
 8000e1e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e22:	2afd      	cmp	r2, #253	@ 0xfd
 8000e24:	d81d      	bhi.n	8000e62 <__aeabi_fmul+0x92>
 8000e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e2e:	bf08      	it	eq
 8000e30:	f020 0001 	biceq.w	r0, r0, #1
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e3e:	bf08      	it	eq
 8000e40:	0249      	lsleq	r1, r1, #9
 8000e42:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e46:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e4a:	3a7f      	subs	r2, #127	@ 0x7f
 8000e4c:	bfc2      	ittt	gt
 8000e4e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e52:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e56:	4770      	bxgt	lr
 8000e58:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	dc5d      	bgt.n	8000f20 <__aeabi_fmul+0x150>
 8000e64:	f112 0f19 	cmn.w	r2, #25
 8000e68:	bfdc      	itt	le
 8000e6a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e6e:	4770      	bxle	lr
 8000e70:	f1c2 0200 	rsb	r2, r2, #0
 8000e74:	0041      	lsls	r1, r0, #1
 8000e76:	fa21 f102 	lsr.w	r1, r1, r2
 8000e7a:	f1c2 0220 	rsb	r2, r2, #32
 8000e7e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e82:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e86:	f140 0000 	adc.w	r0, r0, #0
 8000e8a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e8e:	bf08      	it	eq
 8000e90:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e94:	4770      	bx	lr
 8000e96:	f092 0f00 	teq	r2, #0
 8000e9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e9e:	bf02      	ittt	eq
 8000ea0:	0040      	lsleq	r0, r0, #1
 8000ea2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ea6:	3a01      	subeq	r2, #1
 8000ea8:	d0f9      	beq.n	8000e9e <__aeabi_fmul+0xce>
 8000eaa:	ea40 000c 	orr.w	r0, r0, ip
 8000eae:	f093 0f00 	teq	r3, #0
 8000eb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eb6:	bf02      	ittt	eq
 8000eb8:	0049      	lsleq	r1, r1, #1
 8000eba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ebe:	3b01      	subeq	r3, #1
 8000ec0:	d0f9      	beq.n	8000eb6 <__aeabi_fmul+0xe6>
 8000ec2:	ea41 010c 	orr.w	r1, r1, ip
 8000ec6:	e78f      	b.n	8000de8 <__aeabi_fmul+0x18>
 8000ec8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	bf18      	it	ne
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d00a      	beq.n	8000eee <__aeabi_fmul+0x11e>
 8000ed8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000edc:	bf18      	it	ne
 8000ede:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ee2:	d1d8      	bne.n	8000e96 <__aeabi_fmul+0xc6>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	4770      	bx	lr
 8000eee:	f090 0f00 	teq	r0, #0
 8000ef2:	bf17      	itett	ne
 8000ef4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ef8:	4608      	moveq	r0, r1
 8000efa:	f091 0f00 	teqne	r1, #0
 8000efe:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f02:	d014      	beq.n	8000f2e <__aeabi_fmul+0x15e>
 8000f04:	ea92 0f0c 	teq	r2, ip
 8000f08:	d101      	bne.n	8000f0e <__aeabi_fmul+0x13e>
 8000f0a:	0242      	lsls	r2, r0, #9
 8000f0c:	d10f      	bne.n	8000f2e <__aeabi_fmul+0x15e>
 8000f0e:	ea93 0f0c 	teq	r3, ip
 8000f12:	d103      	bne.n	8000f1c <__aeabi_fmul+0x14c>
 8000f14:	024b      	lsls	r3, r1, #9
 8000f16:	bf18      	it	ne
 8000f18:	4608      	movne	r0, r1
 8000f1a:	d108      	bne.n	8000f2e <__aeabi_fmul+0x15e>
 8000f1c:	ea80 0001 	eor.w	r0, r0, r1
 8000f20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f24:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f28:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f2c:	4770      	bx	lr
 8000f2e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f32:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_fdiv>:
 8000f38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f40:	bf1e      	ittt	ne
 8000f42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f46:	ea92 0f0c 	teqne	r2, ip
 8000f4a:	ea93 0f0c 	teqne	r3, ip
 8000f4e:	d069      	beq.n	8001024 <__aeabi_fdiv+0xec>
 8000f50:	eba2 0203 	sub.w	r2, r2, r3
 8000f54:	ea80 0c01 	eor.w	ip, r0, r1
 8000f58:	0249      	lsls	r1, r1, #9
 8000f5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f5e:	d037      	beq.n	8000fd0 <__aeabi_fdiv+0x98>
 8000f60:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f70:	428b      	cmp	r3, r1
 8000f72:	bf38      	it	cc
 8000f74:	005b      	lslcc	r3, r3, #1
 8000f76:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f7a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	bf24      	itt	cs
 8000f82:	1a5b      	subcs	r3, r3, r1
 8000f84:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f9a:	bf24      	itt	cs
 8000f9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fa0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fa4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa8:	bf24      	itt	cs
 8000faa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	bf18      	it	ne
 8000fb6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fba:	d1e0      	bne.n	8000f7e <__aeabi_fdiv+0x46>
 8000fbc:	2afd      	cmp	r2, #253	@ 0xfd
 8000fbe:	f63f af50 	bhi.w	8000e62 <__aeabi_fmul+0x92>
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc8:	bf08      	it	eq
 8000fca:	f020 0001 	biceq.w	r0, r0, #1
 8000fce:	4770      	bx	lr
 8000fd0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fd4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd8:	327f      	adds	r2, #127	@ 0x7f
 8000fda:	bfc2      	ittt	gt
 8000fdc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fe0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fe4:	4770      	bxgt	lr
 8000fe6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	3a01      	subs	r2, #1
 8000ff0:	e737      	b.n	8000e62 <__aeabi_fmul+0x92>
 8000ff2:	f092 0f00 	teq	r2, #0
 8000ff6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ffa:	bf02      	ittt	eq
 8000ffc:	0040      	lsleq	r0, r0, #1
 8000ffe:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001002:	3a01      	subeq	r2, #1
 8001004:	d0f9      	beq.n	8000ffa <__aeabi_fdiv+0xc2>
 8001006:	ea40 000c 	orr.w	r0, r0, ip
 800100a:	f093 0f00 	teq	r3, #0
 800100e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001012:	bf02      	ittt	eq
 8001014:	0049      	lsleq	r1, r1, #1
 8001016:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800101a:	3b01      	subeq	r3, #1
 800101c:	d0f9      	beq.n	8001012 <__aeabi_fdiv+0xda>
 800101e:	ea41 010c 	orr.w	r1, r1, ip
 8001022:	e795      	b.n	8000f50 <__aeabi_fdiv+0x18>
 8001024:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001028:	ea92 0f0c 	teq	r2, ip
 800102c:	d108      	bne.n	8001040 <__aeabi_fdiv+0x108>
 800102e:	0242      	lsls	r2, r0, #9
 8001030:	f47f af7d 	bne.w	8000f2e <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	f47f af70 	bne.w	8000f1c <__aeabi_fmul+0x14c>
 800103c:	4608      	mov	r0, r1
 800103e:	e776      	b.n	8000f2e <__aeabi_fmul+0x15e>
 8001040:	ea93 0f0c 	teq	r3, ip
 8001044:	d104      	bne.n	8001050 <__aeabi_fdiv+0x118>
 8001046:	024b      	lsls	r3, r1, #9
 8001048:	f43f af4c 	beq.w	8000ee4 <__aeabi_fmul+0x114>
 800104c:	4608      	mov	r0, r1
 800104e:	e76e      	b.n	8000f2e <__aeabi_fmul+0x15e>
 8001050:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001054:	bf18      	it	ne
 8001056:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800105a:	d1ca      	bne.n	8000ff2 <__aeabi_fdiv+0xba>
 800105c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001060:	f47f af5c 	bne.w	8000f1c <__aeabi_fmul+0x14c>
 8001064:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001068:	f47f af3c 	bne.w	8000ee4 <__aeabi_fmul+0x114>
 800106c:	e75f      	b.n	8000f2e <__aeabi_fmul+0x15e>
 800106e:	bf00      	nop

08001070 <__gesf2>:
 8001070:	f04f 3cff 	mov.w	ip, #4294967295
 8001074:	e006      	b.n	8001084 <__cmpsf2+0x4>
 8001076:	bf00      	nop

08001078 <__lesf2>:
 8001078:	f04f 0c01 	mov.w	ip, #1
 800107c:	e002      	b.n	8001084 <__cmpsf2+0x4>
 800107e:	bf00      	nop

08001080 <__cmpsf2>:
 8001080:	f04f 0c01 	mov.w	ip, #1
 8001084:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001088:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800108c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001090:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001094:	bf18      	it	ne
 8001096:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800109a:	d011      	beq.n	80010c0 <__cmpsf2+0x40>
 800109c:	b001      	add	sp, #4
 800109e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010a2:	bf18      	it	ne
 80010a4:	ea90 0f01 	teqne	r0, r1
 80010a8:	bf58      	it	pl
 80010aa:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ae:	bf88      	it	hi
 80010b0:	17c8      	asrhi	r0, r1, #31
 80010b2:	bf38      	it	cc
 80010b4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010b8:	bf18      	it	ne
 80010ba:	f040 0001 	orrne.w	r0, r0, #1
 80010be:	4770      	bx	lr
 80010c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c4:	d102      	bne.n	80010cc <__cmpsf2+0x4c>
 80010c6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ca:	d105      	bne.n	80010d8 <__cmpsf2+0x58>
 80010cc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d0:	d1e4      	bne.n	800109c <__cmpsf2+0x1c>
 80010d2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010d6:	d0e1      	beq.n	800109c <__cmpsf2+0x1c>
 80010d8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <__aeabi_cfrcmple>:
 80010e0:	4684      	mov	ip, r0
 80010e2:	4608      	mov	r0, r1
 80010e4:	4661      	mov	r1, ip
 80010e6:	e7ff      	b.n	80010e8 <__aeabi_cfcmpeq>

080010e8 <__aeabi_cfcmpeq>:
 80010e8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ea:	f7ff ffc9 	bl	8001080 <__cmpsf2>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	bf48      	it	mi
 80010f2:	f110 0f00 	cmnmi.w	r0, #0
 80010f6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010f8 <__aeabi_fcmpeq>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff fff4 	bl	80010e8 <__aeabi_cfcmpeq>
 8001100:	bf0c      	ite	eq
 8001102:	2001      	moveq	r0, #1
 8001104:	2000      	movne	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmplt>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffea 	bl	80010e8 <__aeabi_cfcmpeq>
 8001114:	bf34      	ite	cc
 8001116:	2001      	movcc	r0, #1
 8001118:	2000      	movcs	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmple>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffe0 	bl	80010e8 <__aeabi_cfcmpeq>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpge>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffd2 	bl	80010e0 <__aeabi_cfrcmple>
 800113c:	bf94      	ite	ls
 800113e:	2001      	movls	r0, #1
 8001140:	2000      	movhi	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_fcmpgt>:
 8001148:	f84d ed08 	str.w	lr, [sp, #-8]!
 800114c:	f7ff ffc8 	bl	80010e0 <__aeabi_cfrcmple>
 8001150:	bf34      	ite	cc
 8001152:	2001      	movcc	r0, #1
 8001154:	2000      	movcs	r0, #0
 8001156:	f85d fb08 	ldr.w	pc, [sp], #8
 800115a:	bf00      	nop

0800115c <__aeabi_f2iz>:
 800115c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001164:	d30f      	bcc.n	8001186 <__aeabi_f2iz+0x2a>
 8001166:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d90d      	bls.n	800118c <__aeabi_f2iz+0x30>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001178:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800117c:	fa23 f002 	lsr.w	r0, r3, r2
 8001180:	bf18      	it	ne
 8001182:	4240      	negne	r0, r0
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr
 800118c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001190:	d101      	bne.n	8001196 <__aeabi_f2iz+0x3a>
 8001192:	0242      	lsls	r2, r0, #9
 8001194:	d105      	bne.n	80011a2 <__aeabi_f2iz+0x46>
 8001196:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800119a:	bf08      	it	eq
 800119c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80011a0:	4770      	bx	lr
 80011a2:	f04f 0000 	mov.w	r0, #0
 80011a6:	4770      	bx	lr

080011a8 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011fc:	b5b0      	push	{r4, r5, r7, lr}
 80011fe:	b08c      	sub	sp, #48	@ 0x30
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001202:	f002 fb67 	bl	80038d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001206:	f000 f8ab 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120a:	f000 faff 	bl	800180c <MX_GPIO_Init>
  MX_TIM3_Init();
 800120e:	f000 f9d3 	bl	80015b8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001212:	f000 f901 	bl	8001418 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001216:	f000 f93d 	bl	8001494 <MX_I2C1_Init>
  MX_SPI2_Init();
 800121a:	f000 f997 	bl	800154c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800121e:	f000 facb 	bl	80017b8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001222:	f000 f965 	bl	80014f0 <MX_I2C2_Init>
  MX_TIM4_Init();
 8001226:	f000 fa47 	bl	80016b8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  NVIC_SetPriorityGrouping( 0 );
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff ffc2 	bl	80011b4 <__NVIC_SetPriorityGrouping>
  //Enable the CYCCNT counter
  DWT_CTRL |= ( 1 << 0 );
 8001230:	4b3a      	ldr	r3, [pc, #232]	@ (800131c <main+0x120>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a39      	ldr	r2, [pc, #228]	@ (800131c <main+0x120>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6013      	str	r3, [r2, #0]
  //SEGGER_UART_init(500000);
  SEGGER_SYSVIEW_Conf();
 800123c:	f009 fefc 	bl	800b038 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8001240:	f00b fafc 	bl	800c83c <SEGGER_SYSVIEW_Start>

  // MODULE SETTINGS ----------------------------------------------
  myLoRa = newLoRa();
 8001244:	4c36      	ldr	r4, [pc, #216]	@ (8001320 <main+0x124>)
 8001246:	463b      	mov	r3, r7
 8001248:	4618      	mov	r0, r3
 800124a:	f001 ffff 	bl	800324c <newLoRa>
 800124e:	4625      	mov	r5, r4
 8001250:	463c      	mov	r4, r7
 8001252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800125a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800125e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.hSPIx                 		= &hspi2;
 8001262:	4b2f      	ldr	r3, [pc, #188]	@ (8001320 <main+0x124>)
 8001264:	4a2f      	ldr	r2, [pc, #188]	@ (8001324 <main+0x128>)
 8001266:	619a      	str	r2, [r3, #24]
  myLoRa.CS_port               		= NSS_GPIO_Port;
 8001268:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <main+0x124>)
 800126a:	4a2f      	ldr	r2, [pc, #188]	@ (8001328 <main+0x12c>)
 800126c:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin                		= NSS_Pin;
 800126e:	4b2c      	ldr	r3, [pc, #176]	@ (8001320 <main+0x124>)
 8001270:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001274:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port            		= RESET_GPIO_Port;
 8001276:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <main+0x124>)
 8001278:	4a2c      	ldr	r2, [pc, #176]	@ (800132c <main+0x130>)
 800127a:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin             		= RESET_Pin;
 800127c:	4b28      	ldr	r3, [pc, #160]	@ (8001320 <main+0x124>)
 800127e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001282:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port			   		= DIO0_GPIO_Port;
 8001284:	4b26      	ldr	r3, [pc, #152]	@ (8001320 <main+0x124>)
 8001286:	4a29      	ldr	r2, [pc, #164]	@ (800132c <main+0x130>)
 8001288:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin			   		= DIO0_Pin;
 800128a:	4b25      	ldr	r3, [pc, #148]	@ (8001320 <main+0x124>)
 800128c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001290:	829a      	strh	r2, [r3, #20]

  myLoRa.frequency             		= 433;					// default = 433 MHz
 8001292:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <main+0x124>)
 8001294:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001298:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        		= SF_7;					// default = SF_7
 800129a:	4b21      	ldr	r3, [pc, #132]	@ (8001320 <main+0x124>)
 800129c:	2207      	movs	r2, #7
 800129e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth			       	= BW_125KHz;			// default = BW_125KHz
 80012a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001320 <main+0x124>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate				    = CR_4_5;				// default = CR_4_5
 80012aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <main+0x124>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power					    = POWER_20db;			// default = 20db
 80012b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <main+0x124>)
 80012b4:	22ff      	movs	r2, #255	@ 0xff
 80012b6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection 		= 100; 					// default = 100 mA
 80012ba:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <main+0x124>)
 80012bc:	2264      	movs	r2, #100	@ 0x64
 80012be:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble				    = 10;		  			// default = 8;
 80012c2:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <main+0x124>)
 80012c4:	220a      	movs	r2, #10
 80012c6:	851a      	strh	r2, [r3, #40]	@ 0x28

  HD44780_Init(2);
 80012c8:	2002      	movs	r0, #2
 80012ca:	f001 fe11 	bl	8002ef0 <HD44780_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012ce:	f006 ff83 	bl	80081d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of runTask */
  runTaskHandle = osThreadNew(StartRunTask, NULL, &runTask_attributes);
 80012d2:	4a17      	ldr	r2, [pc, #92]	@ (8001330 <main+0x134>)
 80012d4:	2100      	movs	r1, #0
 80012d6:	4817      	ldr	r0, [pc, #92]	@ (8001334 <main+0x138>)
 80012d8:	f006 ffe4 	bl	80082a4 <osThreadNew>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a16      	ldr	r2, [pc, #88]	@ (8001338 <main+0x13c>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* creation of standbyTask */
  standbyTaskHandle = osThreadNew(StartStandbyTask, NULL, &standbyTask_attributes);
 80012e2:	4a16      	ldr	r2, [pc, #88]	@ (800133c <main+0x140>)
 80012e4:	2100      	movs	r1, #0
 80012e6:	4816      	ldr	r0, [pc, #88]	@ (8001340 <main+0x144>)
 80012e8:	f006 ffdc 	bl	80082a4 <osThreadNew>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a15      	ldr	r2, [pc, #84]	@ (8001344 <main+0x148>)
 80012f0:	6013      	str	r3, [r2, #0]

  /* creation of commTask */
  commTaskHandle = osThreadNew(StartCommTask, NULL, &commTask_attributes);
 80012f2:	4a15      	ldr	r2, [pc, #84]	@ (8001348 <main+0x14c>)
 80012f4:	2100      	movs	r1, #0
 80012f6:	4815      	ldr	r0, [pc, #84]	@ (800134c <main+0x150>)
 80012f8:	f006 ffd4 	bl	80082a4 <osThreadNew>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <main+0x154>)
 8001300:	6013      	str	r3, [r2, #0]

  /* creation of sensorTask */
  sensorTaskHandle = osThreadNew(StartSensorTask, NULL, &sensorTask_attributes);
 8001302:	4a14      	ldr	r2, [pc, #80]	@ (8001354 <main+0x158>)
 8001304:	2100      	movs	r1, #0
 8001306:	4814      	ldr	r0, [pc, #80]	@ (8001358 <main+0x15c>)
 8001308:	f006 ffcc 	bl	80082a4 <osThreadNew>
 800130c:	4603      	mov	r3, r0
 800130e:	4a13      	ldr	r2, [pc, #76]	@ (800135c <main+0x160>)
 8001310:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001312:	f006 ff93 	bl	800823c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001316:	bf00      	nop
 8001318:	e7fd      	b.n	8001316 <main+0x11a>
 800131a:	bf00      	nop
 800131c:	e0001000 	.word	0xe0001000
 8001320:	20000470 	.word	0x20000470
 8001324:	200002e4 	.word	0x200002e4
 8001328:	40010c00 	.word	0x40010c00
 800132c:	40010800 	.word	0x40010800
 8001330:	08010240 	.word	0x08010240
 8001334:	08001ae1 	.word	0x08001ae1
 8001338:	20000414 	.word	0x20000414
 800133c:	08010264 	.word	0x08010264
 8001340:	0800208d 	.word	0x0800208d
 8001344:	20000418 	.word	0x20000418
 8001348:	08010288 	.word	0x08010288
 800134c:	08002299 	.word	0x08002299
 8001350:	2000041c 	.word	0x2000041c
 8001354:	080102ac 	.word	0x080102ac
 8001358:	08002369 	.word	0x08002369
 800135c:	20000420 	.word	0x20000420

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	@ 0x50
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800136a:	2228      	movs	r2, #40	@ 0x28
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f00c fdd7 	bl	800df22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001390:	2301      	movs	r3, #1
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001394:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139e:	2301      	movs	r3, #1
 80013a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a2:	2302      	movs	r3, #2
 80013a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ac:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b6:	4618      	mov	r0, r3
 80013b8:	f004 fac8 	bl	800594c <HAL_RCC_OscConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013c2:	f001 f894 	bl	80024ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c6:	230f      	movs	r3, #15
 80013c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2102      	movs	r1, #2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f004 fd34 	bl	8005e50 <HAL_RCC_ClockConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013ee:	f001 f87e 	bl	80024ee <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013f2:	2302      	movs	r3, #2
 80013f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013fa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	4618      	mov	r0, r3
 8001400:	f004 fee4 	bl	80061cc <HAL_RCCEx_PeriphCLKConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800140a:	f001 f870 	bl	80024ee <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	3750      	adds	r7, #80	@ 0x50
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001428:	4b18      	ldr	r3, [pc, #96]	@ (800148c <MX_ADC1_Init+0x74>)
 800142a:	4a19      	ldr	r2, [pc, #100]	@ (8001490 <MX_ADC1_Init+0x78>)
 800142c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <MX_ADC1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001434:	4b15      	ldr	r3, [pc, #84]	@ (800148c <MX_ADC1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800143a:	4b14      	ldr	r3, [pc, #80]	@ (800148c <MX_ADC1_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001440:	4b12      	ldr	r3, [pc, #72]	@ (800148c <MX_ADC1_Init+0x74>)
 8001442:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001446:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001448:	4b10      	ldr	r3, [pc, #64]	@ (800148c <MX_ADC1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <MX_ADC1_Init+0x74>)
 8001450:	2201      	movs	r2, #1
 8001452:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001454:	480d      	ldr	r0, [pc, #52]	@ (800148c <MX_ADC1_Init+0x74>)
 8001456:	f002 fa93 	bl	8003980 <HAL_ADC_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001460:	f001 f845 	bl	80024ee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001468:	2301      	movs	r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	4619      	mov	r1, r3
 8001474:	4805      	ldr	r0, [pc, #20]	@ (800148c <MX_ADC1_Init+0x74>)
 8001476:	f002 fd47 	bl	8003f08 <HAL_ADC_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001480:	f001 f835 	bl	80024ee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	2000020c 	.word	0x2000020c
 8001490:	40012400 	.word	0x40012400

08001494 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001498:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <MX_I2C1_Init+0x54>)
 800149a:	4a14      	ldr	r2, [pc, #80]	@ (80014ec <MX_I2C1_Init+0x58>)
 800149c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 800149e:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <MX_I2C1_Init+0x54>)
 80014a0:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80014a4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <MX_I2C1_Init+0x54>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014ac:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <MX_I2C1_Init+0x54>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b2:	4b0d      	ldr	r3, [pc, #52]	@ (80014e8 <MX_I2C1_Init+0x54>)
 80014b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <MX_I2C1_Init+0x54>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <MX_I2C1_Init+0x54>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <MX_I2C1_Init+0x54>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <MX_I2C1_Init+0x54>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <MX_I2C1_Init+0x54>)
 80014d4:	f003 f940 	bl	8004758 <HAL_I2C_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80014de:	f001 f806 	bl	80024ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000023c 	.word	0x2000023c
 80014ec:	40005400 	.word	0x40005400

080014f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_I2C2_Init+0x50>)
 80014f6:	4a13      	ldr	r2, [pc, #76]	@ (8001544 <MX_I2C2_Init+0x54>)
 80014f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_I2C2_Init+0x50>)
 80014fc:	4a12      	ldr	r2, [pc, #72]	@ (8001548 <MX_I2C2_Init+0x58>)
 80014fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_I2C2_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_I2C2_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_I2C2_Init+0x50>)
 800150e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001512:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <MX_I2C2_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800151a:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_I2C2_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001520:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <MX_I2C2_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_I2C2_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	@ (8001540 <MX_I2C2_Init+0x50>)
 800152e:	f003 f913 	bl	8004758 <HAL_I2C_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001538:	f000 ffd9 	bl	80024ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000290 	.word	0x20000290
 8001544:	40005800 	.word	0x40005800
 8001548:	000186a0 	.word	0x000186a0

0800154c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <MX_SPI2_Init+0x64>)
 8001552:	4a18      	ldr	r2, [pc, #96]	@ (80015b4 <MX_SPI2_Init+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <MX_SPI2_Init+0x64>)
 8001558:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800155c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800155e:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <MX_SPI2_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_SPI2_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_SPI2_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_SPI2_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_SPI2_Init+0x64>)
 8001578:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800157c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_SPI2_Init+0x64>)
 8001580:	2200      	movs	r2, #0
 8001582:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001584:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <MX_SPI2_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_SPI2_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <MX_SPI2_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_SPI2_Init+0x64>)
 8001598:	220a      	movs	r2, #10
 800159a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_SPI2_Init+0x64>)
 800159e:	f004 ff81 	bl	80064a4 <HAL_SPI_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80015a8:	f000 ffa1 	bl	80024ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200002e4 	.word	0x200002e4
 80015b4:	40003800 	.word	0x40003800

080015b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08e      	sub	sp, #56	@ 0x38
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	f107 0320 	add.w	r3, r7, #32
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	615a      	str	r2, [r3, #20]
 80015e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015e8:	4b31      	ldr	r3, [pc, #196]	@ (80016b0 <MX_TIM3_Init+0xf8>)
 80015ea:	4a32      	ldr	r2, [pc, #200]	@ (80016b4 <MX_TIM3_Init+0xfc>)
 80015ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80015ee:	4b30      	ldr	r3, [pc, #192]	@ (80016b0 <MX_TIM3_Init+0xf8>)
 80015f0:	2247      	movs	r2, #71	@ 0x47
 80015f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f4:	4b2e      	ldr	r3, [pc, #184]	@ (80016b0 <MX_TIM3_Init+0xf8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80015fa:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <MX_TIM3_Init+0xf8>)
 80015fc:	2263      	movs	r2, #99	@ 0x63
 80015fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001600:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <MX_TIM3_Init+0xf8>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001606:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <MX_TIM3_Init+0xf8>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800160c:	4828      	ldr	r0, [pc, #160]	@ (80016b0 <MX_TIM3_Init+0xf8>)
 800160e:	f005 fcdd 	bl	8006fcc <HAL_TIM_Base_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001618:	f000 ff69 	bl	80024ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001622:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001626:	4619      	mov	r1, r3
 8001628:	4821      	ldr	r0, [pc, #132]	@ (80016b0 <MX_TIM3_Init+0xf8>)
 800162a:	f006 f899 	bl	8007760 <HAL_TIM_ConfigClockSource>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001634:	f000 ff5b 	bl	80024ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001638:	481d      	ldr	r0, [pc, #116]	@ (80016b0 <MX_TIM3_Init+0xf8>)
 800163a:	f005 fd69 	bl	8007110 <HAL_TIM_PWM_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001644:	f000 ff53 	bl	80024ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001650:	f107 0320 	add.w	r3, r7, #32
 8001654:	4619      	mov	r1, r3
 8001656:	4816      	ldr	r0, [pc, #88]	@ (80016b0 <MX_TIM3_Init+0xf8>)
 8001658:	f006 fc12 	bl	8007e80 <HAL_TIMEx_MasterConfigSynchronization>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001662:	f000 ff44 	bl	80024ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001666:	2360      	movs	r3, #96	@ 0x60
 8001668:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2208      	movs	r2, #8
 800167a:	4619      	mov	r1, r3
 800167c:	480c      	ldr	r0, [pc, #48]	@ (80016b0 <MX_TIM3_Init+0xf8>)
 800167e:	f005 ffad 	bl	80075dc <HAL_TIM_PWM_ConfigChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001688:	f000 ff31 	bl	80024ee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	220c      	movs	r2, #12
 8001690:	4619      	mov	r1, r3
 8001692:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <MX_TIM3_Init+0xf8>)
 8001694:	f005 ffa2 	bl	80075dc <HAL_TIM_PWM_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800169e:	f000 ff26 	bl	80024ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016a2:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <MX_TIM3_Init+0xf8>)
 80016a4:	f001 f898 	bl	80027d8 <HAL_TIM_MspPostInit>

}
 80016a8:	bf00      	nop
 80016aa:	3738      	adds	r7, #56	@ 0x38
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000033c 	.word	0x2000033c
 80016b4:	40000400 	.word	0x40000400

080016b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08e      	sub	sp, #56	@ 0x38
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016cc:	f107 0320 	add.w	r3, r7, #32
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
 80016e4:	615a      	str	r2, [r3, #20]
 80016e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016e8:	4b31      	ldr	r3, [pc, #196]	@ (80017b0 <MX_TIM4_Init+0xf8>)
 80016ea:	4a32      	ldr	r2, [pc, #200]	@ (80017b4 <MX_TIM4_Init+0xfc>)
 80016ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80016ee:	4b30      	ldr	r3, [pc, #192]	@ (80017b0 <MX_TIM4_Init+0xf8>)
 80016f0:	2247      	movs	r2, #71	@ 0x47
 80016f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b2e      	ldr	r3, [pc, #184]	@ (80017b0 <MX_TIM4_Init+0xf8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80016fa:	4b2d      	ldr	r3, [pc, #180]	@ (80017b0 <MX_TIM4_Init+0xf8>)
 80016fc:	2264      	movs	r2, #100	@ 0x64
 80016fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001700:	4b2b      	ldr	r3, [pc, #172]	@ (80017b0 <MX_TIM4_Init+0xf8>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001706:	4b2a      	ldr	r3, [pc, #168]	@ (80017b0 <MX_TIM4_Init+0xf8>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800170c:	4828      	ldr	r0, [pc, #160]	@ (80017b0 <MX_TIM4_Init+0xf8>)
 800170e:	f005 fc5d 	bl	8006fcc <HAL_TIM_Base_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001718:	f000 fee9 	bl	80024ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001722:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001726:	4619      	mov	r1, r3
 8001728:	4821      	ldr	r0, [pc, #132]	@ (80017b0 <MX_TIM4_Init+0xf8>)
 800172a:	f006 f819 	bl	8007760 <HAL_TIM_ConfigClockSource>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001734:	f000 fedb 	bl	80024ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001738:	481d      	ldr	r0, [pc, #116]	@ (80017b0 <MX_TIM4_Init+0xf8>)
 800173a:	f005 fce9 	bl	8007110 <HAL_TIM_PWM_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001744:	f000 fed3 	bl	80024ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	4619      	mov	r1, r3
 8001756:	4816      	ldr	r0, [pc, #88]	@ (80017b0 <MX_TIM4_Init+0xf8>)
 8001758:	f006 fb92 	bl	8007e80 <HAL_TIMEx_MasterConfigSynchronization>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001762:	f000 fec4 	bl	80024ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001766:	2360      	movs	r3, #96	@ 0x60
 8001768:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2200      	movs	r2, #0
 800177a:	4619      	mov	r1, r3
 800177c:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <MX_TIM4_Init+0xf8>)
 800177e:	f005 ff2d 	bl	80075dc <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001788:	f000 feb1 	bl	80024ee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2204      	movs	r2, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <MX_TIM4_Init+0xf8>)
 8001794:	f005 ff22 	bl	80075dc <HAL_TIM_PWM_ConfigChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800179e:	f000 fea6 	bl	80024ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017a2:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <MX_TIM4_Init+0xf8>)
 80017a4:	f001 f818 	bl	80027d8 <HAL_TIM_MspPostInit>

}
 80017a8:	bf00      	nop
 80017aa:	3738      	adds	r7, #56	@ 0x38
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000384 	.word	0x20000384
 80017b4:	40000800 	.word	0x40000800

080017b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017be:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <MX_USART1_UART_Init+0x50>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017f0:	f006 fbb6 	bl	8007f60 <HAL_UART_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017fa:	f000 fe78 	bl	80024ee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200003cc 	.word	0x200003cc
 8001808:	40013800 	.word	0x40013800

0800180c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	f107 0310 	add.w	r3, r7, #16
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001820:	4b3e      	ldr	r3, [pc, #248]	@ (800191c <MX_GPIO_Init+0x110>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a3d      	ldr	r2, [pc, #244]	@ (800191c <MX_GPIO_Init+0x110>)
 8001826:	f043 0310 	orr.w	r3, r3, #16
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b3b      	ldr	r3, [pc, #236]	@ (800191c <MX_GPIO_Init+0x110>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001838:	4b38      	ldr	r3, [pc, #224]	@ (800191c <MX_GPIO_Init+0x110>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a37      	ldr	r2, [pc, #220]	@ (800191c <MX_GPIO_Init+0x110>)
 800183e:	f043 0320 	orr.w	r3, r3, #32
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b35      	ldr	r3, [pc, #212]	@ (800191c <MX_GPIO_Init+0x110>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001850:	4b32      	ldr	r3, [pc, #200]	@ (800191c <MX_GPIO_Init+0x110>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a31      	ldr	r2, [pc, #196]	@ (800191c <MX_GPIO_Init+0x110>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b2f      	ldr	r3, [pc, #188]	@ (800191c <MX_GPIO_Init+0x110>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001868:	4b2c      	ldr	r3, [pc, #176]	@ (800191c <MX_GPIO_Init+0x110>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a2b      	ldr	r2, [pc, #172]	@ (800191c <MX_GPIO_Init+0x110>)
 800186e:	f043 0308 	orr.w	r3, r3, #8
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b29      	ldr	r3, [pc, #164]	@ (800191c <MX_GPIO_Init+0x110>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LoRA_RST_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 6102 	mov.w	r1, #2080	@ 0x820
 8001886:	4826      	ldr	r0, [pc, #152]	@ (8001920 <MX_GPIO_Init+0x114>)
 8001888:	f002 ff4d 	bl	8004726 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BlueButton_Pin HomeButton_Pin StartButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin|HomeButton_Pin|StartButton_Pin;
 800188c:	f242 0303 	movw	r3, #8195	@ 0x2003
 8001890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001896:	2301      	movs	r3, #1
 8001898:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	4619      	mov	r1, r3
 80018a0:	4820      	ldr	r0, [pc, #128]	@ (8001924 <MX_GPIO_Init+0x118>)
 80018a2:	f002 fda5 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80018a6:	2320      	movs	r3, #32
 80018a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2302      	movs	r3, #2
 80018b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	4619      	mov	r1, r3
 80018bc:	4818      	ldr	r0, [pc, #96]	@ (8001920 <MX_GPIO_Init+0x114>)
 80018be:	f002 fd97 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AI_Trigger_Pin Voice_Dir_1_Pin Voice_Dir_2_Pin Voice_Dir_3_Pin */
  GPIO_InitStruct.Pin = AI_Trigger_Pin|Voice_Dir_1_Pin|Voice_Dir_2_Pin|Voice_Dir_3_Pin;
 80018c2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80018c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018cc:	2302      	movs	r3, #2
 80018ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	4619      	mov	r1, r3
 80018d6:	4813      	ldr	r0, [pc, #76]	@ (8001924 <MX_GPIO_Init+0x118>)
 80018d8:	f002 fd8a 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LoRA_RST_Pin */
  GPIO_InitStruct.Pin = LoRA_RST_Pin;
 80018dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LoRA_RST_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	4619      	mov	r1, r3
 80018f4:	480a      	ldr	r0, [pc, #40]	@ (8001920 <MX_GPIO_Init+0x114>)
 80018f6:	f002 fd7b 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LoRA_IRQ_Pin */
  GPIO_InitStruct.Pin = LoRA_IRQ_Pin;
 80018fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001900:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <MX_GPIO_Init+0x11c>)
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001904:	2302      	movs	r3, #2
 8001906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LoRA_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4619      	mov	r1, r3
 800190e:	4804      	ldr	r0, [pc, #16]	@ (8001920 <MX_GPIO_Init+0x114>)
 8001910:	f002 fd6e 	bl	80043f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001914:	bf00      	nop
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40021000 	.word	0x40021000
 8001920:	40010800 	.word	0x40010800
 8001924:	40011000 	.word	0x40011000
 8001928:	10110000 	.word	0x10110000

0800192c <Motor_Set>:
    float output = pid->kp * error + pid->ki * pid->integral + pid->kd * derivative;
    pid->prevError = error;
    return output;
}

void Motor_Set(int8_t speedA, int8_t speedB) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	460a      	mov	r2, r1
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	4613      	mov	r3, r2
 800193a:	71bb      	strb	r3, [r7, #6]
	/* user defined speed should be between (-)100 to 100*/

	speedA = (speedA > 100) ? 100 : speedA;
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	2b64      	cmp	r3, #100	@ 0x64
 8001942:	bfa8      	it	ge
 8001944:	2364      	movge	r3, #100	@ 0x64
 8001946:	71fb      	strb	r3, [r7, #7]
	speedA = (speedA < -100) ? -100 : speedA;
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8001950:	4293      	cmp	r3, r2
 8001952:	bfb8      	it	lt
 8001954:	4613      	movlt	r3, r2
 8001956:	71fb      	strb	r3, [r7, #7]
	speedB = (speedB > 100) ? 100 : speedB;
 8001958:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800195c:	2b64      	cmp	r3, #100	@ 0x64
 800195e:	bfa8      	it	ge
 8001960:	2364      	movge	r3, #100	@ 0x64
 8001962:	71bb      	strb	r3, [r7, #6]
	speedB = (speedB < -100) ? -100 : speedB;
 8001964:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001968:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800196c:	4293      	cmp	r3, r2
 800196e:	bfb8      	it	lt
 8001970:	4613      	movlt	r3, r2
 8001972:	71bb      	strb	r3, [r7, #6]

	bool signBitA = (speedA & 0b10000000) >> 7;
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	11db      	asrs	r3, r3, #7
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf14      	ite	ne
 8001982:	2301      	movne	r3, #1
 8001984:	2300      	moveq	r3, #0
 8001986:	75fb      	strb	r3, [r7, #23]
	uint32_t absValueA = (speedA > 0) ? (uint8_t)speedA : (uint8_t)(-speedA);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	dd01      	ble.n	8001994 <Motor_Set+0x68>
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	e002      	b.n	800199a <Motor_Set+0x6e>
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	425b      	negs	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	613b      	str	r3, [r7, #16]

	bool signBitB = (speedB & 0b10000000) >> 7;
 800199c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019a0:	11db      	asrs	r3, r3, #7
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bf14      	ite	ne
 80019aa:	2301      	movne	r3, #1
 80019ac:	2300      	moveq	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
	uint32_t absValueB = (speedB > 0) ? (uint8_t)speedB : (uint8_t)(-speedB);
 80019b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	dd01      	ble.n	80019bc <Motor_Set+0x90>
 80019b8:	79bb      	ldrb	r3, [r7, #6]
 80019ba:	e002      	b.n	80019c2 <Motor_Set+0x96>
 80019bc:	79bb      	ldrb	r3, [r7, #6]
 80019be:	425b      	negs	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	60bb      	str	r3, [r7, #8]

	if(signBitA == 0)
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	f083 0301 	eor.w	r3, r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00e      	beq.n	80019ee <Motor_Set+0xc2>
	{	// Right Motor Forward
		TIM4->CCR1 = 0;
 80019d0:	4b30      	ldr	r3, [pc, #192]	@ (8001a94 <Motor_Set+0x168>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80019d6:	2100      	movs	r1, #0
 80019d8:	482f      	ldr	r0, [pc, #188]	@ (8001a98 <Motor_Set+0x16c>)
 80019da:	f005 fbf1 	bl	80071c0 <HAL_TIM_PWM_Start>
		TIM4->CCR2 = absValueA;
 80019de:	4a2d      	ldr	r2, [pc, #180]	@ (8001a94 <Motor_Set+0x168>)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	6393      	str	r3, [r2, #56]	@ 0x38
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80019e4:	2104      	movs	r1, #4
 80019e6:	482c      	ldr	r0, [pc, #176]	@ (8001a98 <Motor_Set+0x16c>)
 80019e8:	f005 fbea 	bl	80071c0 <HAL_TIM_PWM_Start>
 80019ec:	e010      	b.n	8001a10 <Motor_Set+0xe4>
	}
	else if(signBitA == 1)
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00d      	beq.n	8001a10 <Motor_Set+0xe4>
	{	// Right Motor Reverse
		TIM4->CCR1 = absValueA;
 80019f4:	4a27      	ldr	r2, [pc, #156]	@ (8001a94 <Motor_Set+0x168>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6353      	str	r3, [r2, #52]	@ 0x34
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80019fa:	2100      	movs	r1, #0
 80019fc:	4826      	ldr	r0, [pc, #152]	@ (8001a98 <Motor_Set+0x16c>)
 80019fe:	f005 fbdf 	bl	80071c0 <HAL_TIM_PWM_Start>
		TIM4->CCR2 = 0;
 8001a02:	4b24      	ldr	r3, [pc, #144]	@ (8001a94 <Motor_Set+0x168>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001a08:	2104      	movs	r1, #4
 8001a0a:	4823      	ldr	r0, [pc, #140]	@ (8001a98 <Motor_Set+0x16c>)
 8001a0c:	f005 fbd8 	bl	80071c0 <HAL_TIM_PWM_Start>
	}

	if(signBitB == 0)
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	f083 0301 	eor.w	r3, r3, #1
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00e      	beq.n	8001a3a <Motor_Set+0x10e>
	{	// Left Motor Forward
		TIM3->CCR3 = absValueB;
 8001a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001a9c <Motor_Set+0x170>)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	63d3      	str	r3, [r2, #60]	@ 0x3c
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001a22:	2108      	movs	r1, #8
 8001a24:	481e      	ldr	r0, [pc, #120]	@ (8001aa0 <Motor_Set+0x174>)
 8001a26:	f005 fbcb 	bl	80071c0 <HAL_TIM_PWM_Start>
		TIM3->CCR4 = 0;
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <Motor_Set+0x170>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001a30:	210c      	movs	r1, #12
 8001a32:	481b      	ldr	r0, [pc, #108]	@ (8001aa0 <Motor_Set+0x174>)
 8001a34:	f005 fbc4 	bl	80071c0 <HAL_TIM_PWM_Start>
 8001a38:	e010      	b.n	8001a5c <Motor_Set+0x130>
	}
	else if(signBitB == 1)
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00d      	beq.n	8001a5c <Motor_Set+0x130>
	{	// Left Motor Reverse
		TIM3->CCR3 = 0;
 8001a40:	4b16      	ldr	r3, [pc, #88]	@ (8001a9c <Motor_Set+0x170>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001a46:	2108      	movs	r1, #8
 8001a48:	4815      	ldr	r0, [pc, #84]	@ (8001aa0 <Motor_Set+0x174>)
 8001a4a:	f005 fbb9 	bl	80071c0 <HAL_TIM_PWM_Start>
		TIM3->CCR4 = absValueB;
 8001a4e:	4a13      	ldr	r2, [pc, #76]	@ (8001a9c <Motor_Set+0x170>)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	6413      	str	r3, [r2, #64]	@ 0x40
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001a54:	210c      	movs	r1, #12
 8001a56:	4812      	ldr	r0, [pc, #72]	@ (8001aa0 <Motor_Set+0x174>)
 8001a58:	f005 fbb2 	bl	80071c0 <HAL_TIM_PWM_Start>
	}

	if (speedA == 0 && speedB == 0)
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d113      	bne.n	8001a8c <Motor_Set+0x160>
 8001a64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10f      	bne.n	8001a8c <Motor_Set+0x160>
	{
	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	480a      	ldr	r0, [pc, #40]	@ (8001a98 <Motor_Set+0x16c>)
 8001a70:	f005 fc48 	bl	8007304 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001a74:	2104      	movs	r1, #4
 8001a76:	4808      	ldr	r0, [pc, #32]	@ (8001a98 <Motor_Set+0x16c>)
 8001a78:	f005 fc44 	bl	8007304 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001a7c:	2108      	movs	r1, #8
 8001a7e:	4808      	ldr	r0, [pc, #32]	@ (8001aa0 <Motor_Set+0x174>)
 8001a80:	f005 fc40 	bl	8007304 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8001a84:	210c      	movs	r1, #12
 8001a86:	4806      	ldr	r0, [pc, #24]	@ (8001aa0 <Motor_Set+0x174>)
 8001a88:	f005 fc3c 	bl	8007304 <HAL_TIM_PWM_Stop>
//	char textToWrite[ 30 ];
//	sprintf(textToWrite,"A:%3.lu B:%3.lu", absValueA, absValueB);
//	SEGGER_SYSVIEW_PrintfTarget(textToWrite);
//	sprintf(textToWrite,"SA:%d SB:%d", signBitA, signBitB);
//	SEGGER_SYSVIEW_PrintfTarget(textToWrite);
}
 8001a8c:	bf00      	nop
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40000800 	.word	0x40000800
 8001a98:	20000384 	.word	0x20000384
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	2000033c 	.word	0x2000033c

08001aa4 <read_adc_value>:

uint16_t read_adc_value(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
  uint16_t adc_value = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	80fb      	strh	r3, [r7, #6]
  HAL_ADC_Start(&hadc1);
 8001aae:	480b      	ldr	r0, [pc, #44]	@ (8001adc <read_adc_value+0x38>)
 8001ab0:	f002 f83e 	bl	8003b30 <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8001ab4:	210a      	movs	r1, #10
 8001ab6:	4809      	ldr	r0, [pc, #36]	@ (8001adc <read_adc_value+0x38>)
 8001ab8:	f002 f914 	bl	8003ce4 <HAL_ADC_PollForConversion>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d104      	bne.n	8001acc <read_adc_value+0x28>
  {
    adc_value = HAL_ADC_GetValue(&hadc1);
 8001ac2:	4806      	ldr	r0, [pc, #24]	@ (8001adc <read_adc_value+0x38>)
 8001ac4:	f002 fa14 	bl	8003ef0 <HAL_ADC_GetValue>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	80fb      	strh	r3, [r7, #6]
  }
  HAL_ADC_Stop(&hadc1);
 8001acc:	4803      	ldr	r0, [pc, #12]	@ (8001adc <read_adc_value+0x38>)
 8001ace:	f002 f8dd 	bl	8003c8c <HAL_ADC_Stop>
  return adc_value;
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	2000020c 	.word	0x2000020c

08001ae0 <StartRunTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRunTask */
void StartRunTask(void *argument)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b099      	sub	sp, #100	@ 0x64
 8001ae4:	af06      	add	r7, sp, #24
 8001ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  int8_t speedA = 0, speedB = 0, imu_reset_counter = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  char sv_runtask_msg[40];
  double dt_runtask = 0;
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  uint32_t timer_runtask;
  vTaskSuspend(NULL); // Suspend the task
 8001b06:	2000      	movs	r0, #0
 8001b08:	f007 fd06 	bl	8009518 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	setOnBoardLED;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2120      	movs	r1, #32
 8001b10:	4899      	ldr	r0, [pc, #612]	@ (8001d78 <StartRunTask+0x298>)
 8001b12:	f002 fe08 	bl	8004726 <HAL_GPIO_WritePin>

	if((heading_err >= 2 || heading_err <= -2) && curr_run_mode != ROTATE){
 8001b16:	4b99      	ldr	r3, [pc, #612]	@ (8001d7c <StartRunTask+0x29c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fb08 	bl	8001134 <__aeabi_fcmpge>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <StartRunTask+0x5e>
 8001b2a:	4b94      	ldr	r3, [pc, #592]	@ (8001d7c <StartRunTask+0x29c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff faf4 	bl	8001120 <__aeabi_fcmple>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00b      	beq.n	8001b56 <StartRunTask+0x76>
 8001b3e:	4b90      	ldr	r3, [pc, #576]	@ (8001d80 <StartRunTask+0x2a0>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d007      	beq.n	8001b56 <StartRunTask+0x76>
		prev_run_mode = curr_run_mode;
 8001b46:	4b8e      	ldr	r3, [pc, #568]	@ (8001d80 <StartRunTask+0x2a0>)
 8001b48:	781a      	ldrb	r2, [r3, #0]
 8001b4a:	4b8e      	ldr	r3, [pc, #568]	@ (8001d84 <StartRunTask+0x2a4>)
 8001b4c:	701a      	strb	r2, [r3, #0]
		curr_run_mode = ROTATE;
 8001b4e:	4b8c      	ldr	r3, [pc, #560]	@ (8001d80 <StartRunTask+0x2a0>)
 8001b50:	2202      	movs	r2, #2
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	e021      	b.n	8001b9a <StartRunTask+0xba>
	}else if ((heading_err <= 2 && heading_err >= -2) && curr_run_mode == ROTATE){
 8001b56:	4b89      	ldr	r3, [pc, #548]	@ (8001d7c <StartRunTask+0x29c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fade 	bl	8001120 <__aeabi_fcmple>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d017      	beq.n	8001b9a <StartRunTask+0xba>
 8001b6a:	4b84      	ldr	r3, [pc, #528]	@ (8001d7c <StartRunTask+0x29c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fade 	bl	8001134 <__aeabi_fcmpge>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00d      	beq.n	8001b9a <StartRunTask+0xba>
 8001b7e:	4b80      	ldr	r3, [pc, #512]	@ (8001d80 <StartRunTask+0x2a0>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d109      	bne.n	8001b9a <StartRunTask+0xba>
		speedA = 0.0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		speedB = 0.0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
		curr_run_mode = prev_run_mode;
 8001b92:	4b7c      	ldr	r3, [pc, #496]	@ (8001d84 <StartRunTask+0x2a4>)
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	4b7a      	ldr	r3, [pc, #488]	@ (8001d80 <StartRunTask+0x2a0>)
 8001b98:	701a      	strb	r2, [r3, #0]
	}

	switch(curr_run_mode){
 8001b9a:	4b79      	ldr	r3, [pc, #484]	@ (8001d80 <StartRunTask+0x2a0>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	f200 81d8 	bhi.w	8001f54 <StartRunTask+0x474>
 8001ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bac <StartRunTask+0xcc>)
 8001ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001baa:	bf00      	nop
 8001bac:	08001bc1 	.word	0x08001bc1
 8001bb0:	08001c69 	.word	0x08001c69
 8001bb4:	08001e4d 	.word	0x08001e4d
 8001bb8:	08001f27 	.word	0x08001f27
 8001bbc:	08001f35 	.word	0x08001f35
		case MAIN:
			lcd_status = "MAIN";
 8001bc0:	4b71      	ldr	r3, [pc, #452]	@ (8001d88 <StartRunTask+0x2a8>)
 8001bc2:	4a72      	ldr	r2, [pc, #456]	@ (8001d8c <StartRunTask+0x2ac>)
 8001bc4:	601a      	str	r2, [r3, #0]
			target_heading = 0.0f;
 8001bc6:	4b72      	ldr	r3, [pc, #456]	@ (8001d90 <StartRunTask+0x2b0>)
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
			dt_runtask = 0;
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			speedA = 70 + 10 * heading_err;
 8001bda:	4b68      	ldr	r3, [pc, #416]	@ (8001d7c <StartRunTask+0x29c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	496d      	ldr	r1, [pc, #436]	@ (8001d94 <StartRunTask+0x2b4>)
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f8f5 	bl	8000dd0 <__aeabi_fmul>
 8001be6:	4603      	mov	r3, r0
 8001be8:	496b      	ldr	r1, [pc, #428]	@ (8001d98 <StartRunTask+0x2b8>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe ffe8 	bl	8000bc0 <__addsf3>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fab2 	bl	800115c <__aeabi_f2iz>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			speedB = 70 + 10 * -heading_err;
 8001bfe:	4b5f      	ldr	r3, [pc, #380]	@ (8001d7c <StartRunTask+0x29c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001c06:	4963      	ldr	r1, [pc, #396]	@ (8001d94 <StartRunTask+0x2b4>)
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff f8e1 	bl	8000dd0 <__aeabi_fmul>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4961      	ldr	r1, [pc, #388]	@ (8001d98 <StartRunTask+0x2b8>)
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe ffd4 	bl	8000bc0 <__addsf3>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fa9e 	bl	800115c <__aeabi_f2iz>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

			if(mic_detected){				// Check sound pass threshold
 8001c26:	4b5d      	ldr	r3, [pc, #372]	@ (8001d9c <StartRunTask+0x2bc>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10e      	bne.n	8001c52 <StartRunTask+0x172>
 8001c34:	4b59      	ldr	r3, [pc, #356]	@ (8001d9c <StartRunTask+0x2bc>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d107      	bne.n	8001c52 <StartRunTask+0x172>
 8001c42:	4b56      	ldr	r3, [pc, #344]	@ (8001d9c <StartRunTask+0x2bc>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 8180 	beq.w	8001f52 <StartRunTask+0x472>
				Motor_Set(0, 0);
 8001c52:	2100      	movs	r1, #0
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff fe69 	bl	800192c <Motor_Set>
				curr_run_mode = SEARCH;
 8001c5a:	4b49      	ldr	r3, [pc, #292]	@ (8001d80 <StartRunTask+0x2a0>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
				timer_runtask = HAL_GetTick();
 8001c60:	f001 fe60 	bl	8003924 <HAL_GetTick>
 8001c64:	6378      	str	r0, [r7, #52]	@ 0x34
			}
			break;
 8001c66:	e174      	b.n	8001f52 <StartRunTask+0x472>
		case SEARCH:
			lcd_status = "SEARCH";
 8001c68:	4b47      	ldr	r3, [pc, #284]	@ (8001d88 <StartRunTask+0x2a8>)
 8001c6a:	4a4d      	ldr	r2, [pc, #308]	@ (8001da0 <StartRunTask+0x2c0>)
 8001c6c:	601a      	str	r2, [r3, #0]
			speedA = 0.0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			speedB = 0.0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
			if(mic_read_001)				// Check sound source direction
 8001c7a:	4b48      	ldr	r3, [pc, #288]	@ (8001d9c <StartRunTask+0x2bc>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d111      	bne.n	8001cac <StartRunTask+0x1cc>
 8001c88:	4b44      	ldr	r3, [pc, #272]	@ (8001d9c <StartRunTask+0x2bc>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10a      	bne.n	8001cac <StartRunTask+0x1cc>
 8001c96:	4b41      	ldr	r3, [pc, #260]	@ (8001d9c <StartRunTask+0x2bc>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <StartRunTask+0x1cc>
			{
				target_heading = -42.0f;	// 42 IMU val = 180 degree real-world value
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8001d90 <StartRunTask+0x2b0>)
 8001ca6:	4a3f      	ldr	r2, [pc, #252]	@ (8001da4 <StartRunTask+0x2c4>)
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	e09b      	b.n	8001de4 <StartRunTask+0x304>
			}else if(mic_read_010)
 8001cac:	4b3b      	ldr	r3, [pc, #236]	@ (8001d9c <StartRunTask+0x2bc>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d111      	bne.n	8001cde <StartRunTask+0x1fe>
 8001cba:	4b38      	ldr	r3, [pc, #224]	@ (8001d9c <StartRunTask+0x2bc>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00a      	beq.n	8001cde <StartRunTask+0x1fe>
 8001cc8:	4b34      	ldr	r3, [pc, #208]	@ (8001d9c <StartRunTask+0x2bc>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d103      	bne.n	8001cde <StartRunTask+0x1fe>
			{
				target_heading = -28.0f;
 8001cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d90 <StartRunTask+0x2b0>)
 8001cd8:	4a33      	ldr	r2, [pc, #204]	@ (8001da8 <StartRunTask+0x2c8>)
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e082      	b.n	8001de4 <StartRunTask+0x304>
			}else if(mic_read_011)
 8001cde:	4b2f      	ldr	r3, [pc, #188]	@ (8001d9c <StartRunTask+0x2bc>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d111      	bne.n	8001d10 <StartRunTask+0x230>
 8001cec:	4b2b      	ldr	r3, [pc, #172]	@ (8001d9c <StartRunTask+0x2bc>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00a      	beq.n	8001d10 <StartRunTask+0x230>
 8001cfa:	4b28      	ldr	r3, [pc, #160]	@ (8001d9c <StartRunTask+0x2bc>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <StartRunTask+0x230>
			{
				target_heading = -14.0f;
 8001d08:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <StartRunTask+0x2b0>)
 8001d0a:	4a28      	ldr	r2, [pc, #160]	@ (8001dac <StartRunTask+0x2cc>)
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	e069      	b.n	8001de4 <StartRunTask+0x304>
			}else if(mic_read_100)
 8001d10:	4b22      	ldr	r3, [pc, #136]	@ (8001d9c <StartRunTask+0x2bc>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d012      	beq.n	8001d44 <StartRunTask+0x264>
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d9c <StartRunTask+0x2bc>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10b      	bne.n	8001d44 <StartRunTask+0x264>
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <StartRunTask+0x2bc>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d104      	bne.n	8001d44 <StartRunTask+0x264>
			{
				target_heading = 0.0f;
 8001d3a:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <StartRunTask+0x2b0>)
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e04f      	b.n	8001de4 <StartRunTask+0x304>
			}else if(mic_read_101)
 8001d44:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <StartRunTask+0x2bc>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d030      	beq.n	8001db4 <StartRunTask+0x2d4>
 8001d52:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <StartRunTask+0x2bc>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d129      	bne.n	8001db4 <StartRunTask+0x2d4>
 8001d60:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <StartRunTask+0x2bc>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d022      	beq.n	8001db4 <StartRunTask+0x2d4>
			{
				target_heading = 14.0f;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <StartRunTask+0x2b0>)
 8001d70:	4a0f      	ldr	r2, [pc, #60]	@ (8001db0 <StartRunTask+0x2d0>)
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	e036      	b.n	8001de4 <StartRunTask+0x304>
 8001d76:	bf00      	nop
 8001d78:	40010800 	.word	0x40010800
 8001d7c:	20000460 	.word	0x20000460
 8001d80:	20000468 	.word	0x20000468
 8001d84:	20000469 	.word	0x20000469
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	0801002c 	.word	0x0801002c
 8001d90:	2000045c 	.word	0x2000045c
 8001d94:	41200000 	.word	0x41200000
 8001d98:	428c0000 	.word	0x428c0000
 8001d9c:	20000508 	.word	0x20000508
 8001da0:	08010034 	.word	0x08010034
 8001da4:	c2280000 	.word	0xc2280000
 8001da8:	c1e00000 	.word	0xc1e00000
 8001dac:	c1600000 	.word	0xc1600000
 8001db0:	41600000 	.word	0x41600000
			}else if(mic_read_110)
 8001db4:	4ba0      	ldr	r3, [pc, #640]	@ (8002038 <StartRunTask+0x558>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d010      	beq.n	8001de4 <StartRunTask+0x304>
 8001dc2:	4b9d      	ldr	r3, [pc, #628]	@ (8002038 <StartRunTask+0x558>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d009      	beq.n	8001de4 <StartRunTask+0x304>
 8001dd0:	4b99      	ldr	r3, [pc, #612]	@ (8002038 <StartRunTask+0x558>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <StartRunTask+0x304>
			{
				target_heading = 28.0f;
 8001dde:	4b97      	ldr	r3, [pc, #604]	@ (800203c <StartRunTask+0x55c>)
 8001de0:	4a97      	ldr	r2, [pc, #604]	@ (8002040 <StartRunTask+0x560>)
 8001de2:	601a      	str	r2, [r3, #0]
			}
			if(ai_mod.cam_pin1 == 1)		// Check if human detected
 8001de4:	4b94      	ldr	r3, [pc, #592]	@ (8002038 <StartRunTask+0x558>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d006      	beq.n	8001e00 <StartRunTask+0x320>
			{
				target_heading = 0.0f;
 8001df2:	4b92      	ldr	r3, [pc, #584]	@ (800203c <StartRunTask+0x55c>)
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
				curr_run_mode = MAIN;
 8001dfa:	4b92      	ldr	r3, [pc, #584]	@ (8002044 <StartRunTask+0x564>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
			}
			dt_runtask = (double)(HAL_GetTick() - timer_runtask) / 1000;
 8001e00:	f001 fd90 	bl	8003924 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fb30 	bl	8000470 <__aeabi_ui2d>
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	4b8c      	ldr	r3, [pc, #560]	@ (8002048 <StartRunTask+0x568>)
 8001e16:	f7fe fccf 	bl	80007b8 <__aeabi_ddiv>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			if(dt_runtask > 8){			// Check if function reach timeout
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	4b89      	ldr	r3, [pc, #548]	@ (800204c <StartRunTask+0x56c>)
 8001e28:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001e2c:	f7fe fe2a 	bl	8000a84 <__aeabi_dcmpgt>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d100      	bne.n	8001e38 <StartRunTask+0x358>
				curr_run_mode = MAIN;
				speedA = 0.0;
				speedB = 0.0;
			}
			break;
 8001e36:	e08d      	b.n	8001f54 <StartRunTask+0x474>
				curr_run_mode = MAIN;
 8001e38:	4b82      	ldr	r3, [pc, #520]	@ (8002044 <StartRunTask+0x564>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
				speedA = 0.0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				speedB = 0.0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
			break;
 8001e4a:	e083      	b.n	8001f54 <StartRunTask+0x474>
		case ROTATE:
			lcd_status = "ROTATE";
 8001e4c:	4b80      	ldr	r3, [pc, #512]	@ (8002050 <StartRunTask+0x570>)
 8001e4e:	4a81      	ldr	r2, [pc, #516]	@ (8002054 <StartRunTask+0x574>)
 8001e50:	601a      	str	r2, [r3, #0]
			timer_runtask = HAL_GetTick();
 8001e52:	f001 fd67 	bl	8003924 <HAL_GetTick>
 8001e56:	6378      	str	r0, [r7, #52]	@ 0x34

			if(heading_err > 5)
 8001e58:	4b7f      	ldr	r3, [pc, #508]	@ (8002058 <StartRunTask+0x578>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	497f      	ldr	r1, [pc, #508]	@ (800205c <StartRunTask+0x57c>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f972 	bl	8001148 <__aeabi_fcmpgt>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d006      	beq.n	8001e78 <StartRunTask+0x398>
			{
				speedA = 100;
 8001e6a:	2364      	movs	r3, #100	@ 0x64
 8001e6c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				speedB = -100;
 8001e70:	239c      	movs	r3, #156	@ 0x9c
 8001e72:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001e76:	e029      	b.n	8001ecc <StartRunTask+0x3ec>
			}
			else if(heading_err < -5)
 8001e78:	4b77      	ldr	r3, [pc, #476]	@ (8002058 <StartRunTask+0x578>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4978      	ldr	r1, [pc, #480]	@ (8002060 <StartRunTask+0x580>)
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f944 	bl	800110c <__aeabi_fcmplt>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d006      	beq.n	8001e98 <StartRunTask+0x3b8>
			{
				speedA = -100;
 8001e8a:	239c      	movs	r3, #156	@ 0x9c
 8001e8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				speedB = 100;
 8001e90:	2364      	movs	r3, #100	@ 0x64
 8001e92:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001e96:	e019      	b.n	8001ecc <StartRunTask+0x3ec>
			}
			else
			{
				speedA = heading_err * 20;
 8001e98:	4b6f      	ldr	r3, [pc, #444]	@ (8002058 <StartRunTask+0x578>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4971      	ldr	r1, [pc, #452]	@ (8002064 <StartRunTask+0x584>)
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe ff96 	bl	8000dd0 <__aeabi_fmul>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff f958 	bl	800115c <__aeabi_f2iz>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				speedB = heading_err * -20;
 8001eb2:	4b69      	ldr	r3, [pc, #420]	@ (8002058 <StartRunTask+0x578>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	496c      	ldr	r1, [pc, #432]	@ (8002068 <StartRunTask+0x588>)
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe ff89 	bl	8000dd0 <__aeabi_fmul>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f94b 	bl	800115c <__aeabi_f2iz>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
			}

			if(speedA != 0 && speedB != 0){
 8001ecc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d023      	beq.n	8001f1c <StartRunTask+0x43c>
 8001ed4:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d01f      	beq.n	8001f1c <StartRunTask+0x43c>
				if(imu_reset_counter > 5){
 8001edc:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8001ee0:	2b05      	cmp	r3, #5
 8001ee2:	dd05      	ble.n	8001ef0 <StartRunTask+0x410>
					MX_I2C1_Init();
 8001ee4:	f7ff fad6 	bl	8001494 <MX_I2C1_Init>
					imu_reset_counter = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001eee:	e015      	b.n	8001f1c <StartRunTask+0x43c>
				}
				else
				{
					if(prev_heading_err != heading_err){
 8001ef0:	4b5e      	ldr	r3, [pc, #376]	@ (800206c <StartRunTask+0x58c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a58      	ldr	r2, [pc, #352]	@ (8002058 <StartRunTask+0x578>)
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff f8fc 	bl	80010f8 <__aeabi_fcmpeq>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d103      	bne.n	8001f0e <StartRunTask+0x42e>
						imu_reset_counter = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001f0c:	e006      	b.n	8001f1c <StartRunTask+0x43c>
					}else{
						imu_reset_counter++;
 8001f0e:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	3301      	adds	r3, #1
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
					}

				}
			}
			prev_heading_err = heading_err;
 8001f1c:	4b4e      	ldr	r3, [pc, #312]	@ (8002058 <StartRunTask+0x578>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a52      	ldr	r2, [pc, #328]	@ (800206c <StartRunTask+0x58c>)
 8001f22:	6013      	str	r3, [r2, #0]
			break;
 8001f24:	e016      	b.n	8001f54 <StartRunTask+0x474>
		case RETURN:
			lcd_status = "RETURN";
 8001f26:	4b4a      	ldr	r3, [pc, #296]	@ (8002050 <StartRunTask+0x570>)
 8001f28:	4a51      	ldr	r2, [pc, #324]	@ (8002070 <StartRunTask+0x590>)
 8001f2a:	601a      	str	r2, [r3, #0]
			target_heading = 42.0f;
 8001f2c:	4b43      	ldr	r3, [pc, #268]	@ (800203c <StartRunTask+0x55c>)
 8001f2e:	4a51      	ldr	r2, [pc, #324]	@ (8002074 <StartRunTask+0x594>)
 8001f30:	601a      	str	r2, [r3, #0]
			break;
 8001f32:	e00f      	b.n	8001f54 <StartRunTask+0x474>
		case FINISH:
			speedA = 0.0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			speedB = 0.0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
			vTaskResume(standbyTaskHandle);
 8001f40:	4b4d      	ldr	r3, [pc, #308]	@ (8002078 <StartRunTask+0x598>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f007 fba3 	bl	8009690 <vTaskResume>
			vTaskSuspend(NULL);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f007 fae4 	bl	8009518 <vTaskSuspend>
			break;
 8001f50:	e000      	b.n	8001f54 <StartRunTask+0x474>
			break;
 8001f52:	bf00      	nop
	}

	Motor_Set(speedA, speedB);
 8001f54:	f997 2046 	ldrsb.w	r2, [r7, #70]	@ 0x46
 8001f58:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fce4 	bl	800192c <Motor_Set>

	if(checkStartButton)
 8001f64:	2102      	movs	r1, #2
 8001f66:	4845      	ldr	r0, [pc, #276]	@ (800207c <StartRunTask+0x59c>)
 8001f68:	f002 fbc6 	bl	80046f8 <HAL_GPIO_ReadPin>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d009      	beq.n	8001f86 <StartRunTask+0x4a6>
 8001f72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f76:	4841      	ldr	r0, [pc, #260]	@ (800207c <StartRunTask+0x59c>)
 8001f78:	f002 fbbe 	bl	80046f8 <HAL_GPIO_ReadPin>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <StartRunTask+0x4a6>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <StartRunTask+0x4a8>
 8001f86:	2300      	movs	r3, #0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d121      	bne.n	8001fd0 <StartRunTask+0x4f0>
	{
		while(checkStartButton);
 8001f8c:	bf00      	nop
 8001f8e:	2102      	movs	r1, #2
 8001f90:	483a      	ldr	r0, [pc, #232]	@ (800207c <StartRunTask+0x59c>)
 8001f92:	f002 fbb1 	bl	80046f8 <HAL_GPIO_ReadPin>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d009      	beq.n	8001fb0 <StartRunTask+0x4d0>
 8001f9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fa0:	4836      	ldr	r0, [pc, #216]	@ (800207c <StartRunTask+0x59c>)
 8001fa2:	f002 fba9 	bl	80046f8 <HAL_GPIO_ReadPin>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <StartRunTask+0x4d0>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <StartRunTask+0x4d2>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0eb      	beq.n	8001f8e <StartRunTask+0x4ae>
		vTaskSuspend(sensorTaskHandle);
 8001fb6:	4b32      	ldr	r3, [pc, #200]	@ (8002080 <StartRunTask+0x5a0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f007 faac 	bl	8009518 <vTaskSuspend>
		vTaskResume(standbyTaskHandle);
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002078 <StartRunTask+0x598>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f007 fb63 	bl	8009690 <vTaskResume>
		vTaskSuspend(NULL);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f007 faa4 	bl	8009518 <vTaskSuspend>
	}

	snprintf(sv_runtask_msg, sizeof(sv_runtask_msg), "dt: %2f | MOD: %1.d | H_Err: %2.2f", dt_runtask, curr_run_mode + 1, heading_err);
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002044 <StartRunTask+0x564>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	1c5c      	adds	r4, r3, #1
 8001fd6:	4b20      	ldr	r3, [pc, #128]	@ (8002058 <StartRunTask+0x578>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fa6a 	bl	80004b4 <__aeabi_f2d>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	f107 000c 	add.w	r0, r7, #12
 8001fe8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001fec:	9402      	str	r4, [sp, #8]
 8001fee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ff2:	e9cd 2300 	strd	r2, r3, [sp]
 8001ff6:	4a23      	ldr	r2, [pc, #140]	@ (8002084 <StartRunTask+0x5a4>)
 8001ff8:	2128      	movs	r1, #40	@ 0x28
 8001ffa:	f00b ff0b 	bl	800de14 <sniprintf>
	SEGGER_SYSVIEW_PrintfTarget(sv_runtask_msg);
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	4618      	mov	r0, r3
 8002004:	f00b f8b0 	bl	800d168 <SEGGER_SYSVIEW_PrintfTarget>

	snprintf(sv_runtask_msg, sizeof(sv_runtask_msg), "SPA: %3.1d | SPB: %3.1d | res_c: %3.0d", speedA, speedB, imu_reset_counter);
 8002008:	f997 1047 	ldrsb.w	r1, [r7, #71]	@ 0x47
 800200c:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 8002010:	f997 2045 	ldrsb.w	r2, [r7, #69]	@ 0x45
 8002014:	f107 000c 	add.w	r0, r7, #12
 8002018:	9201      	str	r2, [sp, #4]
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	460b      	mov	r3, r1
 800201e:	4a1a      	ldr	r2, [pc, #104]	@ (8002088 <StartRunTask+0x5a8>)
 8002020:	2128      	movs	r1, #40	@ 0x28
 8002022:	f00b fef7 	bl	800de14 <sniprintf>
	SEGGER_SYSVIEW_PrintfTarget(sv_runtask_msg);
 8002026:	f107 030c 	add.w	r3, r7, #12
 800202a:	4618      	mov	r0, r3
 800202c:	f00b f89c 	bl	800d168 <SEGGER_SYSVIEW_PrintfTarget>

    osDelay(80);
 8002030:	2050      	movs	r0, #80	@ 0x50
 8002032:	f006 f9e1 	bl	80083f8 <osDelay>
	setOnBoardLED;
 8002036:	e569      	b.n	8001b0c <StartRunTask+0x2c>
 8002038:	20000508 	.word	0x20000508
 800203c:	2000045c 	.word	0x2000045c
 8002040:	41e00000 	.word	0x41e00000
 8002044:	20000468 	.word	0x20000468
 8002048:	408f4000 	.word	0x408f4000
 800204c:	40200000 	.word	0x40200000
 8002050:	20000000 	.word	0x20000000
 8002054:	0801003c 	.word	0x0801003c
 8002058:	20000460 	.word	0x20000460
 800205c:	40a00000 	.word	0x40a00000
 8002060:	c0a00000 	.word	0xc0a00000
 8002064:	41a00000 	.word	0x41a00000
 8002068:	c1a00000 	.word	0xc1a00000
 800206c:	20000464 	.word	0x20000464
 8002070:	08010044 	.word	0x08010044
 8002074:	42280000 	.word	0x42280000
 8002078:	20000418 	.word	0x20000418
 800207c:	40011000 	.word	0x40011000
 8002080:	20000420 	.word	0x20000420
 8002084:	0801004c 	.word	0x0801004c
 8002088:	08010070 	.word	0x08010070

0800208c <StartStandbyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStandbyTask */
void StartStandbyTask(void *argument)
{
 800208c:	b5b0      	push	{r4, r5, r7, lr}
 800208e:	b092      	sub	sp, #72	@ 0x48
 8002090:	af04      	add	r7, sp, #16
 8002092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStandbyTask */
  char sv_standbytask_msg[40];
  char sv_standbytask_msg_len = sizeof(sv_standbytask_msg);
 8002094:	2328      	movs	r3, #40	@ 0x28
 8002096:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  bool LD4_toggle = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, LD4_toggle);
 80020a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80020a4:	461a      	mov	r2, r3
 80020a6:	2120      	movs	r1, #32
 80020a8:	4867      	ldr	r0, [pc, #412]	@ (8002248 <StartStandbyTask+0x1bc>)
 80020aa:	f002 fb3c 	bl	8004726 <HAL_GPIO_WritePin>
	LD4_toggle = !LD4_toggle;
 80020ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bf14      	ite	ne
 80020b6:	2301      	movne	r3, #1
 80020b8:	2300      	moveq	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f083 0301 	eor.w	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80020c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	// Stop motors
	Motor_Set(0, 0);
 80020d2:	2100      	movs	r1, #0
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7ff fc29 	bl	800192c <Motor_Set>

	// Show status
	lcd_status = "IDLE";
 80020da:	4b5c      	ldr	r3, [pc, #368]	@ (800224c <StartStandbyTask+0x1c0>)
 80020dc:	4a5c      	ldr	r2, [pc, #368]	@ (8002250 <StartStandbyTask+0x1c4>)
 80020de:	601a      	str	r2, [r3, #0]
	MPU6050.HeadingZ = 0;
 80020e0:	495c      	ldr	r1, [pc, #368]	@ (8002254 <StartStandbyTask+0x1c8>)
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	target_heading = 0.0f;
 80020ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002258 <StartStandbyTask+0x1cc>)
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
	heading_err = 0.0f;
 80020f6:	4b59      	ldr	r3, [pc, #356]	@ (800225c <StartStandbyTask+0x1d0>)
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
	curr_run_mode = MAIN;
 80020fe:	4b58      	ldr	r3, [pc, #352]	@ (8002260 <StartStandbyTask+0x1d4>)
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
	prev_run_mode = MAIN;
 8002104:	4b57      	ldr	r3, [pc, #348]	@ (8002264 <StartStandbyTask+0x1d8>)
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]

	if(checkStartButton)
 800210a:	2102      	movs	r1, #2
 800210c:	4856      	ldr	r0, [pc, #344]	@ (8002268 <StartStandbyTask+0x1dc>)
 800210e:	f002 faf3 	bl	80046f8 <HAL_GPIO_ReadPin>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d009      	beq.n	800212c <StartStandbyTask+0xa0>
 8002118:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800211c:	4852      	ldr	r0, [pc, #328]	@ (8002268 <StartStandbyTask+0x1dc>)
 800211e:	f002 faeb 	bl	80046f8 <HAL_GPIO_ReadPin>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <StartStandbyTask+0xa0>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <StartStandbyTask+0xa2>
 800212c:	2300      	movs	r3, #0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d128      	bne.n	8002184 <StartStandbyTask+0xf8>
	{
		while(checkStartButton);
 8002132:	bf00      	nop
 8002134:	2102      	movs	r1, #2
 8002136:	484c      	ldr	r0, [pc, #304]	@ (8002268 <StartStandbyTask+0x1dc>)
 8002138:	f002 fade 	bl	80046f8 <HAL_GPIO_ReadPin>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <StartStandbyTask+0xca>
 8002142:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002146:	4848      	ldr	r0, [pc, #288]	@ (8002268 <StartStandbyTask+0x1dc>)
 8002148:	f002 fad6 	bl	80046f8 <HAL_GPIO_ReadPin>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <StartStandbyTask+0xca>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <StartStandbyTask+0xcc>
 8002156:	2300      	movs	r3, #0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0eb      	beq.n	8002134 <StartStandbyTask+0xa8>
		// Reset IMU
		MPU6050.HeadingZ = 0;
 800215c:	493d      	ldr	r1, [pc, #244]	@ (8002254 <StartStandbyTask+0x1c8>)
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		vTaskResume(runTaskHandle);
 800216a:	4b40      	ldr	r3, [pc, #256]	@ (800226c <StartStandbyTask+0x1e0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f007 fa8e 	bl	8009690 <vTaskResume>
		vTaskResume(sensorTaskHandle);
 8002174:	4b3e      	ldr	r3, [pc, #248]	@ (8002270 <StartStandbyTask+0x1e4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f007 fa89 	bl	8009690 <vTaskResume>
		vTaskSuspend(NULL);
 800217e:	2000      	movs	r0, #0
 8002180:	f007 f9ca 	bl	8009518 <vTaskSuspend>
	}

	if(checkHomeButton)
 8002184:	2101      	movs	r1, #1
 8002186:	4838      	ldr	r0, [pc, #224]	@ (8002268 <StartStandbyTask+0x1dc>)
 8002188:	f002 fab6 	bl	80046f8 <HAL_GPIO_ReadPin>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d125      	bne.n	80021de <StartStandbyTask+0x152>
	{
		home_lat = latitude;
 8002192:	4b38      	ldr	r3, [pc, #224]	@ (8002274 <StartStandbyTask+0x1e8>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	4937      	ldr	r1, [pc, #220]	@ (8002278 <StartStandbyTask+0x1ec>)
 800219a:	e9c1 2300 	strd	r2, r3, [r1]
		home_long = longitude;
 800219e:	4b37      	ldr	r3, [pc, #220]	@ (800227c <StartStandbyTask+0x1f0>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	4936      	ldr	r1, [pc, #216]	@ (8002280 <StartStandbyTask+0x1f4>)
 80021a6:	e9c1 2300 	strd	r2, r3, [r1]
		targ_lat = home_lat + 100;
 80021aa:	4b33      	ldr	r3, [pc, #204]	@ (8002278 <StartStandbyTask+0x1ec>)
 80021ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	4b33      	ldr	r3, [pc, #204]	@ (8002284 <StartStandbyTask+0x1f8>)
 80021b6:	f7fe f81f 	bl	80001f8 <__adddf3>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4932      	ldr	r1, [pc, #200]	@ (8002288 <StartStandbyTask+0x1fc>)
 80021c0:	e9c1 2300 	strd	r2, r3, [r1]
		targ_long = home_long + 100;
 80021c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002280 <StartStandbyTask+0x1f4>)
 80021c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002284 <StartStandbyTask+0x1f8>)
 80021d0:	f7fe f812 	bl	80001f8 <__adddf3>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	492c      	ldr	r1, [pc, #176]	@ (800228c <StartStandbyTask+0x200>)
 80021da:	e9c1 2300 	strd	r2, r3, [r1]
	}

	snprintf(sv_standbytask_msg, sv_standbytask_msg_len, "Home: %f, %f", home_lat, home_long);
 80021de:	f897 5036 	ldrb.w	r5, [r7, #54]	@ 0x36
 80021e2:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <StartStandbyTask+0x1ec>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	4925      	ldr	r1, [pc, #148]	@ (8002280 <StartStandbyTask+0x1f4>)
 80021ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021ee:	f107 040c 	add.w	r4, r7, #12
 80021f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80021f6:	e9cd 2300 	strd	r2, r3, [sp]
 80021fa:	4a25      	ldr	r2, [pc, #148]	@ (8002290 <StartStandbyTask+0x204>)
 80021fc:	4629      	mov	r1, r5
 80021fe:	4620      	mov	r0, r4
 8002200:	f00b fe08 	bl	800de14 <sniprintf>
	SEGGER_SYSVIEW_PrintfTarget(sv_standbytask_msg);
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	4618      	mov	r0, r3
 800220a:	f00a ffad 	bl	800d168 <SEGGER_SYSVIEW_PrintfTarget>
	snprintf(sv_standbytask_msg, sv_standbytask_msg_len, "Targ: %f, %f", targ_lat, targ_long);
 800220e:	f897 5036 	ldrb.w	r5, [r7, #54]	@ 0x36
 8002212:	4b1d      	ldr	r3, [pc, #116]	@ (8002288 <StartStandbyTask+0x1fc>)
 8002214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002218:	491c      	ldr	r1, [pc, #112]	@ (800228c <StartStandbyTask+0x200>)
 800221a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800221e:	f107 040c 	add.w	r4, r7, #12
 8002222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002226:	e9cd 2300 	strd	r2, r3, [sp]
 800222a:	4a1a      	ldr	r2, [pc, #104]	@ (8002294 <StartStandbyTask+0x208>)
 800222c:	4629      	mov	r1, r5
 800222e:	4620      	mov	r0, r4
 8002230:	f00b fdf0 	bl	800de14 <sniprintf>
	SEGGER_SYSVIEW_PrintfTarget(sv_standbytask_msg);
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	4618      	mov	r0, r3
 800223a:	f00a ff95 	bl	800d168 <SEGGER_SYSVIEW_PrintfTarget>

	osDelay(200);
 800223e:	20c8      	movs	r0, #200	@ 0xc8
 8002240:	f006 f8da 	bl	80083f8 <osDelay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, LD4_toggle);
 8002244:	e72c      	b.n	80020a0 <StartStandbyTask+0x14>
 8002246:	bf00      	nop
 8002248:	40010800 	.word	0x40010800
 800224c:	20000000 	.word	0x20000000
 8002250:	08010024 	.word	0x08010024
 8002254:	200004a0 	.word	0x200004a0
 8002258:	2000045c 	.word	0x2000045c
 800225c:	20000460 	.word	0x20000460
 8002260:	20000468 	.word	0x20000468
 8002264:	20000469 	.word	0x20000469
 8002268:	40011000 	.word	0x40011000
 800226c:	20000414 	.word	0x20000414
 8002270:	20000420 	.word	0x20000420
 8002274:	20000428 	.word	0x20000428
 8002278:	20000438 	.word	0x20000438
 800227c:	20000430 	.word	0x20000430
 8002280:	20000440 	.word	0x20000440
 8002284:	40590000 	.word	0x40590000
 8002288:	20000448 	.word	0x20000448
 800228c:	20000450 	.word	0x20000450
 8002290:	08010098 	.word	0x08010098
 8002294:	080100a8 	.word	0x080100a8

08002298 <StartCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommTask */
void StartCommTask(void *argument)
{
 8002298:	b5b0      	push	{r4, r5, r7, lr}
 800229a:	b092      	sub	sp, #72	@ 0x48
 800229c:	af02      	add	r7, sp, #8
 800229e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommTask */
  LoRa_reset(&myLoRa);
 80022a0:	482b      	ldr	r0, [pc, #172]	@ (8002350 <StartCommTask+0xb8>)
 80022a2:	f000 fffc 	bl	800329e <LoRa_reset>
  LoRa_init(&myLoRa);
 80022a6:	482a      	ldr	r0, [pc, #168]	@ (8002350 <StartCommTask+0xb8>)
 80022a8:	f001 fa6c 	bl	8003784 <LoRa_init>
  LoRa_startReceiving(&myLoRa);
 80022ac:	4828      	ldr	r0, [pc, #160]	@ (8002350 <StartCommTask+0xb8>)
 80022ae:	f001 fa5d 	bl	800376c <LoRa_startReceiving>
  char sv_commtask_msg[50];
  char sv_commtask_msg_len = sizeof(sv_commtask_msg);
 80022b2:	2332      	movs	r3, #50	@ 0x32
 80022b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
//  char lcd_buffer_len = sizeof(lcd_buffer);
  /* Infinite loop */
  for(;;)
  {
	// Battery Voltage
	battery_val = read_adc_value() * 1.15 / 4096.0 * 16.5;
 80022b8:	f7ff fbf4 	bl	8001aa4 <read_adc_value>
 80022bc:	4603      	mov	r3, r0
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe f8e6 	bl	8000490 <__aeabi_i2d>
 80022c4:	a320      	add	r3, pc, #128	@ (adr r3, 8002348 <StartCommTask+0xb0>)
 80022c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ca:	f7fe f94b 	bl	8000564 <__aeabi_dmul>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	4b1e      	ldr	r3, [pc, #120]	@ (8002354 <StartCommTask+0xbc>)
 80022dc:	f7fe fa6c 	bl	80007b8 <__aeabi_ddiv>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002358 <StartCommTask+0xc0>)
 80022ee:	f7fe f939 	bl	8000564 <__aeabi_dmul>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	f7fe fc0b 	bl	8000b14 <__aeabi_d2f>
 80022fe:	4603      	mov	r3, r0
 8002300:	4a16      	ldr	r2, [pc, #88]	@ (800235c <StartCommTask+0xc4>)
 8002302:	6013      	str	r3, [r2, #0]
//    HD44780_PrintStr(lcd_buffer);
//    snprintf(lcd_buffer, lcd_buffer_len, "B:%2.1f H:%2.0f", battery_val, heading_err);
//    HD44780_SetCursor(0,1);
//    HD44780_PrintStr(lcd_buffer);

	snprintf(sv_commtask_msg, sv_commtask_msg_len, "MODE: %s\n | BATT: %2.2f\n", lcd_status, battery_val);
 8002304:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 8002308:	4b15      	ldr	r3, [pc, #84]	@ (8002360 <StartCommTask+0xc8>)
 800230a:	681d      	ldr	r5, [r3, #0]
 800230c:	4b13      	ldr	r3, [pc, #76]	@ (800235c <StartCommTask+0xc4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe f8cf 	bl	80004b4 <__aeabi_f2d>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	f107 000c 	add.w	r0, r7, #12
 800231e:	e9cd 2300 	strd	r2, r3, [sp]
 8002322:	462b      	mov	r3, r5
 8002324:	4a0f      	ldr	r2, [pc, #60]	@ (8002364 <StartCommTask+0xcc>)
 8002326:	4621      	mov	r1, r4
 8002328:	f00b fd74 	bl	800de14 <sniprintf>
	SEGGER_SYSVIEW_PrintfTarget(sv_commtask_msg);
 800232c:	f107 030c 	add.w	r3, r7, #12
 8002330:	4618      	mov	r0, r3
 8002332:	f00a ff19 	bl	800d168 <SEGGER_SYSVIEW_PrintfTarget>
//	LoRa_receive(&myLoRa, read_data, 100);
//
//	snprintf(sv_commtask_msg, sv_commtask_msg_len, "RxLORA: %s", (char*)read_data);
//	SEGGER_SYSVIEW_PrintfTarget(sv_commtask_msg);

    osDelay(500);
 8002336:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800233a:	f006 f85d 	bl	80083f8 <osDelay>
	battery_val = read_adc_value() * 1.15 / 4096.0 * 16.5;
 800233e:	bf00      	nop
 8002340:	e7ba      	b.n	80022b8 <StartCommTask+0x20>
 8002342:	bf00      	nop
 8002344:	f3af 8000 	nop.w
 8002348:	66666666 	.word	0x66666666
 800234c:	3ff26666 	.word	0x3ff26666
 8002350:	20000470 	.word	0x20000470
 8002354:	40b00000 	.word	0x40b00000
 8002358:	40308000 	.word	0x40308000
 800235c:	2000046c 	.word	0x2000046c
 8002360:	20000000 	.word	0x20000000
 8002364:	080100b8 	.word	0x080100b8

08002368 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void *argument)
{
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	b094      	sub	sp, #80	@ 0x50
 800236c:	af04      	add	r7, sp, #16
 800236e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorTask */
  char sv_sensortask_msg[50];
  char sv_sensortask_msg_len = sizeof(sv_sensortask_msg);
 8002370:	2332      	movs	r3, #50	@ 0x32
 8002372:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  GPS_Init();
 8002376:	f000 fc5b 	bl	8002c30 <GPS_Init>
  MPU6050_Init(&hi2c1);
 800237a:	484c      	ldr	r0, [pc, #304]	@ (80024ac <StartSensorTask+0x144>)
 800237c:	f000 fc6a 	bl	8002c54 <MPU6050_Init>
  vTaskSuspend(NULL); // Suspend the task
 8002380:	2000      	movs	r0, #0
 8002382:	f007 f8c9 	bl	8009518 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	// Read IMU (I2C)
	MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 8002386:	494a      	ldr	r1, [pc, #296]	@ (80024b0 <StartSensorTask+0x148>)
 8002388:	4848      	ldr	r0, [pc, #288]	@ (80024ac <StartSensorTask+0x144>)
 800238a:	f000 fcbd 	bl	8002d08 <MPU6050_Read_Gyro>

	curr_heading = MPU6050.HeadingZ;
 800238e:	4b48      	ldr	r3, [pc, #288]	@ (80024b0 <StartSensorTask+0x148>)
 8002390:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	f7fe fbbc 	bl	8000b14 <__aeabi_d2f>
 800239c:	4603      	mov	r3, r0
 800239e:	4a45      	ldr	r2, [pc, #276]	@ (80024b4 <StartSensorTask+0x14c>)
 80023a0:	6013      	str	r3, [r2, #0]
	heading_err = curr_heading - target_heading;
 80023a2:	4b44      	ldr	r3, [pc, #272]	@ (80024b4 <StartSensorTask+0x14c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a44      	ldr	r2, [pc, #272]	@ (80024b8 <StartSensorTask+0x150>)
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fc05 	bl	8000bbc <__aeabi_fsub>
 80023b2:	4603      	mov	r3, r0
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b41      	ldr	r3, [pc, #260]	@ (80024bc <StartSensorTask+0x154>)
 80023b8:	601a      	str	r2, [r3, #0]
//	latitude = GPS_GetLatitude();
//	longitude = GPS_GetLongtitude();

	// Process received data here
//	snprintf(sv_sensortask_msg, sv_sensortask_msg_len, "LAT: %f | LONG: %f | IMU: %6.2f", latitude, longitude, curr_heading);
	snprintf(sv_sensortask_msg, sv_sensortask_msg_len, "IMU: %6.2f", curr_heading);
 80023ba:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 80023be:	4b3d      	ldr	r3, [pc, #244]	@ (80024b4 <StartSensorTask+0x14c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe f876 	bl	80004b4 <__aeabi_f2d>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	f107 000c 	add.w	r0, r7, #12
 80023d0:	e9cd 2300 	strd	r2, r3, [sp]
 80023d4:	4a3a      	ldr	r2, [pc, #232]	@ (80024c0 <StartSensorTask+0x158>)
 80023d6:	4621      	mov	r1, r4
 80023d8:	f00b fd1c 	bl	800de14 <sniprintf>
	SEGGER_SYSVIEW_PrintfTarget(sv_sensortask_msg);
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	4618      	mov	r0, r3
 80023e2:	f00a fec1 	bl	800d168 <SEGGER_SYSVIEW_PrintfTarget>

	// Read AI module
	ai_mod.cam_pin1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 80023e6:	2140      	movs	r1, #64	@ 0x40
 80023e8:	4836      	ldr	r0, [pc, #216]	@ (80024c4 <StartSensorTask+0x15c>)
 80023ea:	f002 f985 	bl	80046f8 <HAL_GPIO_ReadPin>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	b2d9      	uxtb	r1, r3
 80023f6:	4a34      	ldr	r2, [pc, #208]	@ (80024c8 <StartSensorTask+0x160>)
 80023f8:	7813      	ldrb	r3, [r2, #0]
 80023fa:	f361 03c3 	bfi	r3, r1, #3, #1
 80023fe:	7013      	strb	r3, [r2, #0]
	ai_mod.mic_pin1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8002400:	2180      	movs	r1, #128	@ 0x80
 8002402:	4830      	ldr	r0, [pc, #192]	@ (80024c4 <StartSensorTask+0x15c>)
 8002404:	f002 f978 	bl	80046f8 <HAL_GPIO_ReadPin>
 8002408:	4603      	mov	r3, r0
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	b2d9      	uxtb	r1, r3
 8002410:	4a2d      	ldr	r2, [pc, #180]	@ (80024c8 <StartSensorTask+0x160>)
 8002412:	7813      	ldrb	r3, [r2, #0]
 8002414:	f361 0300 	bfi	r3, r1, #0, #1
 8002418:	7013      	strb	r3, [r2, #0]
	ai_mod.mic_pin2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 800241a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800241e:	4829      	ldr	r0, [pc, #164]	@ (80024c4 <StartSensorTask+0x15c>)
 8002420:	f002 f96a 	bl	80046f8 <HAL_GPIO_ReadPin>
 8002424:	4603      	mov	r3, r0
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	b2d9      	uxtb	r1, r3
 800242c:	4a26      	ldr	r2, [pc, #152]	@ (80024c8 <StartSensorTask+0x160>)
 800242e:	7813      	ldrb	r3, [r2, #0]
 8002430:	f361 0341 	bfi	r3, r1, #1, #1
 8002434:	7013      	strb	r3, [r2, #0]
	ai_mod.mic_pin3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 8002436:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800243a:	4822      	ldr	r0, [pc, #136]	@ (80024c4 <StartSensorTask+0x15c>)
 800243c:	f002 f95c 	bl	80046f8 <HAL_GPIO_ReadPin>
 8002440:	4603      	mov	r3, r0
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	b2d9      	uxtb	r1, r3
 8002448:	4a1f      	ldr	r2, [pc, #124]	@ (80024c8 <StartSensorTask+0x160>)
 800244a:	7813      	ldrb	r3, [r2, #0]
 800244c:	f361 0382 	bfi	r3, r1, #2, #1
 8002450:	7013      	strb	r3, [r2, #0]

	snprintf(sv_sensortask_msg, sv_sensortask_msg_len, "C: %u | MC3: %u | MC2: %u | MC1: %u", ai_mod.cam_pin1, ai_mod.mic_pin3, ai_mod.mic_pin2, ai_mod.mic_pin1);
 8002452:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8002456:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <StartSensorTask+0x160>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800245e:	b2db      	uxtb	r3, r3
 8002460:	461d      	mov	r5, r3
 8002462:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <StartSensorTask+0x160>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <StartSensorTask+0x160>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461c      	mov	r4, r3
 800247a:	4b13      	ldr	r3, [pc, #76]	@ (80024c8 <StartSensorTask+0x160>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f107 000c 	add.w	r0, r7, #12
 8002488:	9302      	str	r3, [sp, #8]
 800248a:	9401      	str	r4, [sp, #4]
 800248c:	9200      	str	r2, [sp, #0]
 800248e:	462b      	mov	r3, r5
 8002490:	4a0e      	ldr	r2, [pc, #56]	@ (80024cc <StartSensorTask+0x164>)
 8002492:	f00b fcbf 	bl	800de14 <sniprintf>
	SEGGER_SYSVIEW_PrintfTarget(sv_sensortask_msg);
 8002496:	f107 030c 	add.w	r3, r7, #12
 800249a:	4618      	mov	r0, r3
 800249c:	f00a fe64 	bl	800d168 <SEGGER_SYSVIEW_PrintfTarget>

	osDelay(100);
 80024a0:	2064      	movs	r0, #100	@ 0x64
 80024a2:	f005 ffa9 	bl	80083f8 <osDelay>
	MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 80024a6:	bf00      	nop
 80024a8:	e76d      	b.n	8002386 <StartSensorTask+0x1e>
 80024aa:	bf00      	nop
 80024ac:	2000023c 	.word	0x2000023c
 80024b0:	200004a0 	.word	0x200004a0
 80024b4:	20000458 	.word	0x20000458
 80024b8:	2000045c 	.word	0x2000045c
 80024bc:	20000460 	.word	0x20000460
 80024c0:	080100d4 	.word	0x080100d4
 80024c4:	40011000 	.word	0x40011000
 80024c8:	20000508 	.word	0x20000508
 80024cc:	080100e0 	.word	0x080100e0

080024d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024e0:	d101      	bne.n	80024e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80024e2:	f001 fa0d 	bl	8003900 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f2:	b672      	cpsid	i
}
 80024f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024f6:	bf00      	nop
 80024f8:	e7fd      	b.n	80024f6 <Error_Handler+0x8>
	...

080024fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002502:	4b18      	ldr	r3, [pc, #96]	@ (8002564 <HAL_MspInit+0x68>)
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	4a17      	ldr	r2, [pc, #92]	@ (8002564 <HAL_MspInit+0x68>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6193      	str	r3, [r2, #24]
 800250e:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <HAL_MspInit+0x68>)
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	4b12      	ldr	r3, [pc, #72]	@ (8002564 <HAL_MspInit+0x68>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4a11      	ldr	r2, [pc, #68]	@ (8002564 <HAL_MspInit+0x68>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002524:	61d3      	str	r3, [r2, #28]
 8002526:	4b0f      	ldr	r3, [pc, #60]	@ (8002564 <HAL_MspInit+0x68>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002532:	2200      	movs	r2, #0
 8002534:	210f      	movs	r1, #15
 8002536:	f06f 0001 	mvn.w	r0, #1
 800253a:	f001 ff2e 	bl	800439a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800253e:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <HAL_MspInit+0x6c>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <HAL_MspInit+0x6c>)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	40010000 	.word	0x40010000

0800256c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <HAL_ADC_MspInit+0x6c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d121      	bne.n	80025d0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800258c:	4b13      	ldr	r3, [pc, #76]	@ (80025dc <HAL_ADC_MspInit+0x70>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	4a12      	ldr	r2, [pc, #72]	@ (80025dc <HAL_ADC_MspInit+0x70>)
 8002592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002596:	6193      	str	r3, [r2, #24]
 8002598:	4b10      	ldr	r3, [pc, #64]	@ (80025dc <HAL_ADC_MspInit+0x70>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a4:	4b0d      	ldr	r3, [pc, #52]	@ (80025dc <HAL_ADC_MspInit+0x70>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	4a0c      	ldr	r2, [pc, #48]	@ (80025dc <HAL_ADC_MspInit+0x70>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	6193      	str	r3, [r2, #24]
 80025b0:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <HAL_ADC_MspInit+0x70>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Bat_In_Pin;
 80025bc:	2301      	movs	r3, #1
 80025be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025c0:	2303      	movs	r3, #3
 80025c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Bat_In_GPIO_Port, &GPIO_InitStruct);
 80025c4:	f107 0310 	add.w	r3, r7, #16
 80025c8:	4619      	mov	r1, r3
 80025ca:	4805      	ldr	r0, [pc, #20]	@ (80025e0 <HAL_ADC_MspInit+0x74>)
 80025cc:	f001 ff10 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025d0:	bf00      	nop
 80025d2:	3720      	adds	r7, #32
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40012400 	.word	0x40012400
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40010800 	.word	0x40010800

080025e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08c      	sub	sp, #48	@ 0x30
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a32      	ldr	r2, [pc, #200]	@ (80026c8 <HAL_I2C_MspInit+0xe4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d133      	bne.n	800266c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002604:	4b31      	ldr	r3, [pc, #196]	@ (80026cc <HAL_I2C_MspInit+0xe8>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4a30      	ldr	r2, [pc, #192]	@ (80026cc <HAL_I2C_MspInit+0xe8>)
 800260a:	f043 0308 	orr.w	r3, r3, #8
 800260e:	6193      	str	r3, [r2, #24]
 8002610:	4b2e      	ldr	r3, [pc, #184]	@ (80026cc <HAL_I2C_MspInit+0xe8>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 800261c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002622:	2312      	movs	r3, #18
 8002624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002626:	2303      	movs	r3, #3
 8002628:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262a:	f107 031c 	add.w	r3, r7, #28
 800262e:	4619      	mov	r1, r3
 8002630:	4827      	ldr	r0, [pc, #156]	@ (80026d0 <HAL_I2C_MspInit+0xec>)
 8002632:	f001 fedd 	bl	80043f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002636:	4b27      	ldr	r3, [pc, #156]	@ (80026d4 <HAL_I2C_MspInit+0xf0>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800263c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800263e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800264c:	4a21      	ldr	r2, [pc, #132]	@ (80026d4 <HAL_I2C_MspInit+0xf0>)
 800264e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002650:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002652:	4b1e      	ldr	r3, [pc, #120]	@ (80026cc <HAL_I2C_MspInit+0xe8>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	4a1d      	ldr	r2, [pc, #116]	@ (80026cc <HAL_I2C_MspInit+0xe8>)
 8002658:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800265c:	61d3      	str	r3, [r2, #28]
 800265e:	4b1b      	ldr	r3, [pc, #108]	@ (80026cc <HAL_I2C_MspInit+0xe8>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800266a:	e029      	b.n	80026c0 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a19      	ldr	r2, [pc, #100]	@ (80026d8 <HAL_I2C_MspInit+0xf4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d124      	bne.n	80026c0 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002676:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <HAL_I2C_MspInit+0xe8>)
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	4a14      	ldr	r2, [pc, #80]	@ (80026cc <HAL_I2C_MspInit+0xe8>)
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	6193      	str	r3, [r2, #24]
 8002682:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <HAL_I2C_MspInit+0xe8>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800268e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002694:	2312      	movs	r3, #18
 8002696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269c:	f107 031c 	add.w	r3, r7, #28
 80026a0:	4619      	mov	r1, r3
 80026a2:	480b      	ldr	r0, [pc, #44]	@ (80026d0 <HAL_I2C_MspInit+0xec>)
 80026a4:	f001 fea4 	bl	80043f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026a8:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <HAL_I2C_MspInit+0xe8>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	4a07      	ldr	r2, [pc, #28]	@ (80026cc <HAL_I2C_MspInit+0xe8>)
 80026ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026b2:	61d3      	str	r3, [r2, #28]
 80026b4:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <HAL_I2C_MspInit+0xe8>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
}
 80026c0:	bf00      	nop
 80026c2:	3730      	adds	r7, #48	@ 0x30
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40005400 	.word	0x40005400
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40010c00 	.word	0x40010c00
 80026d4:	40010000 	.word	0x40010000
 80026d8:	40005800 	.word	0x40005800

080026dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0310 	add.w	r3, r7, #16
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002768 <HAL_SPI_MspInit+0x8c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d131      	bne.n	8002760 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026fc:	4b1b      	ldr	r3, [pc, #108]	@ (800276c <HAL_SPI_MspInit+0x90>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	4a1a      	ldr	r2, [pc, #104]	@ (800276c <HAL_SPI_MspInit+0x90>)
 8002702:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002706:	61d3      	str	r3, [r2, #28]
 8002708:	4b18      	ldr	r3, [pc, #96]	@ (800276c <HAL_SPI_MspInit+0x90>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002714:	4b15      	ldr	r3, [pc, #84]	@ (800276c <HAL_SPI_MspInit+0x90>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4a14      	ldr	r2, [pc, #80]	@ (800276c <HAL_SPI_MspInit+0x90>)
 800271a:	f043 0308 	orr.w	r3, r3, #8
 800271e:	6193      	str	r3, [r2, #24]
 8002720:	4b12      	ldr	r3, [pc, #72]	@ (800276c <HAL_SPI_MspInit+0x90>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LoRA_NSS_Pin|LoRA_SCK_Pin|LoRA_MOSI_Pin;
 800272c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8002730:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273a:	f107 0310 	add.w	r3, r7, #16
 800273e:	4619      	mov	r1, r3
 8002740:	480b      	ldr	r0, [pc, #44]	@ (8002770 <HAL_SPI_MspInit+0x94>)
 8002742:	f001 fe55 	bl	80043f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LoRA_MISO_Pin;
 8002746:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800274a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LoRA_MISO_GPIO_Port, &GPIO_InitStruct);
 8002754:	f107 0310 	add.w	r3, r7, #16
 8002758:	4619      	mov	r1, r3
 800275a:	4805      	ldr	r0, [pc, #20]	@ (8002770 <HAL_SPI_MspInit+0x94>)
 800275c:	f001 fe48 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002760:	bf00      	nop
 8002762:	3720      	adds	r7, #32
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40003800 	.word	0x40003800
 800276c:	40021000 	.word	0x40021000
 8002770:	40010c00 	.word	0x40010c00

08002774 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a12      	ldr	r2, [pc, #72]	@ (80027cc <HAL_TIM_Base_MspInit+0x58>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10c      	bne.n	80027a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002786:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <HAL_TIM_Base_MspInit+0x5c>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	4a11      	ldr	r2, [pc, #68]	@ (80027d0 <HAL_TIM_Base_MspInit+0x5c>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	61d3      	str	r3, [r2, #28]
 8002792:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <HAL_TIM_Base_MspInit+0x5c>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800279e:	e010      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0b      	ldr	r2, [pc, #44]	@ (80027d4 <HAL_TIM_Base_MspInit+0x60>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10b      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027aa:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <HAL_TIM_Base_MspInit+0x5c>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4a08      	ldr	r2, [pc, #32]	@ (80027d0 <HAL_TIM_Base_MspInit+0x5c>)
 80027b0:	f043 0304 	orr.w	r3, r3, #4
 80027b4:	61d3      	str	r3, [r2, #28]
 80027b6:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <HAL_TIM_Base_MspInit+0x5c>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	40000400 	.word	0x40000400
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40000800 	.word	0x40000800

080027d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0310 	add.w	r3, r7, #16
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1e      	ldr	r2, [pc, #120]	@ (800286c <HAL_TIM_MspPostInit+0x94>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d118      	bne.n	800282a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002870 <HAL_TIM_MspPostInit+0x98>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002870 <HAL_TIM_MspPostInit+0x98>)
 80027fe:	f043 0308 	orr.w	r3, r3, #8
 8002802:	6193      	str	r3, [r2, #24]
 8002804:	4b1a      	ldr	r3, [pc, #104]	@ (8002870 <HAL_TIM_MspPostInit+0x98>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = M2A_Pin|M2B_Pin;
 8002810:	2303      	movs	r3, #3
 8002812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	2302      	movs	r3, #2
 800281a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281c:	f107 0310 	add.w	r3, r7, #16
 8002820:	4619      	mov	r1, r3
 8002822:	4814      	ldr	r0, [pc, #80]	@ (8002874 <HAL_TIM_MspPostInit+0x9c>)
 8002824:	f001 fde4 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002828:	e01c      	b.n	8002864 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a12      	ldr	r2, [pc, #72]	@ (8002878 <HAL_TIM_MspPostInit+0xa0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d117      	bne.n	8002864 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002834:	4b0e      	ldr	r3, [pc, #56]	@ (8002870 <HAL_TIM_MspPostInit+0x98>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4a0d      	ldr	r2, [pc, #52]	@ (8002870 <HAL_TIM_MspPostInit+0x98>)
 800283a:	f043 0308 	orr.w	r3, r3, #8
 800283e:	6193      	str	r3, [r2, #24]
 8002840:	4b0b      	ldr	r3, [pc, #44]	@ (8002870 <HAL_TIM_MspPostInit+0x98>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1A_Pin|M1B_Pin;
 800284c:	23c0      	movs	r3, #192	@ 0xc0
 800284e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2302      	movs	r3, #2
 8002856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	4619      	mov	r1, r3
 800285e:	4805      	ldr	r0, [pc, #20]	@ (8002874 <HAL_TIM_MspPostInit+0x9c>)
 8002860:	f001 fdc6 	bl	80043f0 <HAL_GPIO_Init>
}
 8002864:	bf00      	nop
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40000400 	.word	0x40000400
 8002870:	40021000 	.word	0x40021000
 8002874:	40010c00 	.word	0x40010c00
 8002878:	40000800 	.word	0x40000800

0800287c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 0310 	add.w	r3, r7, #16
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1c      	ldr	r2, [pc, #112]	@ (8002908 <HAL_UART_MspInit+0x8c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d131      	bne.n	8002900 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800289c:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <HAL_UART_MspInit+0x90>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	4a1a      	ldr	r2, [pc, #104]	@ (800290c <HAL_UART_MspInit+0x90>)
 80028a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028a6:	6193      	str	r3, [r2, #24]
 80028a8:	4b18      	ldr	r3, [pc, #96]	@ (800290c <HAL_UART_MspInit+0x90>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b4:	4b15      	ldr	r3, [pc, #84]	@ (800290c <HAL_UART_MspInit+0x90>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	4a14      	ldr	r2, [pc, #80]	@ (800290c <HAL_UART_MspInit+0x90>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	6193      	str	r3, [r2, #24]
 80028c0:	4b12      	ldr	r3, [pc, #72]	@ (800290c <HAL_UART_MspInit+0x90>)
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin;
 80028cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028d6:	2303      	movs	r3, #3
 80028d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 80028da:	f107 0310 	add.w	r3, r7, #16
 80028de:	4619      	mov	r1, r3
 80028e0:	480b      	ldr	r0, [pc, #44]	@ (8002910 <HAL_UART_MspInit+0x94>)
 80028e2:	f001 fd85 	bl	80043f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_RX_Pin;
 80028e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 80028f4:	f107 0310 	add.w	r3, r7, #16
 80028f8:	4619      	mov	r1, r3
 80028fa:	4805      	ldr	r0, [pc, #20]	@ (8002910 <HAL_UART_MspInit+0x94>)
 80028fc:	f001 fd78 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002900:	bf00      	nop
 8002902:	3720      	adds	r7, #32
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40013800 	.word	0x40013800
 800290c:	40021000 	.word	0x40021000
 8002910:	40010800 	.word	0x40010800

08002914 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08e      	sub	sp, #56	@ 0x38
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800292a:	4b34      	ldr	r3, [pc, #208]	@ (80029fc <HAL_InitTick+0xe8>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4a33      	ldr	r2, [pc, #204]	@ (80029fc <HAL_InitTick+0xe8>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	61d3      	str	r3, [r2, #28]
 8002936:	4b31      	ldr	r3, [pc, #196]	@ (80029fc <HAL_InitTick+0xe8>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002942:	f107 0210 	add.w	r2, r7, #16
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f003 fbef 	bl	8006130 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d103      	bne.n	8002964 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800295c:	f003 fbc0 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 8002960:	6378      	str	r0, [r7, #52]	@ 0x34
 8002962:	e004      	b.n	800296e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002964:	f003 fbbc 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 8002968:	4603      	mov	r3, r0
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800296e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002970:	4a23      	ldr	r2, [pc, #140]	@ (8002a00 <HAL_InitTick+0xec>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0c9b      	lsrs	r3, r3, #18
 8002978:	3b01      	subs	r3, #1
 800297a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800297c:	4b21      	ldr	r3, [pc, #132]	@ (8002a04 <HAL_InitTick+0xf0>)
 800297e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002982:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002984:	4b1f      	ldr	r3, [pc, #124]	@ (8002a04 <HAL_InitTick+0xf0>)
 8002986:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800298a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800298c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <HAL_InitTick+0xf0>)
 800298e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002990:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002992:	4b1c      	ldr	r3, [pc, #112]	@ (8002a04 <HAL_InitTick+0xf0>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002998:	4b1a      	ldr	r3, [pc, #104]	@ (8002a04 <HAL_InitTick+0xf0>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299e:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <HAL_InitTick+0xf0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80029a4:	4817      	ldr	r0, [pc, #92]	@ (8002a04 <HAL_InitTick+0xf0>)
 80029a6:	f004 fb11 	bl	8006fcc <HAL_TIM_Base_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80029b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d11b      	bne.n	80029f0 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80029b8:	4812      	ldr	r0, [pc, #72]	@ (8002a04 <HAL_InitTick+0xf0>)
 80029ba:	f004 fb57 	bl	800706c <HAL_TIM_Base_Start_IT>
 80029be:	4603      	mov	r3, r0
 80029c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80029c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d111      	bne.n	80029f0 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029cc:	201c      	movs	r0, #28
 80029ce:	f001 fd00 	bl	80043d2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b0f      	cmp	r3, #15
 80029d6:	d808      	bhi.n	80029ea <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80029d8:	2200      	movs	r2, #0
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	201c      	movs	r0, #28
 80029de:	f001 fcdc 	bl	800439a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029e2:	4a09      	ldr	r2, [pc, #36]	@ (8002a08 <HAL_InitTick+0xf4>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	e002      	b.n	80029f0 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80029f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3738      	adds	r7, #56	@ 0x38
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000
 8002a00:	431bde83 	.word	0x431bde83
 8002a04:	2000050c 	.word	0x2000050c
 8002a08:	20000018 	.word	0x20000018

08002a0c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a10:	f3bf 8f4f 	dsb	sy
}
 8002a14:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002a16:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <__NVIC_SystemReset+0x24>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002a1e:	4904      	ldr	r1, [pc, #16]	@ (8002a30 <__NVIC_SystemReset+0x24>)
 8002a20:	4b04      	ldr	r3, [pc, #16]	@ (8002a34 <__NVIC_SystemReset+0x28>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a26:	f3bf 8f4f 	dsb	sy
}
 8002a2a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <__NVIC_SystemReset+0x20>
 8002a30:	e000ed00 	.word	0xe000ed00
 8002a34:	05fa0004 	.word	0x05fa0004

08002a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <NMI_Handler+0x4>

08002a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	//snprintf(sysreset_msg, sysreset_msg_len, "SYSTEM RESET!!!!!!!");
	SEGGER_SYSVIEW_PrintfTarget("RESETTTT");
 8002a44:	4802      	ldr	r0, [pc, #8]	@ (8002a50 <HardFault_Handler+0x10>)
 8002a46:	f00a fb8f 	bl	800d168 <SEGGER_SYSVIEW_PrintfTarget>
	NVIC_SystemReset();
 8002a4a:	f7ff ffdf 	bl	8002a0c <__NVIC_SystemReset>
 8002a4e:	bf00      	nop
 8002a50:	08010104 	.word	0x08010104

08002a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a58:	bf00      	nop
 8002a5a:	e7fd      	b.n	8002a58 <MemManage_Handler+0x4>

08002a5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <BusFault_Handler+0x4>

08002a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a68:	bf00      	nop
 8002a6a:	e7fd      	b.n	8002a68 <UsageFault_Handler+0x4>

08002a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a7c:	4802      	ldr	r0, [pc, #8]	@ (8002a88 <TIM2_IRQHandler+0x10>)
 8002a7e:	f004 fca5 	bl	80073cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	2000050c 	.word	0x2000050c

08002a8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return 1;
 8002a90:	2301      	movs	r3, #1
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <_kill>:

int _kill(int pid, int sig)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aa4:	f00b fae4 	bl	800e070 <__errno>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2216      	movs	r2, #22
 8002aac:	601a      	str	r2, [r3, #0]
  return -1;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <_exit>:

void _exit (int status)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ffe7 	bl	8002a9a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002acc:	bf00      	nop
 8002ace:	e7fd      	b.n	8002acc <_exit+0x12>

08002ad0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e00a      	b.n	8002af8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ae2:	f3af 8000 	nop.w
 8002ae6:	4601      	mov	r1, r0
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	60ba      	str	r2, [r7, #8]
 8002aee:	b2ca      	uxtb	r2, r1
 8002af0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3301      	adds	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	dbf0      	blt.n	8002ae2 <_read+0x12>
  }

  return len;
 8002b00:	687b      	ldr	r3, [r7, #4]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <_close>:
  }
  return len;
}

int _close(int file)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b30:	605a      	str	r2, [r3, #4]
  return 0;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <_isatty>:

int _isatty(int file)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b46:	2301      	movs	r3, #1
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
	...

08002b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b74:	4a14      	ldr	r2, [pc, #80]	@ (8002bc8 <_sbrk+0x5c>)
 8002b76:	4b15      	ldr	r3, [pc, #84]	@ (8002bcc <_sbrk+0x60>)
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b80:	4b13      	ldr	r3, [pc, #76]	@ (8002bd0 <_sbrk+0x64>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b88:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <_sbrk+0x64>)
 8002b8a:	4a12      	ldr	r2, [pc, #72]	@ (8002bd4 <_sbrk+0x68>)
 8002b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b8e:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <_sbrk+0x64>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d207      	bcs.n	8002bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b9c:	f00b fa68 	bl	800e070 <__errno>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	220c      	movs	r2, #12
 8002ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	e009      	b.n	8002bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bac:	4b08      	ldr	r3, [pc, #32]	@ (8002bd0 <_sbrk+0x64>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bb2:	4b07      	ldr	r3, [pc, #28]	@ (8002bd0 <_sbrk+0x64>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	4a05      	ldr	r2, [pc, #20]	@ (8002bd0 <_sbrk+0x64>)
 8002bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20005000 	.word	0x20005000
 8002bcc:	00000400 	.word	0x00000400
 8002bd0:	20000554 	.word	0x20000554
 8002bd4:	20004688 	.word	0x20004688

08002bd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002be4:	f7ff fff8 	bl	8002bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002be8:	480b      	ldr	r0, [pc, #44]	@ (8002c18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002bea:	490c      	ldr	r1, [pc, #48]	@ (8002c1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002bec:	4a0c      	ldr	r2, [pc, #48]	@ (8002c20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf0:	e002      	b.n	8002bf8 <LoopCopyDataInit>

08002bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bf6:	3304      	adds	r3, #4

08002bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bfc:	d3f9      	bcc.n	8002bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bfe:	4a09      	ldr	r2, [pc, #36]	@ (8002c24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c00:	4c09      	ldr	r4, [pc, #36]	@ (8002c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c04:	e001      	b.n	8002c0a <LoopFillZerobss>

08002c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c08:	3204      	adds	r2, #4

08002c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c0c:	d3fb      	bcc.n	8002c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c0e:	f00b fa35 	bl	800e07c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c12:	f7fe faf3 	bl	80011fc <main>
  bx lr
 8002c16:	4770      	bx	lr
  ldr r0, =_sdata
 8002c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c1c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002c20:	080106b4 	.word	0x080106b4
  ldr r2, =_sbss
 8002c24:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002c28:	20004688 	.word	0x20004688

08002c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c2c:	e7fe      	b.n	8002c2c <ADC1_2_IRQHandler>
	...

08002c30 <GPS_Init>:
	 degrees += minutes;
	 return degrees;
}

void GPS_Init()
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
	gps.index = 0;
 8002c34:	4b04      	ldr	r3, [pc, #16]	@ (8002c48 <GPS_Init+0x18>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	715a      	strb	r2, [r3, #5]
	HAL_UART_Receive_IT(&huart1, &gps.rx, 1);
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	4903      	ldr	r1, [pc, #12]	@ (8002c4c <GPS_Init+0x1c>)
 8002c3e:	4804      	ldr	r0, [pc, #16]	@ (8002c50 <GPS_Init+0x20>)
 8002c40:	f005 f9de 	bl	8008000 <HAL_UART_Receive_IT>
}
 8002c44:	bf00      	nop
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20000558 	.word	0x20000558
 8002c4c:	2000055c 	.word	0x2000055c
 8002c50:	200003cc 	.word	0x200003cc

08002c54 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af04      	add	r7, sp, #16
 8002c5a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002c5c:	2364      	movs	r3, #100	@ 0x64
 8002c5e:	9302      	str	r3, [sp, #8]
 8002c60:	2301      	movs	r3, #1
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	f107 030f 	add.w	r3, r7, #15
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	2275      	movs	r2, #117	@ 0x75
 8002c6e:	21d0      	movs	r1, #208	@ 0xd0
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f002 f84f 	bl	8004d14 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	2b68      	cmp	r3, #104	@ 0x68
 8002c7a:	d13d      	bne.n	8002cf8 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002c80:	2364      	movs	r3, #100	@ 0x64
 8002c82:	9302      	str	r3, [sp, #8]
 8002c84:	2301      	movs	r3, #1
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	f107 030e 	add.w	r3, r7, #14
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	2301      	movs	r3, #1
 8002c90:	226b      	movs	r2, #107	@ 0x6b
 8002c92:	21d0      	movs	r1, #208	@ 0xd0
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f001 ff43 	bl	8004b20 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002c9a:	2307      	movs	r3, #7
 8002c9c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002c9e:	2364      	movs	r3, #100	@ 0x64
 8002ca0:	9302      	str	r3, [sp, #8]
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	f107 030e 	add.w	r3, r7, #14
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	2301      	movs	r3, #1
 8002cae:	2219      	movs	r2, #25
 8002cb0:	21d0      	movs	r1, #208	@ 0xd0
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f001 ff34 	bl	8004b20 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002cbc:	2364      	movs	r3, #100	@ 0x64
 8002cbe:	9302      	str	r3, [sp, #8]
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	9301      	str	r3, [sp, #4]
 8002cc4:	f107 030e 	add.w	r3, r7, #14
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	2301      	movs	r3, #1
 8002ccc:	221c      	movs	r2, #28
 8002cce:	21d0      	movs	r1, #208	@ 0xd0
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f001 ff25 	bl	8004b20 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0b00010000;
 8002cd6:	2310      	movs	r3, #16
 8002cd8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002cda:	2364      	movs	r3, #100	@ 0x64
 8002cdc:	9302      	str	r3, [sp, #8]
 8002cde:	2301      	movs	r3, #1
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	f107 030e 	add.w	r3, r7, #14
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	2301      	movs	r3, #1
 8002cea:	221b      	movs	r2, #27
 8002cec:	21d0      	movs	r1, #208	@ 0xd0
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f001 ff16 	bl	8004b20 <HAL_I2C_Mem_Write>
        return 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e000      	b.n	8002cfa <MPU6050_Init+0xa6>
    }
    return 1;
 8002cf8:	2301      	movs	r3, #1
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	0000      	movs	r0, r0
 8002d04:	0000      	movs	r0, r0
	...

08002d08 <MPU6050_Read_Gyro>:
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
}

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002d08:	b5b0      	push	{r4, r5, r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af04      	add	r7, sp, #16
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8002d12:	2364      	movs	r3, #100	@ 0x64
 8002d14:	9302      	str	r3, [sp, #8]
 8002d16:	2306      	movs	r3, #6
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	f107 0308 	add.w	r3, r7, #8
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2301      	movs	r3, #1
 8002d22:	2243      	movs	r2, #67	@ 0x43
 8002d24:	21d0      	movs	r1, #208	@ 0xd0
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f001 fff4 	bl	8004d14 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002d2c:	7a3b      	ldrb	r3, [r7, #8]
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	b21a      	sxth	r2, r3
 8002d32:	7a7b      	ldrb	r3, [r7, #9]
 8002d34:	b21b      	sxth	r3, r3
 8002d36:	4313      	orrs	r3, r2
 8002d38:	b21a      	sxth	r2, r3
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002d3e:	7abb      	ldrb	r3, [r7, #10]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	b21a      	sxth	r2, r3
 8002d44:	7afb      	ldrb	r3, [r7, #11]
 8002d46:	b21b      	sxth	r3, r3
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	b21a      	sxth	r2, r3
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002d50:	7b3b      	ldrb	r3, [r7, #12]
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	b21a      	sxth	r2, r3
 8002d56:	7b7b      	ldrb	r3, [r7, #13]
 8002d58:	b21b      	sxth	r3, r3
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	b21a      	sxth	r2, r3
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	849a      	strh	r2, [r3, #36]	@ 0x24
    /*** convert the RAW values into dps (�/s)
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd fb91 	bl	8000490 <__aeabi_i2d>
 8002d6e:	a32c      	add	r3, pc, #176	@ (adr r3, 8002e20 <MPU6050_Read_Gyro+0x118>)
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	f7fd fd20 	bl	80007b8 <__aeabi_ddiv>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	6839      	ldr	r1, [r7, #0]
 8002d7e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fb81 	bl	8000490 <__aeabi_i2d>
 8002d8e:	a324      	add	r3, pc, #144	@ (adr r3, 8002e20 <MPU6050_Read_Gyro+0x118>)
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f7fd fd10 	bl	80007b8 <__aeabi_ddiv>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	6839      	ldr	r1, [r7, #0]
 8002d9e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd fb71 	bl	8000490 <__aeabi_i2d>
 8002dae:	a31c      	add	r3, pc, #112	@ (adr r3, 8002e20 <MPU6050_Read_Gyro+0x118>)
 8002db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db4:	f7fd fd00 	bl	80007b8 <__aeabi_ddiv>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	6839      	ldr	r1, [r7, #0]
 8002dbe:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    double dt_imu = (double)(HAL_GetTick() - timer_mpu6050) / 1000;
 8002dc2:	f000 fdaf 	bl	8003924 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	4b17      	ldr	r3, [pc, #92]	@ (8002e28 <MPU6050_Read_Gyro+0x120>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fb4e 	bl	8000470 <__aeabi_ui2d>
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	4b14      	ldr	r3, [pc, #80]	@ (8002e2c <MPU6050_Read_Gyro+0x124>)
 8002dda:	f7fd fced 	bl	80007b8 <__aeabi_ddiv>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    timer_mpu6050 = HAL_GetTick();
 8002de6:	f000 fd9d 	bl	8003924 <HAL_GetTick>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4a0e      	ldr	r2, [pc, #56]	@ (8002e28 <MPU6050_Read_Gyro+0x120>)
 8002dee:	6013      	str	r3, [r2, #0]

    DataStruct->HeadingZ = Gyro_getHeadingZ(DataStruct->HeadingZ, DataStruct->Gz, dt_imu);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002dfc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e00:	e9cd 2300 	strd	r2, r3, [sp]
 8002e04:	4622      	mov	r2, r4
 8002e06:	462b      	mov	r3, r5
 8002e08:	f000 f812 	bl	8002e30 <Gyro_getHeadingZ>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	6839      	ldr	r1, [r7, #0]
 8002e12:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
}
 8002e16:	bf00      	nop
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	00000000 	.word	0x00000000
 8002e24:	40606000 	.word	0x40606000
 8002e28:	200005a4 	.word	0x200005a4
 8002e2c:	408f4000 	.word	0x408f4000

08002e30 <Gyro_getHeadingZ>:

    return Kalman->angle;
};

double Gyro_getHeadingZ(double HeadingZ, double Gz, double dt)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002e3a:	e9c7 2300 	strd	r2, r3, [r7]
	double degree_changes = (Gz+0.16) * dt;
 8002e3e:	a326      	add	r3, pc, #152	@ (adr r3, 8002ed8 <Gyro_getHeadingZ+0xa8>)
 8002e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e48:	f7fd f9d6 	bl	80001f8 <__adddf3>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e54:	f7fd fb86 	bl	8000564 <__aeabi_dmul>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if((degree_changes > 0.1 || degree_changes < -0.1) && (degree_changes < 2.0 && degree_changes > -2.0))
 8002e60:	a31f      	add	r3, pc, #124	@ (adr r3, 8002ee0 <Gyro_getHeadingZ+0xb0>)
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e6a:	f7fd fe0b 	bl	8000a84 <__aeabi_dcmpgt>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <Gyro_getHeadingZ+0x58>
 8002e74:	a31c      	add	r3, pc, #112	@ (adr r3, 8002ee8 <Gyro_getHeadingZ+0xb8>)
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e7e:	f7fd fde3 	bl	8000a48 <__aeabi_dcmplt>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01f      	beq.n	8002ec8 <Gyro_getHeadingZ+0x98>
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e94:	f7fd fdd8 	bl	8000a48 <__aeabi_dcmplt>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d014      	beq.n	8002ec8 <Gyro_getHeadingZ+0x98>
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002ea6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002eaa:	f7fd fdeb 	bl	8000a84 <__aeabi_dcmpgt>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <Gyro_getHeadingZ+0x98>
		HeadingZ += degree_changes;
 8002eb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002eb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ebc:	f7fd f99c 	bl	80001f8 <__adddf3>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return HeadingZ;
 8002ec8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
};
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	47ae147b 	.word	0x47ae147b
 8002edc:	3fc47ae1 	.word	0x3fc47ae1
 8002ee0:	9999999a 	.word	0x9999999a
 8002ee4:	3fb99999 	.word	0x3fb99999
 8002ee8:	9999999a 	.word	0x9999999a
 8002eec:	bfb99999 	.word	0xbfb99999

08002ef0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8002efa:	4a38      	ldr	r2, [pc, #224]	@ (8002fdc <HD44780_Init+0xec>)
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8002f00:	4b37      	ldr	r3, [pc, #220]	@ (8002fe0 <HD44780_Init+0xf0>)
 8002f02:	2208      	movs	r2, #8
 8002f04:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8002f06:	4b37      	ldr	r3, [pc, #220]	@ (8002fe4 <HD44780_Init+0xf4>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8002f0c:	4b33      	ldr	r3, [pc, #204]	@ (8002fdc <HD44780_Init+0xec>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d907      	bls.n	8002f24 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8002f14:	4b33      	ldr	r3, [pc, #204]	@ (8002fe4 <HD44780_Init+0xf4>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	f043 0308 	orr.w	r3, r3, #8
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4b31      	ldr	r3, [pc, #196]	@ (8002fe4 <HD44780_Init+0xf4>)
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	e006      	b.n	8002f32 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8002f24:	4b2f      	ldr	r3, [pc, #188]	@ (8002fe4 <HD44780_Init+0xf4>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe4 <HD44780_Init+0xf4>)
 8002f30:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8002f32:	f000 f93d 	bl	80031b0 <DelayInit>
  DelayUS(100);
 8002f36:	2064      	movs	r0, #100	@ 0x64
 8002f38:	f000 f962 	bl	8003200 <DelayUS>
  //HAL_Delay(100);

  ExpanderWrite(dpBacklight);
 8002f3c:	4b28      	ldr	r3, [pc, #160]	@ (8002fe0 <HD44780_Init+0xf0>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 f8fd 	bl	8003140 <ExpanderWrite>
  DelayUS(1000);
 8002f46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f4a:	f000 f959 	bl	8003200 <DelayUS>
  //HAL_Delay(1000);

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8002f4e:	2030      	movs	r0, #48	@ 0x30
 8002f50:	f000 f8e4 	bl	800311c <Write4Bits>
  DelayUS(4500);
 8002f54:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002f58:	f000 f952 	bl	8003200 <DelayUS>

  Write4Bits(0x03 << 4);
 8002f5c:	2030      	movs	r0, #48	@ 0x30
 8002f5e:	f000 f8dd 	bl	800311c <Write4Bits>
  DelayUS(4500);
 8002f62:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002f66:	f000 f94b 	bl	8003200 <DelayUS>

  Write4Bits(0x03 << 4);
 8002f6a:	2030      	movs	r0, #48	@ 0x30
 8002f6c:	f000 f8d6 	bl	800311c <Write4Bits>
  DelayUS(4500);
 8002f70:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002f74:	f000 f944 	bl	8003200 <DelayUS>

  Write4Bits(0x02 << 4);
 8002f78:	2020      	movs	r0, #32
 8002f7a:	f000 f8cf 	bl	800311c <Write4Bits>
  DelayUS(100);
 8002f7e:	2064      	movs	r0, #100	@ 0x64
 8002f80:	f000 f93e 	bl	8003200 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8002f84:	4b17      	ldr	r3, [pc, #92]	@ (8002fe4 <HD44780_Init+0xf4>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	f043 0320 	orr.w	r3, r3, #32
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f887 	bl	80030a2 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002f94:	4b14      	ldr	r3, [pc, #80]	@ (8002fe8 <HD44780_Init+0xf8>)
 8002f96:	2204      	movs	r2, #4
 8002f98:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8002f9a:	f000 f843 	bl	8003024 <HD44780_Display>
  HD44780_Clear();
 8002f9e:	f000 f82b 	bl	8002ff8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002fa2:	4b12      	ldr	r3, [pc, #72]	@ (8002fec <HD44780_Init+0xfc>)
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8002fa8:	4b10      	ldr	r3, [pc, #64]	@ (8002fec <HD44780_Init+0xfc>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	f043 0304 	orr.w	r3, r3, #4
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f875 	bl	80030a2 <SendCommand>
  DelayUS(4500);
 8002fb8:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002fbc:	f000 f920 	bl	8003200 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8002fc0:	490b      	ldr	r1, [pc, #44]	@ (8002ff0 <HD44780_Init+0x100>)
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f000 f844 	bl	8003050 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8002fc8:	490a      	ldr	r1, [pc, #40]	@ (8002ff4 <HD44780_Init+0x104>)
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f000 f840 	bl	8003050 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8002fd0:	f000 f81d 	bl	800300e <HD44780_Home>
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	200005ab 	.word	0x200005ab
 8002fe0:	200005ac 	.word	0x200005ac
 8002fe4:	200005a8 	.word	0x200005a8
 8002fe8:	200005a9 	.word	0x200005a9
 8002fec:	200005aa 	.word	0x200005aa
 8002ff0:	20000008 	.word	0x20000008
 8002ff4:	20000010 	.word	0x20000010

08002ff8 <HD44780_Clear>:

void HD44780_Clear()
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f000 f850 	bl	80030a2 <SendCommand>
  DelayUS(2000);
 8003002:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003006:	f000 f8fb 	bl	8003200 <DelayUS>
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}

0800300e <HD44780_Home>:

void HD44780_Home()
{
 800300e:	b580      	push	{r7, lr}
 8003010:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8003012:	2002      	movs	r0, #2
 8003014:	f000 f845 	bl	80030a2 <SendCommand>
  DelayUS(2000);
 8003018:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800301c:	f000 f8f0 	bl	8003200 <DelayUS>
}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}

08003024 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8003028:	4b08      	ldr	r3, [pc, #32]	@ (800304c <HD44780_Display+0x28>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	f043 0304 	orr.w	r3, r3, #4
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4b06      	ldr	r3, [pc, #24]	@ (800304c <HD44780_Display+0x28>)
 8003034:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8003036:	4b05      	ldr	r3, [pc, #20]	@ (800304c <HD44780_Display+0x28>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	f043 0308 	orr.w	r3, r3, #8
 800303e:	b2db      	uxtb	r3, r3
 8003040:	4618      	mov	r0, r3
 8003042:	f000 f82e 	bl	80030a2 <SendCommand>
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200005a9 	.word	0x200005a9

08003050 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	6039      	str	r1, [r7, #0]
 800305a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	b25b      	sxtb	r3, r3
 800306a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800306e:	b25b      	sxtb	r3, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	4618      	mov	r0, r3
 8003074:	f000 f815 	bl	80030a2 <SendCommand>
  for (int i=0; i<8; i++)
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	e009      	b.n	8003092 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	4413      	add	r3, r2
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f819 	bl	80030be <SendChar>
  for (int i=0; i<8; i++)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3301      	adds	r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b07      	cmp	r3, #7
 8003096:	ddf2      	ble.n	800307e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 f812 	bl	80030da <Send>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <SendChar>:

static void SendChar(uint8_t ch)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	4603      	mov	r3, r0
 80030c6:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	2101      	movs	r1, #1
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f804 	bl	80030da <Send>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	4603      	mov	r3, r0
 80030e2:	460a      	mov	r2, r1
 80030e4:	71fb      	strb	r3, [r7, #7]
 80030e6:	4613      	mov	r3, r2
 80030e8:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	f023 030f 	bic.w	r3, r3, #15
 80030f0:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	79bb      	ldrb	r3, [r7, #6]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	4618      	mov	r0, r3
 8003102:	f000 f80b 	bl	800311c <Write4Bits>
  Write4Bits((lownib)|mode);
 8003106:	7bba      	ldrb	r2, [r7, #14]
 8003108:	79bb      	ldrb	r3, [r7, #6]
 800310a:	4313      	orrs	r3, r2
 800310c:	b2db      	uxtb	r3, r3
 800310e:	4618      	mov	r0, r3
 8003110:	f000 f804 	bl	800311c <Write4Bits>
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	4618      	mov	r0, r3
 800312a:	f000 f809 	bl	8003140 <ExpanderWrite>
  PulseEnable(value);
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f81f 	bl	8003174 <PulseEnable>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800314a:	4b08      	ldr	r3, [pc, #32]	@ (800316c <ExpanderWrite+0x2c>)
 800314c:	781a      	ldrb	r2, [r3, #0]
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	4313      	orrs	r3, r2
 8003152:	b2db      	uxtb	r3, r3
 8003154:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit_IT(&hi2c2, DEVICE_ADDR, (uint8_t*)&data, 1);
 8003156:	f107 020f 	add.w	r2, r7, #15
 800315a:	2301      	movs	r3, #1
 800315c:	214e      	movs	r1, #78	@ 0x4e
 800315e:	4804      	ldr	r0, [pc, #16]	@ (8003170 <ExpanderWrite+0x30>)
 8003160:	f001 fc3e 	bl	80049e0 <HAL_I2C_Master_Transmit_IT>
}
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	200005ac 	.word	0x200005ac
 8003170:	20000290 	.word	0x20000290

08003174 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	b2db      	uxtb	r3, r3
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ffda 	bl	8003140 <ExpanderWrite>
  DelayUS(20);
 800318c:	2014      	movs	r0, #20
 800318e:	f000 f837 	bl	8003200 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	f023 0304 	bic.w	r3, r3, #4
 8003198:	b2db      	uxtb	r3, r3
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff ffd0 	bl	8003140 <ExpanderWrite>
  DelayUS(20);
 80031a0:	2014      	movs	r0, #20
 80031a2:	f000 f82d 	bl	8003200 <DelayUS>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <DelayInit>:

static void DelayInit(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80031b4:	4b10      	ldr	r3, [pc, #64]	@ (80031f8 <DelayInit+0x48>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4a0f      	ldr	r2, [pc, #60]	@ (80031f8 <DelayInit+0x48>)
 80031ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031be:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80031c0:	4b0d      	ldr	r3, [pc, #52]	@ (80031f8 <DelayInit+0x48>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4a0c      	ldr	r2, [pc, #48]	@ (80031f8 <DelayInit+0x48>)
 80031c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ca:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80031cc:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <DelayInit+0x4c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	@ (80031fc <DelayInit+0x4c>)
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80031d8:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <DelayInit+0x4c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a07      	ldr	r2, [pc, #28]	@ (80031fc <DelayInit+0x4c>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80031e4:	4b05      	ldr	r3, [pc, #20]	@ (80031fc <DelayInit+0x4c>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80031ea:	bf00      	nop
  __ASM volatile ("NOP");
 80031ec:	bf00      	nop
  __ASM volatile ("NOP");
 80031ee:	bf00      	nop
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	e000edf0 	.word	0xe000edf0
 80031fc:	e0001000 	.word	0xe0001000

08003200 <DelayUS>:

static void DelayUS(uint32_t us) {
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8003208:	4b0d      	ldr	r3, [pc, #52]	@ (8003240 <DelayUS+0x40>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a0d      	ldr	r2, [pc, #52]	@ (8003244 <DelayUS+0x44>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	0c9a      	lsrs	r2, r3, #18
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800321c:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <DelayUS+0x48>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8003222:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <DelayUS+0x48>)
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	429a      	cmp	r2, r3
 8003232:	d8f6      	bhi.n	8003222 <DelayUS+0x22>
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	20000004 	.word	0x20000004
 8003244:	431bde83 	.word	0x431bde83
 8003248:	e0001000 	.word	0xe0001000

0800324c <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 800324c:	b4b0      	push	{r4, r5, r7}
 800324e:	b08f      	sub	sp, #60	@ 0x3c
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8003254:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8003258:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800325a:	2307      	movs	r3, #7
 800325c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8003260:	2307      	movs	r3, #7
 8003262:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8003266:	2301      	movs	r3, #1
 8003268:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 800326c:	23ff      	movs	r3, #255	@ 0xff
 800326e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8003272:	2364      	movs	r3, #100	@ 0x64
 8003274:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8003278:	2308      	movs	r3, #8
 800327a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	461d      	mov	r5, r3
 8003280:	f107 040c 	add.w	r4, r7, #12
 8003284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800328a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800328c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003290:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	373c      	adds	r7, #60	@ 0x3c
 8003298:	46bd      	mov	sp, r7
 800329a:	bcb0      	pop	{r4, r5, r7}
 800329c:	4770      	bx	lr

0800329e <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6898      	ldr	r0, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	899b      	ldrh	r3, [r3, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	4619      	mov	r1, r3
 80032b2:	f001 fa38 	bl	8004726 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80032b6:	2001      	movs	r0, #1
 80032b8:	f000 fb3e 	bl	8003938 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6898      	ldr	r0, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	899b      	ldrh	r3, [r3, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	4619      	mov	r1, r3
 80032c8:	f001 fa2d 	bl	8004726 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80032cc:	2064      	movs	r0, #100	@ 0x64
 80032ce:	f000 fb33 	bl	8003938 <HAL_Delay>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 80032e4:	2101      	movs	r1, #1
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f9ff 	bl	80036ea <LoRa_read>
 80032ec:	4603      	mov	r3, r0
 80032ee:	73bb      	strb	r3, [r7, #14]
	data = read;
 80032f0:	7bbb      	ldrb	r3, [r7, #14]
 80032f2:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d107      	bne.n	800330a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80032fa:	7bbb      	ldrb	r3, [r7, #14]
 80032fc:	f023 0307 	bic.w	r3, r3, #7
 8003300:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	61da      	str	r2, [r3, #28]
 8003308:	e03e      	b.n	8003388 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d10c      	bne.n	800332a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8003310:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003314:	f023 0307 	bic.w	r3, r3, #7
 8003318:	b25b      	sxtb	r3, r3
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	b25b      	sxtb	r3, r3
 8003320:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	61da      	str	r2, [r3, #28]
 8003328:	e02e      	b.n	8003388 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d10c      	bne.n	800334a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8003330:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003334:	f023 0307 	bic.w	r3, r3, #7
 8003338:	b25b      	sxtb	r3, r3
 800333a:	f043 0303 	orr.w	r3, r3, #3
 800333e:	b25b      	sxtb	r3, r3
 8003340:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2203      	movs	r2, #3
 8003346:	61da      	str	r2, [r3, #28]
 8003348:	e01e      	b.n	8003388 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b05      	cmp	r3, #5
 800334e:	d10c      	bne.n	800336a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8003350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003354:	f023 0307 	bic.w	r3, r3, #7
 8003358:	b25b      	sxtb	r3, r3
 800335a:	f043 0305 	orr.w	r3, r3, #5
 800335e:	b25b      	sxtb	r3, r3
 8003360:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2205      	movs	r2, #5
 8003366:	61da      	str	r2, [r3, #28]
 8003368:	e00e      	b.n	8003388 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b06      	cmp	r3, #6
 800336e:	d10b      	bne.n	8003388 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8003370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003374:	f023 0307 	bic.w	r3, r3, #7
 8003378:	b25b      	sxtb	r3, r3
 800337a:	f043 0306 	orr.w	r3, r3, #6
 800337e:	b25b      	sxtb	r3, r3
 8003380:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2206      	movs	r2, #6
 8003386:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	461a      	mov	r2, r3
 800338c:	2101      	movs	r1, #1
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f9c5 	bl	800371e <LoRa_write>
	//HAL_Delay(10);
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	889b      	ldrh	r3, [r3, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	4619      	mov	r1, r3
 80033b8:	f001 f9b5 	bl	8004726 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6998      	ldr	r0, [r3, #24]
 80033c0:	88fa      	ldrh	r2, [r7, #6]
 80033c2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	f003 f8f0 	bl	80065ac <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80033cc:	bf00      	nop
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f003 fcf5 	bl	8006dc2 <HAL_SPI_GetState>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d1f7      	bne.n	80033ce <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6998      	ldr	r0, [r3, #24]
 80033e2:	8b3a      	ldrh	r2, [r7, #24]
 80033e4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80033e8:	6839      	ldr	r1, [r7, #0]
 80033ea:	f003 fa22 	bl	8006832 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80033ee:	bf00      	nop
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f003 fce4 	bl	8006dc2 <HAL_SPI_GetState>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d1f7      	bne.n	80033f0 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	889b      	ldrh	r3, [r3, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	4619      	mov	r1, r3
 800340c:	f001 f98b 	bl	8004726 <HAL_GPIO_WritePin>
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	889b      	ldrh	r3, [r3, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	4619      	mov	r1, r3
 8003434:	f001 f977 	bl	8004726 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6998      	ldr	r0, [r3, #24]
 800343c:	88fa      	ldrh	r2, [r7, #6]
 800343e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	f003 f8b2 	bl	80065ac <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8003448:	bf00      	nop
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	4618      	mov	r0, r3
 8003450:	f003 fcb7 	bl	8006dc2 <HAL_SPI_GetState>
 8003454:	4603      	mov	r3, r0
 8003456:	2b01      	cmp	r3, #1
 8003458:	d1f7      	bne.n	800344a <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6998      	ldr	r0, [r3, #24]
 800345e:	8b3a      	ldrh	r2, [r7, #24]
 8003460:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003464:	6839      	ldr	r1, [r7, #0]
 8003466:	f003 f8a1 	bl	80065ac <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800346a:	bf00      	nop
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	4618      	mov	r0, r3
 8003472:	f003 fca6 	bl	8006dc2 <HAL_SPI_GetState>
 8003476:	4603      	mov	r3, r0
 8003478:	2b01      	cmp	r3, #1
 800347a:	d1f7      	bne.n	800346c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	889b      	ldrh	r3, [r3, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	4619      	mov	r1, r3
 8003488:	f001 f94d 	bl	8004726 <HAL_GPIO_WritePin>
}
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 80034a0:	2126      	movs	r1, #38	@ 0x26
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f921 	bl	80036ea <LoRa_read>
 80034a8:	4603      	mov	r3, r0
 80034aa:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d004      	beq.n	80034bc <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 80034b2:	7bbb      	ldrb	r3, [r7, #14]
 80034b4:	f043 0308 	orr.w	r3, r3, #8
 80034b8:	73fb      	strb	r3, [r7, #15]
 80034ba:	e003      	b.n	80034c4 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 80034bc:	7bbb      	ldrb	r3, [r7, #14]
 80034be:	f023 0308 	bic.w	r3, r3, #8
 80034c2:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	461a      	mov	r2, r3
 80034c8:	2126      	movs	r1, #38	@ 0x26
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f927 	bl	800371e <LoRa_write>
	HAL_Delay(10);
 80034d0:	200a      	movs	r0, #10
 80034d2:	f000 fa31 	bl	8003938 <HAL_Delay>
}
 80034d6:	bf00      	nop
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b096      	sub	sp, #88	@ 0x58
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 80034e8:	4a17      	ldr	r2, [pc, #92]	@ (8003548 <LoRa_setAutoLDO+0x68>)
 80034ea:	f107 0308 	add.w	r3, r7, #8
 80034ee:	4611      	mov	r1, r2
 80034f0:	2250      	movs	r2, #80	@ 0x50
 80034f2:	4618      	mov	r0, r3
 80034f4:	f00a fdf7 	bl	800e0e6 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034fe:	461a      	mov	r2, r3
 8003500:	2301      	movs	r3, #1
 8003502:	4093      	lsls	r3, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7fc ffc3 	bl	8000490 <__aeabi_i2d>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	3358      	adds	r3, #88	@ 0x58
 8003514:	443b      	add	r3, r7
 8003516:	3b50      	subs	r3, #80	@ 0x50
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f7fd f94c 	bl	80007b8 <__aeabi_ddiv>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	f7fd facc 	bl	8000ac4 <__aeabi_d2iz>
 800352c:	4603      	mov	r3, r0
 800352e:	2b10      	cmp	r3, #16
 8003530:	bfcc      	ite	gt
 8003532:	2301      	movgt	r3, #1
 8003534:	2300      	movle	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	4619      	mov	r1, r3
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ffaa 	bl	8003494 <LoRa_setLowDaraRateOptimization>
}
 8003540:	bf00      	nop
 8003542:	3758      	adds	r7, #88	@ 0x58
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	08010110 	.word	0x08010110

0800354c <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	04db      	lsls	r3, r3, #19
 800355a:	115b      	asrs	r3, r3, #5
 800355c:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8003564:	7afb      	ldrb	r3, [r7, #11]
 8003566:	461a      	mov	r2, r3
 8003568:	2106      	movs	r1, #6
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f8d7 	bl	800371e <LoRa_write>
	HAL_Delay(5);
 8003570:	2005      	movs	r0, #5
 8003572:	f000 f9e1 	bl	8003938 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 800357c:	7afb      	ldrb	r3, [r7, #11]
 800357e:	461a      	mov	r2, r3
 8003580:	2107      	movs	r1, #7
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8cb 	bl	800371e <LoRa_write>
	HAL_Delay(5);
 8003588:	2005      	movs	r0, #5
 800358a:	f000 f9d5 	bl	8003938 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8003592:	7afb      	ldrb	r3, [r7, #11]
 8003594:	461a      	mov	r2, r3
 8003596:	2108      	movs	r1, #8
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f8c0 	bl	800371e <LoRa_write>
	HAL_Delay(5);
 800359e:	2005      	movs	r0, #5
 80035a0:	f000 f9ca 	bl	8003938 <HAL_Delay>
}
 80035a4:	bf00      	nop
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b0c      	cmp	r3, #12
 80035ba:	dd01      	ble.n	80035c0 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80035bc:	230c      	movs	r3, #12
 80035be:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	dc01      	bgt.n	80035ca <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80035c6:	2307      	movs	r3, #7
 80035c8:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80035ca:	211e      	movs	r1, #30
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f88c 	bl	80036ea <LoRa_read>
 80035d2:	4603      	mov	r3, r0
 80035d4:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80035d6:	200a      	movs	r0, #10
 80035d8:	f000 f9ae 	bl	8003938 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80035f0:	7bbb      	ldrb	r3, [r7, #14]
 80035f2:	461a      	mov	r2, r3
 80035f4:	211e      	movs	r1, #30
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f891 	bl	800371e <LoRa_write>
	HAL_Delay(10);
 80035fc:	200a      	movs	r0, #10
 80035fe:	f000 f99b 	bl	8003938 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ff6c 	bl	80034e0 <LoRa_setAutoLDO>
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	461a      	mov	r2, r3
 8003620:	2109      	movs	r1, #9
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f87b 	bl	800371e <LoRa_write>
	HAL_Delay(10);
 8003628:	200a      	movs	r0, #10
 800362a:	f000 f985 	bl	8003938 <HAL_Delay>
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	2b2c      	cmp	r3, #44	@ 0x2c
 800364c:	d801      	bhi.n	8003652 <LoRa_setOCP+0x1a>
		current = 45;
 800364e:	232d      	movs	r3, #45	@ 0x2d
 8003650:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	2bf0      	cmp	r3, #240	@ 0xf0
 8003656:	d901      	bls.n	800365c <LoRa_setOCP+0x24>
		current = 240;
 8003658:	23f0      	movs	r3, #240	@ 0xf0
 800365a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	2b78      	cmp	r3, #120	@ 0x78
 8003660:	d809      	bhi.n	8003676 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	3b2d      	subs	r3, #45	@ 0x2d
 8003666:	4a12      	ldr	r2, [pc, #72]	@ (80036b0 <LoRa_setOCP+0x78>)
 8003668:	fb82 1203 	smull	r1, r2, r2, r3
 800366c:	1052      	asrs	r2, r2, #1
 800366e:	17db      	asrs	r3, r3, #31
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	73fb      	strb	r3, [r7, #15]
 8003674:	e00b      	b.n	800368e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	2bf0      	cmp	r3, #240	@ 0xf0
 800367a:	d808      	bhi.n	800368e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	331e      	adds	r3, #30
 8003680:	4a0b      	ldr	r2, [pc, #44]	@ (80036b0 <LoRa_setOCP+0x78>)
 8003682:	fb82 1203 	smull	r1, r2, r2, r3
 8003686:	1092      	asrs	r2, r2, #2
 8003688:	17db      	asrs	r3, r3, #31
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	3320      	adds	r3, #32
 8003692:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	461a      	mov	r2, r3
 8003698:	210b      	movs	r1, #11
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f83f 	bl	800371e <LoRa_write>
	HAL_Delay(10);
 80036a0:	200a      	movs	r0, #10
 80036a2:	f000 f949 	bl	8003938 <HAL_Delay>
}
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	66666667 	.word	0x66666667

080036b4 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80036bc:	211e      	movs	r1, #30
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f813 	bl	80036ea <LoRa_read>
 80036c4:	4603      	mov	r3, r0
 80036c6:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	f043 0307 	orr.w	r3, r3, #7
 80036ce:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80036d0:	7bbb      	ldrb	r3, [r7, #14]
 80036d2:	461a      	mov	r2, r3
 80036d4:	211e      	movs	r1, #30
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f821 	bl	800371e <LoRa_write>
	HAL_Delay(10);
 80036dc:	200a      	movs	r0, #10
 80036de:	f000 f92b 	bl	8003938 <HAL_Delay>
}
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b086      	sub	sp, #24
 80036ee:	af02      	add	r7, sp, #8
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8003700:	f107 030f 	add.w	r3, r7, #15
 8003704:	f107 010e 	add.w	r1, r7, #14
 8003708:	2201      	movs	r2, #1
 800370a:	9200      	str	r2, [sp, #0]
 800370c:	2201      	movs	r2, #1
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff fe44 	bl	800339c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800371e:	b580      	push	{r7, lr}
 8003720:	b086      	sub	sp, #24
 8003722:	af02      	add	r7, sp, #8
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	460b      	mov	r3, r1
 8003728:	70fb      	strb	r3, [r7, #3]
 800372a:	4613      	mov	r3, r2
 800372c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003734:	b2db      	uxtb	r3, r3
 8003736:	73bb      	strb	r3, [r7, #14]
	data = value;
 8003738:	78bb      	ldrb	r3, [r7, #2]
 800373a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800373c:	f107 030f 	add.w	r3, r7, #15
 8003740:	f107 010e 	add.w	r1, r7, #14
 8003744:	2201      	movs	r2, #1
 8003746:	9200      	str	r2, [sp, #0]
 8003748:	2201      	movs	r2, #1
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff fe64 	bl	8003418 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

	return 1;
 8003760:	2301      	movs	r3, #1
}
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8003774:	2105      	movs	r1, #5
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff fdaf 	bl	80032da <LoRa_gotoMode>
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff ffe3 	bl	8003758 <LoRa_isvalid>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8096 	beq.w	80038c6 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800379a:	2100      	movs	r1, #0
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff fd9c 	bl	80032da <LoRa_gotoMode>
			HAL_Delay(10);
 80037a2:	200a      	movs	r0, #10
 80037a4:	f000 f8c8 	bl	8003938 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80037a8:	2101      	movs	r1, #1
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff ff9d 	bl	80036ea <LoRa_read>
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80037b4:	200a      	movs	r0, #10
 80037b6:	f000 f8bf 	bl	8003938 <HAL_Delay>
			data = read | 0x80;
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037c0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80037c2:	7bbb      	ldrb	r3, [r7, #14]
 80037c4:	461a      	mov	r2, r3
 80037c6:	2101      	movs	r1, #1
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ffa8 	bl	800371e <LoRa_write>
			HAL_Delay(100);
 80037ce:	2064      	movs	r0, #100	@ 0x64
 80037d0:	f000 f8b2 	bl	8003938 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff feb6 	bl	800354c <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80037e6:	4619      	mov	r1, r3
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ff11 	bl	8003610 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80037f4:	4619      	mov	r1, r3
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff ff1e 	bl	8003638 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80037fc:	2223      	movs	r2, #35	@ 0x23
 80037fe:	210c      	movs	r1, #12
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff ff8c 	bl	800371e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ff54 	bl	80036b4 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003812:	4619      	mov	r1, r3
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fec9 	bl	80035ac <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800381a:	22ff      	movs	r2, #255	@ 0xff
 800381c:	211f      	movs	r1, #31
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ff7d 	bl	800371e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	b2da      	uxtb	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	b2db      	uxtb	r3, r3
 800383c:	4413      	add	r3, r2
 800383e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8003840:	7bbb      	ldrb	r3, [r7, #14]
 8003842:	461a      	mov	r2, r3
 8003844:	211d      	movs	r1, #29
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff ff69 	bl	800371e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff fe47 	bl	80034e0 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	b29b      	uxth	r3, r3
 800385a:	b2db      	uxtb	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	2120      	movs	r1, #32
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff ff5c 	bl	800371e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386a:	b2db      	uxtb	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	2121      	movs	r1, #33	@ 0x21
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ff54 	bl	800371e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8003876:	2140      	movs	r1, #64	@ 0x40
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ff36 	bl	80036ea <LoRa_read>
 800387e:	4603      	mov	r3, r0
 8003880:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8003888:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 800388a:	7bbb      	ldrb	r3, [r7, #14]
 800388c:	461a      	mov	r2, r3
 800388e:	2140      	movs	r1, #64	@ 0x40
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff44 	bl	800371e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8003896:	2101      	movs	r1, #1
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff fd1e 	bl	80032da <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80038a4:	200a      	movs	r0, #10
 80038a6:	f000 f847 	bl	8003938 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80038aa:	2142      	movs	r1, #66	@ 0x42
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff1c 	bl	80036ea <LoRa_read>
 80038b2:	4603      	mov	r3, r0
 80038b4:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	2b12      	cmp	r3, #18
 80038ba:	d101      	bne.n	80038c0 <LoRa_init+0x13c>
				return LORA_OK;
 80038bc:	23c8      	movs	r3, #200	@ 0xc8
 80038be:	e004      	b.n	80038ca <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80038c0:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80038c4:	e001      	b.n	80038ca <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80038c6:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038d8:	4b08      	ldr	r3, [pc, #32]	@ (80038fc <HAL_Init+0x28>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a07      	ldr	r2, [pc, #28]	@ (80038fc <HAL_Init+0x28>)
 80038de:	f043 0310 	orr.w	r3, r3, #16
 80038e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038e4:	2003      	movs	r0, #3
 80038e6:	f000 fd4d 	bl	8004384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038ea:	200f      	movs	r0, #15
 80038ec:	f7ff f812 	bl	8002914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038f0:	f7fe fe04 	bl	80024fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40022000 	.word	0x40022000

08003900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003904:	4b05      	ldr	r3, [pc, #20]	@ (800391c <HAL_IncTick+0x1c>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <HAL_IncTick+0x20>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4413      	add	r3, r2
 8003910:	4a03      	ldr	r2, [pc, #12]	@ (8003920 <HAL_IncTick+0x20>)
 8003912:	6013      	str	r3, [r2, #0]
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	2000001c 	.word	0x2000001c
 8003920:	200005b0 	.word	0x200005b0

08003924 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return uwTick;
 8003928:	4b02      	ldr	r3, [pc, #8]	@ (8003934 <HAL_GetTick+0x10>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	200005b0 	.word	0x200005b0

08003938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003940:	f7ff fff0 	bl	8003924 <HAL_GetTick>
 8003944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d005      	beq.n	800395e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003952:	4b0a      	ldr	r3, [pc, #40]	@ (800397c <HAL_Delay+0x44>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4413      	add	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800395e:	bf00      	nop
 8003960:	f7ff ffe0 	bl	8003924 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	429a      	cmp	r2, r3
 800396e:	d8f7      	bhi.n	8003960 <HAL_Delay+0x28>
  {
  }
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	2000001c 	.word	0x2000001c

08003980 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e0be      	b.n	8003b20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d109      	bne.n	80039c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fe fdd4 	bl	800256c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fbf1 	bl	80041ac <ADC_ConversionStop_Disable>
 80039ca:	4603      	mov	r3, r0
 80039cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f040 8099 	bne.w	8003b0e <HAL_ADC_Init+0x18e>
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f040 8095 	bne.w	8003b0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80039ec:	f023 0302 	bic.w	r3, r3, #2
 80039f0:	f043 0202 	orr.w	r2, r3, #2
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	7b1b      	ldrb	r3, [r3, #12]
 8003a06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003a08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a18:	d003      	beq.n	8003a22 <HAL_ADC_Init+0xa2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d102      	bne.n	8003a28 <HAL_ADC_Init+0xa8>
 8003a22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a26:	e000      	b.n	8003a2a <HAL_ADC_Init+0xaa>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	7d1b      	ldrb	r3, [r3, #20]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d119      	bne.n	8003a6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	7b1b      	ldrb	r3, [r3, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	035a      	lsls	r2, r3, #13
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	e00b      	b.n	8003a6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a58:	f043 0220 	orr.w	r2, r3, #32
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	f043 0201 	orr.w	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	4b28      	ldr	r3, [pc, #160]	@ (8003b28 <HAL_ADC_Init+0x1a8>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a9c:	d003      	beq.n	8003aa6 <HAL_ADC_Init+0x126>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d104      	bne.n	8003ab0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	051b      	lsls	r3, r3, #20
 8003aae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	4b18      	ldr	r3, [pc, #96]	@ (8003b2c <HAL_ADC_Init+0x1ac>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d10b      	bne.n	8003aec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	f043 0201 	orr.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003aea:	e018      	b.n	8003b1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af0:	f023 0312 	bic.w	r3, r3, #18
 8003af4:	f043 0210 	orr.w	r2, r3, #16
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b00:	f043 0201 	orr.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b0c:	e007      	b.n	8003b1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b12:	f043 0210 	orr.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	ffe1f7fd 	.word	0xffe1f7fd
 8003b2c:	ff1f0efe 	.word	0xff1f0efe

08003b30 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_ADC_Start+0x1a>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e098      	b.n	8003c7c <HAL_ADC_Start+0x14c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fad0 	bl	80040f8 <ADC_Enable>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f040 8087 	bne.w	8003c72 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a41      	ldr	r2, [pc, #260]	@ (8003c84 <HAL_ADC_Start+0x154>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d105      	bne.n	8003b8e <HAL_ADC_Start+0x5e>
 8003b82:	4b41      	ldr	r3, [pc, #260]	@ (8003c88 <HAL_ADC_Start+0x158>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d115      	bne.n	8003bba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b92:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d026      	beq.n	8003bf6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bb0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bb8:	e01d      	b.n	8003bf6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a2f      	ldr	r2, [pc, #188]	@ (8003c88 <HAL_ADC_Start+0x158>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d004      	beq.n	8003bda <HAL_ADC_Start+0xaa>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8003c84 <HAL_ADC_Start+0x154>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d10d      	bne.n	8003bf6 <HAL_ADC_Start+0xc6>
 8003bda:	4b2b      	ldr	r3, [pc, #172]	@ (8003c88 <HAL_ADC_Start+0x158>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d006      	beq.n	8003c10 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c06:	f023 0206 	bic.w	r2, r3, #6
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c0e:	e002      	b.n	8003c16 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f06f 0202 	mvn.w	r2, #2
 8003c26:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003c32:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003c36:	d113      	bne.n	8003c60 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c3c:	4a11      	ldr	r2, [pc, #68]	@ (8003c84 <HAL_ADC_Start+0x154>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d105      	bne.n	8003c4e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003c42:	4b11      	ldr	r3, [pc, #68]	@ (8003c88 <HAL_ADC_Start+0x158>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d108      	bne.n	8003c60 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003c5c:	609a      	str	r2, [r3, #8]
 8003c5e:	e00c      	b.n	8003c7a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	e003      	b.n	8003c7a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40012800 	.word	0x40012800
 8003c88:	40012400 	.word	0x40012400

08003c8c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_ADC_Stop+0x1a>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e01a      	b.n	8003cdc <HAL_ADC_Stop+0x50>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fa7c 	bl	80041ac <ADC_ConversionStop_Disable>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	f043 0201 	orr.w	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003ce4:	b590      	push	{r4, r7, lr}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003cfa:	f7ff fe13 	bl	8003924 <HAL_GetTick>
 8003cfe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d12:	f043 0220 	orr.w	r2, r3, #32
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e0d3      	b.n	8003ece <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d131      	bne.n	8003d98 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d12a      	bne.n	8003d98 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003d42:	e021      	b.n	8003d88 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d01d      	beq.n	8003d88 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d007      	beq.n	8003d62 <HAL_ADC_PollForConversion+0x7e>
 8003d52:	f7ff fde7 	bl	8003924 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d212      	bcs.n	8003d88 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10b      	bne.n	8003d88 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d74:	f043 0204 	orr.w	r2, r3, #4
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0a2      	b.n	8003ece <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0d6      	beq.n	8003d44 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003d96:	e070      	b.n	8003e7a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003d98:	4b4f      	ldr	r3, [pc, #316]	@ (8003ed8 <HAL_ADC_PollForConversion+0x1f4>)
 8003d9a:	681c      	ldr	r4, [r3, #0]
 8003d9c:	2002      	movs	r0, #2
 8003d9e:	f002 facb 	bl	8006338 <HAL_RCCEx_GetPeriphCLKFreq>
 8003da2:	4603      	mov	r3, r0
 8003da4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6919      	ldr	r1, [r3, #16]
 8003dae:	4b4b      	ldr	r3, [pc, #300]	@ (8003edc <HAL_ADC_PollForConversion+0x1f8>)
 8003db0:	400b      	ands	r3, r1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d118      	bne.n	8003de8 <HAL_ADC_PollForConversion+0x104>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68d9      	ldr	r1, [r3, #12]
 8003dbc:	4b48      	ldr	r3, [pc, #288]	@ (8003ee0 <HAL_ADC_PollForConversion+0x1fc>)
 8003dbe:	400b      	ands	r3, r1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d111      	bne.n	8003de8 <HAL_ADC_PollForConversion+0x104>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6919      	ldr	r1, [r3, #16]
 8003dca:	4b46      	ldr	r3, [pc, #280]	@ (8003ee4 <HAL_ADC_PollForConversion+0x200>)
 8003dcc:	400b      	ands	r3, r1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d108      	bne.n	8003de4 <HAL_ADC_PollForConversion+0x100>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68d9      	ldr	r1, [r3, #12]
 8003dd8:	4b43      	ldr	r3, [pc, #268]	@ (8003ee8 <HAL_ADC_PollForConversion+0x204>)
 8003dda:	400b      	ands	r3, r1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_ADC_PollForConversion+0x100>
 8003de0:	2314      	movs	r3, #20
 8003de2:	e020      	b.n	8003e26 <HAL_ADC_PollForConversion+0x142>
 8003de4:	2329      	movs	r3, #41	@ 0x29
 8003de6:	e01e      	b.n	8003e26 <HAL_ADC_PollForConversion+0x142>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6919      	ldr	r1, [r3, #16]
 8003dee:	4b3d      	ldr	r3, [pc, #244]	@ (8003ee4 <HAL_ADC_PollForConversion+0x200>)
 8003df0:	400b      	ands	r3, r1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_ADC_PollForConversion+0x120>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68d9      	ldr	r1, [r3, #12]
 8003dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8003ee8 <HAL_ADC_PollForConversion+0x204>)
 8003dfe:	400b      	ands	r3, r1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00d      	beq.n	8003e20 <HAL_ADC_PollForConversion+0x13c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6919      	ldr	r1, [r3, #16]
 8003e0a:	4b38      	ldr	r3, [pc, #224]	@ (8003eec <HAL_ADC_PollForConversion+0x208>)
 8003e0c:	400b      	ands	r3, r1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d108      	bne.n	8003e24 <HAL_ADC_PollForConversion+0x140>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68d9      	ldr	r1, [r3, #12]
 8003e18:	4b34      	ldr	r3, [pc, #208]	@ (8003eec <HAL_ADC_PollForConversion+0x208>)
 8003e1a:	400b      	ands	r3, r1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_ADC_PollForConversion+0x140>
 8003e20:	2354      	movs	r3, #84	@ 0x54
 8003e22:	e000      	b.n	8003e26 <HAL_ADC_PollForConversion+0x142>
 8003e24:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003e26:	fb02 f303 	mul.w	r3, r2, r3
 8003e2a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003e2c:	e021      	b.n	8003e72 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e34:	d01a      	beq.n	8003e6c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <HAL_ADC_PollForConversion+0x168>
 8003e3c:	f7ff fd72 	bl	8003924 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d20f      	bcs.n	8003e6c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d90b      	bls.n	8003e6c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	f043 0204 	orr.w	r2, r3, #4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e030      	b.n	8003ece <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d8d9      	bhi.n	8003e2e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f06f 0212 	mvn.w	r2, #18
 8003e82:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e88:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003e9a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003e9e:	d115      	bne.n	8003ecc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d111      	bne.n	8003ecc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d105      	bne.n	8003ecc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec4:	f043 0201 	orr.w	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd90      	pop	{r4, r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000004 	.word	0x20000004
 8003edc:	24924924 	.word	0x24924924
 8003ee0:	00924924 	.word	0x00924924
 8003ee4:	12492492 	.word	0x12492492
 8003ee8:	00492492 	.word	0x00492492
 8003eec:	00249249 	.word	0x00249249

08003ef0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x20>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e0dc      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x1da>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b06      	cmp	r3, #6
 8003f36:	d81c      	bhi.n	8003f72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	3b05      	subs	r3, #5
 8003f4a:	221f      	movs	r2, #31
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	4019      	ands	r1, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	3b05      	subs	r3, #5
 8003f64:	fa00 f203 	lsl.w	r2, r0, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f70:	e03c      	b.n	8003fec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b0c      	cmp	r3, #12
 8003f78:	d81c      	bhi.n	8003fb4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	3b23      	subs	r3, #35	@ 0x23
 8003f8c:	221f      	movs	r2, #31
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	4019      	ands	r1, r3
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3b23      	subs	r3, #35	@ 0x23
 8003fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fb2:	e01b      	b.n	8003fec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3b41      	subs	r3, #65	@ 0x41
 8003fc6:	221f      	movs	r2, #31
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	4019      	ands	r1, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	3b41      	subs	r3, #65	@ 0x41
 8003fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b09      	cmp	r3, #9
 8003ff2:	d91c      	bls.n	800402e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68d9      	ldr	r1, [r3, #12]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4613      	mov	r3, r2
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	4413      	add	r3, r2
 8004004:	3b1e      	subs	r3, #30
 8004006:	2207      	movs	r2, #7
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	4019      	ands	r1, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	6898      	ldr	r0, [r3, #8]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	3b1e      	subs	r3, #30
 8004020:	fa00 f203 	lsl.w	r2, r0, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	60da      	str	r2, [r3, #12]
 800402c:	e019      	b.n	8004062 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6919      	ldr	r1, [r3, #16]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4413      	add	r3, r2
 800403e:	2207      	movs	r2, #7
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	4019      	ands	r1, r3
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6898      	ldr	r0, [r3, #8]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	4413      	add	r3, r2
 8004056:	fa00 f203 	lsl.w	r2, r0, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b10      	cmp	r3, #16
 8004068:	d003      	beq.n	8004072 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800406e:	2b11      	cmp	r3, #17
 8004070:	d132      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1d      	ldr	r2, [pc, #116]	@ (80040ec <HAL_ADC_ConfigChannel+0x1e4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d125      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d126      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004098:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b10      	cmp	r3, #16
 80040a0:	d11a      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040a2:	4b13      	ldr	r3, [pc, #76]	@ (80040f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a13      	ldr	r2, [pc, #76]	@ (80040f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80040a8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ac:	0c9a      	lsrs	r2, r3, #18
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040b8:	e002      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	3b01      	subs	r3, #1
 80040be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f9      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x1b2>
 80040c6:	e007      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr
 80040ec:	40012400 	.word	0x40012400
 80040f0:	20000004 	.word	0x20000004
 80040f4:	431bde83 	.word	0x431bde83

080040f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d040      	beq.n	8004198 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004126:	4b1f      	ldr	r3, [pc, #124]	@ (80041a4 <ADC_Enable+0xac>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1f      	ldr	r2, [pc, #124]	@ (80041a8 <ADC_Enable+0xb0>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	0c9b      	lsrs	r3, r3, #18
 8004132:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004134:	e002      	b.n	800413c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	3b01      	subs	r3, #1
 800413a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f9      	bne.n	8004136 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004142:	f7ff fbef 	bl	8003924 <HAL_GetTick>
 8004146:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004148:	e01f      	b.n	800418a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800414a:	f7ff fbeb 	bl	8003924 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d918      	bls.n	800418a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b01      	cmp	r3, #1
 8004164:	d011      	beq.n	800418a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416a:	f043 0210 	orr.w	r2, r3, #16
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004176:	f043 0201 	orr.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e007      	b.n	800419a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d1d8      	bne.n	800414a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000004 	.word	0x20000004
 80041a8:	431bde83 	.word	0x431bde83

080041ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d12e      	bne.n	8004224 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041d6:	f7ff fba5 	bl	8003924 <HAL_GetTick>
 80041da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80041dc:	e01b      	b.n	8004216 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041de:	f7ff fba1 	bl	8003924 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d914      	bls.n	8004216 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d10d      	bne.n	8004216 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fe:	f043 0210 	orr.w	r2, r3, #16
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420a:	f043 0201 	orr.w	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e007      	b.n	8004226 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	d0dc      	beq.n	80041de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <__NVIC_SetPriorityGrouping>:
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004240:	4b0c      	ldr	r3, [pc, #48]	@ (8004274 <__NVIC_SetPriorityGrouping+0x44>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800424c:	4013      	ands	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800425c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004262:	4a04      	ldr	r2, [pc, #16]	@ (8004274 <__NVIC_SetPriorityGrouping+0x44>)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	60d3      	str	r3, [r2, #12]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <__NVIC_GetPriorityGrouping>:
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800427c:	4b04      	ldr	r3, [pc, #16]	@ (8004290 <__NVIC_GetPriorityGrouping+0x18>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	f003 0307 	and.w	r3, r3, #7
}
 8004286:	4618      	mov	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <__NVIC_EnableIRQ>:
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	db0b      	blt.n	80042be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	4906      	ldr	r1, [pc, #24]	@ (80042c8 <__NVIC_EnableIRQ+0x34>)
 80042ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2001      	movs	r0, #1
 80042b6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr
 80042c8:	e000e100 	.word	0xe000e100

080042cc <__NVIC_SetPriority>:
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	6039      	str	r1, [r7, #0]
 80042d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	db0a      	blt.n	80042f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	490c      	ldr	r1, [pc, #48]	@ (8004318 <__NVIC_SetPriority+0x4c>)
 80042e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ea:	0112      	lsls	r2, r2, #4
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	440b      	add	r3, r1
 80042f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80042f4:	e00a      	b.n	800430c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4908      	ldr	r1, [pc, #32]	@ (800431c <__NVIC_SetPriority+0x50>)
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	3b04      	subs	r3, #4
 8004304:	0112      	lsls	r2, r2, #4
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	440b      	add	r3, r1
 800430a:	761a      	strb	r2, [r3, #24]
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	e000e100 	.word	0xe000e100
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <NVIC_EncodePriority>:
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	@ 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f1c3 0307 	rsb	r3, r3, #7
 800433a:	2b04      	cmp	r3, #4
 800433c:	bf28      	it	cs
 800433e:	2304      	movcs	r3, #4
 8004340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3304      	adds	r3, #4
 8004346:	2b06      	cmp	r3, #6
 8004348:	d902      	bls.n	8004350 <NVIC_EncodePriority+0x30>
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3b03      	subs	r3, #3
 800434e:	e000      	b.n	8004352 <NVIC_EncodePriority+0x32>
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004354:	f04f 32ff 	mov.w	r2, #4294967295
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43da      	mvns	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	401a      	ands	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004368:	f04f 31ff 	mov.w	r1, #4294967295
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	43d9      	mvns	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004378:	4313      	orrs	r3, r2
}
 800437a:	4618      	mov	r0, r3
 800437c:	3724      	adds	r7, #36	@ 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr

08004384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff ff4f 	bl	8004230 <__NVIC_SetPriorityGrouping>
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800439a:	b580      	push	{r7, lr}
 800439c:	b086      	sub	sp, #24
 800439e:	af00      	add	r7, sp, #0
 80043a0:	4603      	mov	r3, r0
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043ac:	f7ff ff64 	bl	8004278 <__NVIC_GetPriorityGrouping>
 80043b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	6978      	ldr	r0, [r7, #20]
 80043b8:	f7ff ffb2 	bl	8004320 <NVIC_EncodePriority>
 80043bc:	4602      	mov	r2, r0
 80043be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c2:	4611      	mov	r1, r2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff ff81 	bl	80042cc <__NVIC_SetPriority>
}
 80043ca:	bf00      	nop
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	4603      	mov	r3, r0
 80043da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff ff57 	bl	8004294 <__NVIC_EnableIRQ>
}
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b08b      	sub	sp, #44	@ 0x2c
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043fa:	2300      	movs	r3, #0
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80043fe:	2300      	movs	r3, #0
 8004400:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004402:	e169      	b.n	80046d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004404:	2201      	movs	r2, #1
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	4013      	ands	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	429a      	cmp	r2, r3
 800441e:	f040 8158 	bne.w	80046d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4a9a      	ldr	r2, [pc, #616]	@ (8004690 <HAL_GPIO_Init+0x2a0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d05e      	beq.n	80044ea <HAL_GPIO_Init+0xfa>
 800442c:	4a98      	ldr	r2, [pc, #608]	@ (8004690 <HAL_GPIO_Init+0x2a0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d875      	bhi.n	800451e <HAL_GPIO_Init+0x12e>
 8004432:	4a98      	ldr	r2, [pc, #608]	@ (8004694 <HAL_GPIO_Init+0x2a4>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d058      	beq.n	80044ea <HAL_GPIO_Init+0xfa>
 8004438:	4a96      	ldr	r2, [pc, #600]	@ (8004694 <HAL_GPIO_Init+0x2a4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d86f      	bhi.n	800451e <HAL_GPIO_Init+0x12e>
 800443e:	4a96      	ldr	r2, [pc, #600]	@ (8004698 <HAL_GPIO_Init+0x2a8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d052      	beq.n	80044ea <HAL_GPIO_Init+0xfa>
 8004444:	4a94      	ldr	r2, [pc, #592]	@ (8004698 <HAL_GPIO_Init+0x2a8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d869      	bhi.n	800451e <HAL_GPIO_Init+0x12e>
 800444a:	4a94      	ldr	r2, [pc, #592]	@ (800469c <HAL_GPIO_Init+0x2ac>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d04c      	beq.n	80044ea <HAL_GPIO_Init+0xfa>
 8004450:	4a92      	ldr	r2, [pc, #584]	@ (800469c <HAL_GPIO_Init+0x2ac>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d863      	bhi.n	800451e <HAL_GPIO_Init+0x12e>
 8004456:	4a92      	ldr	r2, [pc, #584]	@ (80046a0 <HAL_GPIO_Init+0x2b0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d046      	beq.n	80044ea <HAL_GPIO_Init+0xfa>
 800445c:	4a90      	ldr	r2, [pc, #576]	@ (80046a0 <HAL_GPIO_Init+0x2b0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d85d      	bhi.n	800451e <HAL_GPIO_Init+0x12e>
 8004462:	2b12      	cmp	r3, #18
 8004464:	d82a      	bhi.n	80044bc <HAL_GPIO_Init+0xcc>
 8004466:	2b12      	cmp	r3, #18
 8004468:	d859      	bhi.n	800451e <HAL_GPIO_Init+0x12e>
 800446a:	a201      	add	r2, pc, #4	@ (adr r2, 8004470 <HAL_GPIO_Init+0x80>)
 800446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004470:	080044eb 	.word	0x080044eb
 8004474:	080044c5 	.word	0x080044c5
 8004478:	080044d7 	.word	0x080044d7
 800447c:	08004519 	.word	0x08004519
 8004480:	0800451f 	.word	0x0800451f
 8004484:	0800451f 	.word	0x0800451f
 8004488:	0800451f 	.word	0x0800451f
 800448c:	0800451f 	.word	0x0800451f
 8004490:	0800451f 	.word	0x0800451f
 8004494:	0800451f 	.word	0x0800451f
 8004498:	0800451f 	.word	0x0800451f
 800449c:	0800451f 	.word	0x0800451f
 80044a0:	0800451f 	.word	0x0800451f
 80044a4:	0800451f 	.word	0x0800451f
 80044a8:	0800451f 	.word	0x0800451f
 80044ac:	0800451f 	.word	0x0800451f
 80044b0:	0800451f 	.word	0x0800451f
 80044b4:	080044cd 	.word	0x080044cd
 80044b8:	080044e1 	.word	0x080044e1
 80044bc:	4a79      	ldr	r2, [pc, #484]	@ (80046a4 <HAL_GPIO_Init+0x2b4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044c2:	e02c      	b.n	800451e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	623b      	str	r3, [r7, #32]
          break;
 80044ca:	e029      	b.n	8004520 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	3304      	adds	r3, #4
 80044d2:	623b      	str	r3, [r7, #32]
          break;
 80044d4:	e024      	b.n	8004520 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	3308      	adds	r3, #8
 80044dc:	623b      	str	r3, [r7, #32]
          break;
 80044de:	e01f      	b.n	8004520 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	330c      	adds	r3, #12
 80044e6:	623b      	str	r3, [r7, #32]
          break;
 80044e8:	e01a      	b.n	8004520 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d102      	bne.n	80044f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044f2:	2304      	movs	r3, #4
 80044f4:	623b      	str	r3, [r7, #32]
          break;
 80044f6:	e013      	b.n	8004520 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d105      	bne.n	800450c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004500:	2308      	movs	r3, #8
 8004502:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	611a      	str	r2, [r3, #16]
          break;
 800450a:	e009      	b.n	8004520 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800450c:	2308      	movs	r3, #8
 800450e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	615a      	str	r2, [r3, #20]
          break;
 8004516:	e003      	b.n	8004520 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004518:	2300      	movs	r3, #0
 800451a:	623b      	str	r3, [r7, #32]
          break;
 800451c:	e000      	b.n	8004520 <HAL_GPIO_Init+0x130>
          break;
 800451e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2bff      	cmp	r3, #255	@ 0xff
 8004524:	d801      	bhi.n	800452a <HAL_GPIO_Init+0x13a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	e001      	b.n	800452e <HAL_GPIO_Init+0x13e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3304      	adds	r3, #4
 800452e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	2bff      	cmp	r3, #255	@ 0xff
 8004534:	d802      	bhi.n	800453c <HAL_GPIO_Init+0x14c>
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	e002      	b.n	8004542 <HAL_GPIO_Init+0x152>
 800453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453e:	3b08      	subs	r3, #8
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	210f      	movs	r1, #15
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	fa01 f303 	lsl.w	r3, r1, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	401a      	ands	r2, r3
 8004554:	6a39      	ldr	r1, [r7, #32]
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	fa01 f303 	lsl.w	r3, r1, r3
 800455c:	431a      	orrs	r2, r3
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 80b1 	beq.w	80046d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004570:	4b4d      	ldr	r3, [pc, #308]	@ (80046a8 <HAL_GPIO_Init+0x2b8>)
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	4a4c      	ldr	r2, [pc, #304]	@ (80046a8 <HAL_GPIO_Init+0x2b8>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	6193      	str	r3, [r2, #24]
 800457c:	4b4a      	ldr	r3, [pc, #296]	@ (80046a8 <HAL_GPIO_Init+0x2b8>)
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004588:	4a48      	ldr	r2, [pc, #288]	@ (80046ac <HAL_GPIO_Init+0x2bc>)
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	089b      	lsrs	r3, r3, #2
 800458e:	3302      	adds	r3, #2
 8004590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004594:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	220f      	movs	r2, #15
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	43db      	mvns	r3, r3
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4013      	ands	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a40      	ldr	r2, [pc, #256]	@ (80046b0 <HAL_GPIO_Init+0x2c0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d013      	beq.n	80045dc <HAL_GPIO_Init+0x1ec>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a3f      	ldr	r2, [pc, #252]	@ (80046b4 <HAL_GPIO_Init+0x2c4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00d      	beq.n	80045d8 <HAL_GPIO_Init+0x1e8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3e      	ldr	r2, [pc, #248]	@ (80046b8 <HAL_GPIO_Init+0x2c8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <HAL_GPIO_Init+0x1e4>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a3d      	ldr	r2, [pc, #244]	@ (80046bc <HAL_GPIO_Init+0x2cc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d101      	bne.n	80045d0 <HAL_GPIO_Init+0x1e0>
 80045cc:	2303      	movs	r3, #3
 80045ce:	e006      	b.n	80045de <HAL_GPIO_Init+0x1ee>
 80045d0:	2304      	movs	r3, #4
 80045d2:	e004      	b.n	80045de <HAL_GPIO_Init+0x1ee>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e002      	b.n	80045de <HAL_GPIO_Init+0x1ee>
 80045d8:	2301      	movs	r3, #1
 80045da:	e000      	b.n	80045de <HAL_GPIO_Init+0x1ee>
 80045dc:	2300      	movs	r3, #0
 80045de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e0:	f002 0203 	and.w	r2, r2, #3
 80045e4:	0092      	lsls	r2, r2, #2
 80045e6:	4093      	lsls	r3, r2
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80045ee:	492f      	ldr	r1, [pc, #188]	@ (80046ac <HAL_GPIO_Init+0x2bc>)
 80045f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f2:	089b      	lsrs	r3, r3, #2
 80045f4:	3302      	adds	r3, #2
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d006      	beq.n	8004616 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004608:	4b2d      	ldr	r3, [pc, #180]	@ (80046c0 <HAL_GPIO_Init+0x2d0>)
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	492c      	ldr	r1, [pc, #176]	@ (80046c0 <HAL_GPIO_Init+0x2d0>)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	4313      	orrs	r3, r2
 8004612:	608b      	str	r3, [r1, #8]
 8004614:	e006      	b.n	8004624 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004616:	4b2a      	ldr	r3, [pc, #168]	@ (80046c0 <HAL_GPIO_Init+0x2d0>)
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	43db      	mvns	r3, r3
 800461e:	4928      	ldr	r1, [pc, #160]	@ (80046c0 <HAL_GPIO_Init+0x2d0>)
 8004620:	4013      	ands	r3, r2
 8004622:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d006      	beq.n	800463e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004630:	4b23      	ldr	r3, [pc, #140]	@ (80046c0 <HAL_GPIO_Init+0x2d0>)
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	4922      	ldr	r1, [pc, #136]	@ (80046c0 <HAL_GPIO_Init+0x2d0>)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	4313      	orrs	r3, r2
 800463a:	60cb      	str	r3, [r1, #12]
 800463c:	e006      	b.n	800464c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800463e:	4b20      	ldr	r3, [pc, #128]	@ (80046c0 <HAL_GPIO_Init+0x2d0>)
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	43db      	mvns	r3, r3
 8004646:	491e      	ldr	r1, [pc, #120]	@ (80046c0 <HAL_GPIO_Init+0x2d0>)
 8004648:	4013      	ands	r3, r2
 800464a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d006      	beq.n	8004666 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004658:	4b19      	ldr	r3, [pc, #100]	@ (80046c0 <HAL_GPIO_Init+0x2d0>)
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	4918      	ldr	r1, [pc, #96]	@ (80046c0 <HAL_GPIO_Init+0x2d0>)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	4313      	orrs	r3, r2
 8004662:	604b      	str	r3, [r1, #4]
 8004664:	e006      	b.n	8004674 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004666:	4b16      	ldr	r3, [pc, #88]	@ (80046c0 <HAL_GPIO_Init+0x2d0>)
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	43db      	mvns	r3, r3
 800466e:	4914      	ldr	r1, [pc, #80]	@ (80046c0 <HAL_GPIO_Init+0x2d0>)
 8004670:	4013      	ands	r3, r2
 8004672:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d021      	beq.n	80046c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004680:	4b0f      	ldr	r3, [pc, #60]	@ (80046c0 <HAL_GPIO_Init+0x2d0>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	490e      	ldr	r1, [pc, #56]	@ (80046c0 <HAL_GPIO_Init+0x2d0>)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	4313      	orrs	r3, r2
 800468a:	600b      	str	r3, [r1, #0]
 800468c:	e021      	b.n	80046d2 <HAL_GPIO_Init+0x2e2>
 800468e:	bf00      	nop
 8004690:	10320000 	.word	0x10320000
 8004694:	10310000 	.word	0x10310000
 8004698:	10220000 	.word	0x10220000
 800469c:	10210000 	.word	0x10210000
 80046a0:	10120000 	.word	0x10120000
 80046a4:	10110000 	.word	0x10110000
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40010000 	.word	0x40010000
 80046b0:	40010800 	.word	0x40010800
 80046b4:	40010c00 	.word	0x40010c00
 80046b8:	40011000 	.word	0x40011000
 80046bc:	40011400 	.word	0x40011400
 80046c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046c4:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <HAL_GPIO_Init+0x304>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	43db      	mvns	r3, r3
 80046cc:	4909      	ldr	r1, [pc, #36]	@ (80046f4 <HAL_GPIO_Init+0x304>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	3301      	adds	r3, #1
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046de:	fa22 f303 	lsr.w	r3, r2, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f47f ae8e 	bne.w	8004404 <HAL_GPIO_Init+0x14>
  }
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	372c      	adds	r7, #44	@ 0x2c
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr
 80046f4:	40010400 	.word	0x40010400

080046f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	887b      	ldrh	r3, [r7, #2]
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
 8004714:	e001      	b.n	800471a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004716:	2300      	movs	r3, #0
 8004718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800471a:	7bfb      	ldrb	r3, [r7, #15]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr

08004726 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	460b      	mov	r3, r1
 8004730:	807b      	strh	r3, [r7, #2]
 8004732:	4613      	mov	r3, r2
 8004734:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004736:	787b      	ldrb	r3, [r7, #1]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800473c:	887a      	ldrh	r2, [r7, #2]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004742:	e003      	b.n	800474c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004744:	887b      	ldrh	r3, [r7, #2]
 8004746:	041a      	lsls	r2, r3, #16
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	611a      	str	r2, [r3, #16]
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr
	...

08004758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e12b      	b.n	80049c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fd ff30 	bl	80025e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2224      	movs	r2, #36	@ 0x24
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047bc:	f001 fc90 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 80047c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4a81      	ldr	r2, [pc, #516]	@ (80049cc <HAL_I2C_Init+0x274>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d807      	bhi.n	80047dc <HAL_I2C_Init+0x84>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4a80      	ldr	r2, [pc, #512]	@ (80049d0 <HAL_I2C_Init+0x278>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	bf94      	ite	ls
 80047d4:	2301      	movls	r3, #1
 80047d6:	2300      	movhi	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	e006      	b.n	80047ea <HAL_I2C_Init+0x92>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4a7d      	ldr	r2, [pc, #500]	@ (80049d4 <HAL_I2C_Init+0x27c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	bf94      	ite	ls
 80047e4:	2301      	movls	r3, #1
 80047e6:	2300      	movhi	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0e7      	b.n	80049c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4a78      	ldr	r2, [pc, #480]	@ (80049d8 <HAL_I2C_Init+0x280>)
 80047f6:	fba2 2303 	umull	r2, r3, r2, r3
 80047fa:	0c9b      	lsrs	r3, r3, #18
 80047fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4a6a      	ldr	r2, [pc, #424]	@ (80049cc <HAL_I2C_Init+0x274>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d802      	bhi.n	800482c <HAL_I2C_Init+0xd4>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	3301      	adds	r3, #1
 800482a:	e009      	b.n	8004840 <HAL_I2C_Init+0xe8>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004832:	fb02 f303 	mul.w	r3, r2, r3
 8004836:	4a69      	ldr	r2, [pc, #420]	@ (80049dc <HAL_I2C_Init+0x284>)
 8004838:	fba2 2303 	umull	r2, r3, r2, r3
 800483c:	099b      	lsrs	r3, r3, #6
 800483e:	3301      	adds	r3, #1
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	430b      	orrs	r3, r1
 8004846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004852:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	495c      	ldr	r1, [pc, #368]	@ (80049cc <HAL_I2C_Init+0x274>)
 800485c:	428b      	cmp	r3, r1
 800485e:	d819      	bhi.n	8004894 <HAL_I2C_Init+0x13c>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1e59      	subs	r1, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	fbb1 f3f3 	udiv	r3, r1, r3
 800486e:	1c59      	adds	r1, r3, #1
 8004870:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004874:	400b      	ands	r3, r1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_I2C_Init+0x138>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1e59      	subs	r1, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	fbb1 f3f3 	udiv	r3, r1, r3
 8004888:	3301      	adds	r3, #1
 800488a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488e:	e051      	b.n	8004934 <HAL_I2C_Init+0x1dc>
 8004890:	2304      	movs	r3, #4
 8004892:	e04f      	b.n	8004934 <HAL_I2C_Init+0x1dc>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d111      	bne.n	80048c0 <HAL_I2C_Init+0x168>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	1e58      	subs	r0, r3, #1
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6859      	ldr	r1, [r3, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	440b      	add	r3, r1
 80048aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ae:	3301      	adds	r3, #1
 80048b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	bf0c      	ite	eq
 80048b8:	2301      	moveq	r3, #1
 80048ba:	2300      	movne	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	e012      	b.n	80048e6 <HAL_I2C_Init+0x18e>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	1e58      	subs	r0, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6859      	ldr	r1, [r3, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	0099      	lsls	r1, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d6:	3301      	adds	r3, #1
 80048d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf0c      	ite	eq
 80048e0:	2301      	moveq	r3, #1
 80048e2:	2300      	movne	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <HAL_I2C_Init+0x196>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e022      	b.n	8004934 <HAL_I2C_Init+0x1dc>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10e      	bne.n	8004914 <HAL_I2C_Init+0x1bc>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1e58      	subs	r0, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6859      	ldr	r1, [r3, #4]
 80048fe:	460b      	mov	r3, r1
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	440b      	add	r3, r1
 8004904:	fbb0 f3f3 	udiv	r3, r0, r3
 8004908:	3301      	adds	r3, #1
 800490a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004912:	e00f      	b.n	8004934 <HAL_I2C_Init+0x1dc>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1e58      	subs	r0, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6859      	ldr	r1, [r3, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	0099      	lsls	r1, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	fbb0 f3f3 	udiv	r3, r0, r3
 800492a:	3301      	adds	r3, #1
 800492c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004930:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	6809      	ldr	r1, [r1, #0]
 8004938:	4313      	orrs	r3, r2
 800493a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69da      	ldr	r2, [r3, #28]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004962:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6911      	ldr	r1, [r2, #16]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68d2      	ldr	r2, [r2, #12]
 800496e:	4311      	orrs	r1, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	430b      	orrs	r3, r1
 8004976:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695a      	ldr	r2, [r3, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	000186a0 	.word	0x000186a0
 80049d0:	001e847f 	.word	0x001e847f
 80049d4:	003d08ff 	.word	0x003d08ff
 80049d8:	431bde83 	.word	0x431bde83
 80049dc:	10624dd3 	.word	0x10624dd3

080049e0 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	607a      	str	r2, [r7, #4]
 80049ea:	461a      	mov	r2, r3
 80049ec:	460b      	mov	r3, r1
 80049ee:	817b      	strh	r3, [r7, #10]
 80049f0:	4613      	mov	r3, r2
 80049f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	f040 8081 	bne.w	8004b08 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a06:	4b43      	ldr	r3, [pc, #268]	@ (8004b14 <HAL_I2C_Master_Transmit_IT+0x134>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	08db      	lsrs	r3, r3, #3
 8004a0c:	4a42      	ldr	r2, [pc, #264]	@ (8004b18 <HAL_I2C_Master_Transmit_IT+0x138>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	0a1a      	lsrs	r2, r3, #8
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009a      	lsls	r2, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d112      	bne.n	8004a52 <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a46:	f043 0220 	orr.w	r2, r3, #32
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e05b      	b.n	8004b0a <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d0df      	beq.n	8004a20 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_I2C_Master_Transmit_IT+0x8e>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e04d      	b.n	8004b0a <HAL_I2C_Master_Transmit_IT+0x12a>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d007      	beq.n	8004a94 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aa2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2221      	movs	r2, #33	@ 0x21
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2210      	movs	r2, #16
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	893a      	ldrh	r2, [r7, #8]
 8004ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4a12      	ldr	r2, [pc, #72]	@ (8004b1c <HAL_I2C_Master_Transmit_IT+0x13c>)
 8004ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004ad6:	897a      	ldrh	r2, [r7, #10]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004af2:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b02:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	e000      	b.n	8004b0a <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004b08:	2302      	movs	r3, #2
  }
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr
 8004b14:	20000004 	.word	0x20000004
 8004b18:	14f8b589 	.word	0x14f8b589
 8004b1c:	ffff0000 	.word	0xffff0000

08004b20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	4608      	mov	r0, r1
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4603      	mov	r3, r0
 8004b30:	817b      	strh	r3, [r7, #10]
 8004b32:	460b      	mov	r3, r1
 8004b34:	813b      	strh	r3, [r7, #8]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b3a:	f7fe fef3 	bl	8003924 <HAL_GetTick>
 8004b3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	f040 80d9 	bne.w	8004d00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	2319      	movs	r3, #25
 8004b54:	2201      	movs	r2, #1
 8004b56:	496d      	ldr	r1, [pc, #436]	@ (8004d0c <HAL_I2C_Mem_Write+0x1ec>)
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fcc1 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
 8004b66:	e0cc      	b.n	8004d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_I2C_Mem_Write+0x56>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e0c5      	b.n	8004d02 <HAL_I2C_Mem_Write+0x1e2>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d007      	beq.n	8004b9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004baa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2221      	movs	r2, #33	@ 0x21
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2240      	movs	r2, #64	@ 0x40
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a3a      	ldr	r2, [r7, #32]
 8004bc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a4d      	ldr	r2, [pc, #308]	@ (8004d10 <HAL_I2C_Mem_Write+0x1f0>)
 8004bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bde:	88f8      	ldrh	r0, [r7, #6]
 8004be0:	893a      	ldrh	r2, [r7, #8]
 8004be2:	8979      	ldrh	r1, [r7, #10]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	4603      	mov	r3, r0
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 faf8 	bl	80051e4 <I2C_RequestMemoryWrite>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d052      	beq.n	8004ca0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e081      	b.n	8004d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fd86 	bl	8005714 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00d      	beq.n	8004c2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d107      	bne.n	8004c26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e06b      	b.n	8004d02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	781a      	ldrb	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d11b      	bne.n	8004ca0 <HAL_I2C_Mem_Write+0x180>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d017      	beq.n	8004ca0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	781a      	ldrb	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1aa      	bne.n	8004bfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 fd79 	bl	80057a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00d      	beq.n	8004cd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d107      	bne.n	8004cd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e016      	b.n	8004d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	e000      	b.n	8004d02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d00:	2302      	movs	r3, #2
  }
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	00100002 	.word	0x00100002
 8004d10:	ffff0000 	.word	0xffff0000

08004d14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08c      	sub	sp, #48	@ 0x30
 8004d18:	af02      	add	r7, sp, #8
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	4608      	mov	r0, r1
 8004d1e:	4611      	mov	r1, r2
 8004d20:	461a      	mov	r2, r3
 8004d22:	4603      	mov	r3, r0
 8004d24:	817b      	strh	r3, [r7, #10]
 8004d26:	460b      	mov	r3, r1
 8004d28:	813b      	strh	r3, [r7, #8]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d32:	f7fe fdf7 	bl	8003924 <HAL_GetTick>
 8004d36:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	f040 8244 	bne.w	80051ce <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	2319      	movs	r3, #25
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	4982      	ldr	r1, [pc, #520]	@ (8004f58 <HAL_I2C_Mem_Read+0x244>)
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fbc5 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e237      	b.n	80051d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_I2C_Mem_Read+0x5a>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e230      	b.n	80051d0 <HAL_I2C_Mem_Read+0x4bc>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d007      	beq.n	8004d94 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004da2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2222      	movs	r2, #34	@ 0x22
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2240      	movs	r2, #64	@ 0x40
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a62      	ldr	r2, [pc, #392]	@ (8004f5c <HAL_I2C_Mem_Read+0x248>)
 8004dd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dd6:	88f8      	ldrh	r0, [r7, #6]
 8004dd8:	893a      	ldrh	r2, [r7, #8]
 8004dda:	8979      	ldrh	r1, [r7, #10]
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	4603      	mov	r3, r0
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 fa92 	bl	8005310 <I2C_RequestMemoryRead>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e1ec      	b.n	80051d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d113      	bne.n	8004e26 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	61fb      	str	r3, [r7, #28]
 8004e12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	e1c0      	b.n	80051a8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d11e      	bne.n	8004e6c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e3e:	b672      	cpsid	i
}
 8004e40:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e68:	b662      	cpsie	i
}
 8004e6a:	e035      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d11e      	bne.n	8004eb2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e84:	b672      	cpsid	i
}
 8004e86:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004eae:	b662      	cpsie	i
}
 8004eb0:	e012      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ec0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004ed8:	e166      	b.n	80051a8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	f200 811f 	bhi.w	8005122 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d123      	bne.n	8004f34 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 fc9f 	bl	8005834 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e167      	b.n	80051d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f32:	e139      	b.n	80051a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d152      	bne.n	8004fe2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f42:	2200      	movs	r2, #0
 8004f44:	4906      	ldr	r1, [pc, #24]	@ (8004f60 <HAL_I2C_Mem_Read+0x24c>)
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 faca 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d008      	beq.n	8004f64 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e13c      	b.n	80051d0 <HAL_I2C_Mem_Read+0x4bc>
 8004f56:	bf00      	nop
 8004f58:	00100002 	.word	0x00100002
 8004f5c:	ffff0000 	.word	0xffff0000
 8004f60:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004f64:	b672      	cpsid	i
}
 8004f66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004faa:	b662      	cpsie	i
}
 8004fac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004fe0:	e0e2      	b.n	80051a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe8:	2200      	movs	r2, #0
 8004fea:	497b      	ldr	r1, [pc, #492]	@ (80051d8 <HAL_I2C_Mem_Read+0x4c4>)
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 fa77 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0e9      	b.n	80051d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800500a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800500c:	b672      	cpsid	i
}
 800500e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005042:	4b66      	ldr	r3, [pc, #408]	@ (80051dc <HAL_I2C_Mem_Read+0x4c8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	08db      	lsrs	r3, r3, #3
 8005048:	4a65      	ldr	r2, [pc, #404]	@ (80051e0 <HAL_I2C_Mem_Read+0x4cc>)
 800504a:	fba2 2303 	umull	r2, r3, r2, r3
 800504e:	0a1a      	lsrs	r2, r3, #8
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	00da      	lsls	r2, r3, #3
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	3b01      	subs	r3, #1
 8005060:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d118      	bne.n	800509a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005082:	f043 0220 	orr.w	r2, r3, #32
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800508a:	b662      	cpsie	i
}
 800508c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e09a      	b.n	80051d0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d1d9      	bne.n	800505c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80050ea:	b662      	cpsie	i
}
 80050ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005120:	e042      	b.n	80051a8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005124:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 fb84 	bl	8005834 <I2C_WaitOnRXNEFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e04c      	b.n	80051d0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b04      	cmp	r3, #4
 8005174:	d118      	bne.n	80051a8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f47f ae94 	bne.w	8004eda <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e000      	b.n	80051d0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80051ce:	2302      	movs	r3, #2
  }
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3728      	adds	r7, #40	@ 0x28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	00010004 	.word	0x00010004
 80051dc:	20000004 	.word	0x20000004
 80051e0:	14f8b589 	.word	0x14f8b589

080051e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	4608      	mov	r0, r1
 80051ee:	4611      	mov	r1, r2
 80051f0:	461a      	mov	r2, r3
 80051f2:	4603      	mov	r3, r0
 80051f4:	817b      	strh	r3, [r7, #10]
 80051f6:	460b      	mov	r3, r1
 80051f8:	813b      	strh	r3, [r7, #8]
 80051fa:	4613      	mov	r3, r2
 80051fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800520c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	2200      	movs	r2, #0
 8005216:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f960 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00d      	beq.n	8005242 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005230:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005234:	d103      	bne.n	800523e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800523c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e05f      	b.n	8005302 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005242:	897b      	ldrh	r3, [r7, #10]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005250:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	6a3a      	ldr	r2, [r7, #32]
 8005256:	492d      	ldr	r1, [pc, #180]	@ (800530c <I2C_RequestMemoryWrite+0x128>)
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f9bb 	bl	80055d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e04c      	b.n	8005302 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800527e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005280:	6a39      	ldr	r1, [r7, #32]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fa46 	bl	8005714 <I2C_WaitOnTXEFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00d      	beq.n	80052aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005292:	2b04      	cmp	r3, #4
 8005294:	d107      	bne.n	80052a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e02b      	b.n	8005302 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d105      	bne.n	80052bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052b0:	893b      	ldrh	r3, [r7, #8]
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	611a      	str	r2, [r3, #16]
 80052ba:	e021      	b.n	8005300 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052bc:	893b      	ldrh	r3, [r7, #8]
 80052be:	0a1b      	lsrs	r3, r3, #8
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052cc:	6a39      	ldr	r1, [r7, #32]
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 fa20 	bl	8005714 <I2C_WaitOnTXEFlagUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00d      	beq.n	80052f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d107      	bne.n	80052f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e005      	b.n	8005302 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052f6:	893b      	ldrh	r3, [r7, #8]
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	00010002 	.word	0x00010002

08005310 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	4608      	mov	r0, r1
 800531a:	4611      	mov	r1, r2
 800531c:	461a      	mov	r2, r3
 800531e:	4603      	mov	r3, r0
 8005320:	817b      	strh	r3, [r7, #10]
 8005322:	460b      	mov	r3, r1
 8005324:	813b      	strh	r3, [r7, #8]
 8005326:	4613      	mov	r3, r2
 8005328:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005338:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005348:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	2200      	movs	r2, #0
 8005352:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f8c2 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00d      	beq.n	800537e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800536c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005370:	d103      	bne.n	800537a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005378:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e0aa      	b.n	80054d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800537e:	897b      	ldrh	r3, [r7, #10]
 8005380:	b2db      	uxtb	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800538c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	6a3a      	ldr	r2, [r7, #32]
 8005392:	4952      	ldr	r1, [pc, #328]	@ (80054dc <I2C_RequestMemoryRead+0x1cc>)
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f91d 	bl	80055d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e097      	b.n	80054d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053bc:	6a39      	ldr	r1, [r7, #32]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f9a8 	bl	8005714 <I2C_WaitOnTXEFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d107      	bne.n	80053e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e076      	b.n	80054d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d105      	bne.n	80053f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053ec:	893b      	ldrh	r3, [r7, #8]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	611a      	str	r2, [r3, #16]
 80053f6:	e021      	b.n	800543c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053f8:	893b      	ldrh	r3, [r7, #8]
 80053fa:	0a1b      	lsrs	r3, r3, #8
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005408:	6a39      	ldr	r1, [r7, #32]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f982 	bl	8005714 <I2C_WaitOnTXEFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00d      	beq.n	8005432 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	2b04      	cmp	r3, #4
 800541c:	d107      	bne.n	800542e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800542c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e050      	b.n	80054d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005432:	893b      	ldrh	r3, [r7, #8]
 8005434:	b2da      	uxtb	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800543c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800543e:	6a39      	ldr	r1, [r7, #32]
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f967 	bl	8005714 <I2C_WaitOnTXEFlagUntilTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00d      	beq.n	8005468 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005450:	2b04      	cmp	r3, #4
 8005452:	d107      	bne.n	8005464 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005462:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e035      	b.n	80054d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005476:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	2200      	movs	r2, #0
 8005480:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f82b 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00d      	beq.n	80054ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800549a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800549e:	d103      	bne.n	80054a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e013      	b.n	80054d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054ac:	897b      	ldrh	r3, [r7, #10]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054be:	6a3a      	ldr	r2, [r7, #32]
 80054c0:	4906      	ldr	r1, [pc, #24]	@ (80054dc <I2C_RequestMemoryRead+0x1cc>)
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f886 	bl	80055d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	00010002 	.word	0x00010002

080054e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	4613      	mov	r3, r2
 80054ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054f0:	e048      	b.n	8005584 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f8:	d044      	beq.n	8005584 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fa:	f7fe fa13 	bl	8003924 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d302      	bcc.n	8005510 <I2C_WaitOnFlagUntilTimeout+0x30>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d139      	bne.n	8005584 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	0c1b      	lsrs	r3, r3, #16
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b01      	cmp	r3, #1
 8005518:	d10d      	bne.n	8005536 <I2C_WaitOnFlagUntilTimeout+0x56>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	43da      	mvns	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4013      	ands	r3, r2
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	bf0c      	ite	eq
 800552c:	2301      	moveq	r3, #1
 800552e:	2300      	movne	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	461a      	mov	r2, r3
 8005534:	e00c      	b.n	8005550 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	43da      	mvns	r2, r3
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	4013      	ands	r3, r2
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	bf0c      	ite	eq
 8005548:	2301      	moveq	r3, #1
 800554a:	2300      	movne	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	461a      	mov	r2, r3
 8005550:	79fb      	ldrb	r3, [r7, #7]
 8005552:	429a      	cmp	r2, r3
 8005554:	d116      	bne.n	8005584 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005570:	f043 0220 	orr.w	r2, r3, #32
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e023      	b.n	80055cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	0c1b      	lsrs	r3, r3, #16
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b01      	cmp	r3, #1
 800558c:	d10d      	bne.n	80055aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	43da      	mvns	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	4013      	ands	r3, r2
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf0c      	ite	eq
 80055a0:	2301      	moveq	r3, #1
 80055a2:	2300      	movne	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	e00c      	b.n	80055c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	43da      	mvns	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4013      	ands	r3, r2
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	bf0c      	ite	eq
 80055bc:	2301      	moveq	r3, #1
 80055be:	2300      	movne	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d093      	beq.n	80054f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055e2:	e071      	b.n	80056c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055f2:	d123      	bne.n	800563c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005602:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800560c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005628:	f043 0204 	orr.w	r2, r3, #4
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e067      	b.n	800570c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005642:	d041      	beq.n	80056c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005644:	f7fe f96e 	bl	8003924 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	d302      	bcc.n	800565a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d136      	bne.n	80056c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	0c1b      	lsrs	r3, r3, #16
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	d10c      	bne.n	800567e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	43da      	mvns	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4013      	ands	r3, r2
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	bf14      	ite	ne
 8005676:	2301      	movne	r3, #1
 8005678:	2300      	moveq	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	e00b      	b.n	8005696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	43da      	mvns	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	4013      	ands	r3, r2
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	bf14      	ite	ne
 8005690:	2301      	movne	r3, #1
 8005692:	2300      	moveq	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d016      	beq.n	80056c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b4:	f043 0220 	orr.w	r2, r3, #32
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e021      	b.n	800570c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	0c1b      	lsrs	r3, r3, #16
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d10c      	bne.n	80056ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	43da      	mvns	r2, r3
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4013      	ands	r3, r2
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	bf14      	ite	ne
 80056e4:	2301      	movne	r3, #1
 80056e6:	2300      	moveq	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	e00b      	b.n	8005704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	43da      	mvns	r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4013      	ands	r3, r2
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bf14      	ite	ne
 80056fe:	2301      	movne	r3, #1
 8005700:	2300      	moveq	r3, #0
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	f47f af6d 	bne.w	80055e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005720:	e034      	b.n	800578c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f8e3 	bl	80058ee <I2C_IsAcknowledgeFailed>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e034      	b.n	800579c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005738:	d028      	beq.n	800578c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800573a:	f7fe f8f3 	bl	8003924 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	429a      	cmp	r2, r3
 8005748:	d302      	bcc.n	8005750 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d11d      	bne.n	800578c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575a:	2b80      	cmp	r3, #128	@ 0x80
 800575c:	d016      	beq.n	800578c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005778:	f043 0220 	orr.w	r2, r3, #32
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e007      	b.n	800579c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005796:	2b80      	cmp	r3, #128	@ 0x80
 8005798:	d1c3      	bne.n	8005722 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057b0:	e034      	b.n	800581c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 f89b 	bl	80058ee <I2C_IsAcknowledgeFailed>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e034      	b.n	800582c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c8:	d028      	beq.n	800581c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ca:	f7fe f8ab 	bl	8003924 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d302      	bcc.n	80057e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d11d      	bne.n	800581c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d016      	beq.n	800581c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005808:	f043 0220 	orr.w	r2, r3, #32
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e007      	b.n	800582c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b04      	cmp	r3, #4
 8005828:	d1c3      	bne.n	80057b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005840:	e049      	b.n	80058d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	f003 0310 	and.w	r3, r3, #16
 800584c:	2b10      	cmp	r3, #16
 800584e:	d119      	bne.n	8005884 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0210 	mvn.w	r2, #16
 8005858:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e030      	b.n	80058e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005884:	f7fe f84e 	bl	8003924 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	429a      	cmp	r2, r3
 8005892:	d302      	bcc.n	800589a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d11d      	bne.n	80058d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a4:	2b40      	cmp	r3, #64	@ 0x40
 80058a6:	d016      	beq.n	80058d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c2:	f043 0220 	orr.w	r2, r3, #32
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e007      	b.n	80058e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e0:	2b40      	cmp	r3, #64	@ 0x40
 80058e2:	d1ae      	bne.n	8005842 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005904:	d11b      	bne.n	800593e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800590e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592a:	f043 0204 	orr.w	r2, r3, #4
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	bc80      	pop	{r7}
 8005948:	4770      	bx	lr
	...

0800594c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e272      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 8087 	beq.w	8005a7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800596c:	4b92      	ldr	r3, [pc, #584]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f003 030c 	and.w	r3, r3, #12
 8005974:	2b04      	cmp	r3, #4
 8005976:	d00c      	beq.n	8005992 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005978:	4b8f      	ldr	r3, [pc, #572]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f003 030c 	and.w	r3, r3, #12
 8005980:	2b08      	cmp	r3, #8
 8005982:	d112      	bne.n	80059aa <HAL_RCC_OscConfig+0x5e>
 8005984:	4b8c      	ldr	r3, [pc, #560]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800598c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005990:	d10b      	bne.n	80059aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005992:	4b89      	ldr	r3, [pc, #548]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d06c      	beq.n	8005a78 <HAL_RCC_OscConfig+0x12c>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d168      	bne.n	8005a78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e24c      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b2:	d106      	bne.n	80059c2 <HAL_RCC_OscConfig+0x76>
 80059b4:	4b80      	ldr	r3, [pc, #512]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a7f      	ldr	r2, [pc, #508]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 80059ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	e02e      	b.n	8005a20 <HAL_RCC_OscConfig+0xd4>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10c      	bne.n	80059e4 <HAL_RCC_OscConfig+0x98>
 80059ca:	4b7b      	ldr	r3, [pc, #492]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a7a      	ldr	r2, [pc, #488]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 80059d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	4b78      	ldr	r3, [pc, #480]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a77      	ldr	r2, [pc, #476]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 80059dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	e01d      	b.n	8005a20 <HAL_RCC_OscConfig+0xd4>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059ec:	d10c      	bne.n	8005a08 <HAL_RCC_OscConfig+0xbc>
 80059ee:	4b72      	ldr	r3, [pc, #456]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a71      	ldr	r2, [pc, #452]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 80059f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	4b6f      	ldr	r3, [pc, #444]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a6e      	ldr	r2, [pc, #440]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	e00b      	b.n	8005a20 <HAL_RCC_OscConfig+0xd4>
 8005a08:	4b6b      	ldr	r3, [pc, #428]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a6a      	ldr	r2, [pc, #424]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	4b68      	ldr	r3, [pc, #416]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a67      	ldr	r2, [pc, #412]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005a1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d013      	beq.n	8005a50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a28:	f7fd ff7c 	bl	8003924 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a30:	f7fd ff78 	bl	8003924 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b64      	cmp	r3, #100	@ 0x64
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e200      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a42:	4b5d      	ldr	r3, [pc, #372]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0f0      	beq.n	8005a30 <HAL_RCC_OscConfig+0xe4>
 8005a4e:	e014      	b.n	8005a7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a50:	f7fd ff68 	bl	8003924 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a58:	f7fd ff64 	bl	8003924 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b64      	cmp	r3, #100	@ 0x64
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e1ec      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a6a:	4b53      	ldr	r3, [pc, #332]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1f0      	bne.n	8005a58 <HAL_RCC_OscConfig+0x10c>
 8005a76:	e000      	b.n	8005a7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d063      	beq.n	8005b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a86:	4b4c      	ldr	r3, [pc, #304]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f003 030c 	and.w	r3, r3, #12
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00b      	beq.n	8005aaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005a92:	4b49      	ldr	r3, [pc, #292]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f003 030c 	and.w	r3, r3, #12
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d11c      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x18c>
 8005a9e:	4b46      	ldr	r3, [pc, #280]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d116      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aaa:	4b43      	ldr	r3, [pc, #268]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d005      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x176>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d001      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e1c0      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	4939      	ldr	r1, [pc, #228]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ad6:	e03a      	b.n	8005b4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d020      	beq.n	8005b22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ae0:	4b36      	ldr	r3, [pc, #216]	@ (8005bbc <HAL_RCC_OscConfig+0x270>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae6:	f7fd ff1d 	bl	8003924 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aee:	f7fd ff19 	bl	8003924 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e1a1      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b00:	4b2d      	ldr	r3, [pc, #180]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f0      	beq.n	8005aee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	4927      	ldr	r1, [pc, #156]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	600b      	str	r3, [r1, #0]
 8005b20:	e015      	b.n	8005b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b22:	4b26      	ldr	r3, [pc, #152]	@ (8005bbc <HAL_RCC_OscConfig+0x270>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b28:	f7fd fefc 	bl	8003924 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b30:	f7fd fef8 	bl	8003924 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e180      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b42:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1f0      	bne.n	8005b30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d03a      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d019      	beq.n	8005b96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b62:	4b17      	ldr	r3, [pc, #92]	@ (8005bc0 <HAL_RCC_OscConfig+0x274>)
 8005b64:	2201      	movs	r2, #1
 8005b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b68:	f7fd fedc 	bl	8003924 <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b70:	f7fd fed8 	bl	8003924 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e160      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b82:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb8 <HAL_RCC_OscConfig+0x26c>)
 8005b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f0      	beq.n	8005b70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005b8e:	2001      	movs	r0, #1
 8005b90:	f000 fafe 	bl	8006190 <RCC_Delay>
 8005b94:	e01c      	b.n	8005bd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b96:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc0 <HAL_RCC_OscConfig+0x274>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b9c:	f7fd fec2 	bl	8003924 <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba2:	e00f      	b.n	8005bc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ba4:	f7fd febe 	bl	8003924 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d908      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e146      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
 8005bb6:	bf00      	nop
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	42420000 	.word	0x42420000
 8005bc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc4:	4b92      	ldr	r3, [pc, #584]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e9      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 80a6 	beq.w	8005d2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bde:	2300      	movs	r3, #0
 8005be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005be2:	4b8b      	ldr	r3, [pc, #556]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10d      	bne.n	8005c0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bee:	4b88      	ldr	r3, [pc, #544]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	4a87      	ldr	r2, [pc, #540]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bf8:	61d3      	str	r3, [r2, #28]
 8005bfa:	4b85      	ldr	r3, [pc, #532]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c02:	60bb      	str	r3, [r7, #8]
 8005c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c06:	2301      	movs	r3, #1
 8005c08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c0a:	4b82      	ldr	r3, [pc, #520]	@ (8005e14 <HAL_RCC_OscConfig+0x4c8>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d118      	bne.n	8005c48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c16:	4b7f      	ldr	r3, [pc, #508]	@ (8005e14 <HAL_RCC_OscConfig+0x4c8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a7e      	ldr	r2, [pc, #504]	@ (8005e14 <HAL_RCC_OscConfig+0x4c8>)
 8005c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c22:	f7fd fe7f 	bl	8003924 <HAL_GetTick>
 8005c26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c2a:	f7fd fe7b 	bl	8003924 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b64      	cmp	r3, #100	@ 0x64
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e103      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3c:	4b75      	ldr	r3, [pc, #468]	@ (8005e14 <HAL_RCC_OscConfig+0x4c8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0f0      	beq.n	8005c2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d106      	bne.n	8005c5e <HAL_RCC_OscConfig+0x312>
 8005c50:	4b6f      	ldr	r3, [pc, #444]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	4a6e      	ldr	r2, [pc, #440]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	6213      	str	r3, [r2, #32]
 8005c5c:	e02d      	b.n	8005cba <HAL_RCC_OscConfig+0x36e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10c      	bne.n	8005c80 <HAL_RCC_OscConfig+0x334>
 8005c66:	4b6a      	ldr	r3, [pc, #424]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	4a69      	ldr	r2, [pc, #420]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005c6c:	f023 0301 	bic.w	r3, r3, #1
 8005c70:	6213      	str	r3, [r2, #32]
 8005c72:	4b67      	ldr	r3, [pc, #412]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	4a66      	ldr	r2, [pc, #408]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005c78:	f023 0304 	bic.w	r3, r3, #4
 8005c7c:	6213      	str	r3, [r2, #32]
 8005c7e:	e01c      	b.n	8005cba <HAL_RCC_OscConfig+0x36e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	2b05      	cmp	r3, #5
 8005c86:	d10c      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x356>
 8005c88:	4b61      	ldr	r3, [pc, #388]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	4a60      	ldr	r2, [pc, #384]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005c8e:	f043 0304 	orr.w	r3, r3, #4
 8005c92:	6213      	str	r3, [r2, #32]
 8005c94:	4b5e      	ldr	r3, [pc, #376]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	4a5d      	ldr	r2, [pc, #372]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005c9a:	f043 0301 	orr.w	r3, r3, #1
 8005c9e:	6213      	str	r3, [r2, #32]
 8005ca0:	e00b      	b.n	8005cba <HAL_RCC_OscConfig+0x36e>
 8005ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	4a5a      	ldr	r2, [pc, #360]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005ca8:	f023 0301 	bic.w	r3, r3, #1
 8005cac:	6213      	str	r3, [r2, #32]
 8005cae:	4b58      	ldr	r3, [pc, #352]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	4a57      	ldr	r2, [pc, #348]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005cb4:	f023 0304 	bic.w	r3, r3, #4
 8005cb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d015      	beq.n	8005cee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cc2:	f7fd fe2f 	bl	8003924 <HAL_GetTick>
 8005cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc8:	e00a      	b.n	8005ce0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cca:	f7fd fe2b 	bl	8003924 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e0b1      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0ee      	beq.n	8005cca <HAL_RCC_OscConfig+0x37e>
 8005cec:	e014      	b.n	8005d18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cee:	f7fd fe19 	bl	8003924 <HAL_GetTick>
 8005cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cf4:	e00a      	b.n	8005d0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cf6:	f7fd fe15 	bl	8003924 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e09b      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d0c:	4b40      	ldr	r3, [pc, #256]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1ee      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d18:	7dfb      	ldrb	r3, [r7, #23]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d105      	bne.n	8005d2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d1e:	4b3c      	ldr	r3, [pc, #240]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	4a3b      	ldr	r2, [pc, #236]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005d24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 8087 	beq.w	8005e42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d34:	4b36      	ldr	r3, [pc, #216]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f003 030c 	and.w	r3, r3, #12
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d061      	beq.n	8005e04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d146      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d48:	4b33      	ldr	r3, [pc, #204]	@ (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d4e:	f7fd fde9 	bl	8003924 <HAL_GetTick>
 8005d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d54:	e008      	b.n	8005d68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d56:	f7fd fde5 	bl	8003924 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e06d      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d68:	4b29      	ldr	r3, [pc, #164]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1f0      	bne.n	8005d56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d7c:	d108      	bne.n	8005d90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005d7e:	4b24      	ldr	r3, [pc, #144]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	4921      	ldr	r1, [pc, #132]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d90:	4b1f      	ldr	r3, [pc, #124]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a19      	ldr	r1, [r3, #32]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da0:	430b      	orrs	r3, r1
 8005da2:	491b      	ldr	r1, [pc, #108]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005da8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005daa:	2201      	movs	r2, #1
 8005dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dae:	f7fd fdb9 	bl	8003924 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db6:	f7fd fdb5 	bl	8003924 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e03d      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005dc8:	4b11      	ldr	r3, [pc, #68]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0f0      	beq.n	8005db6 <HAL_RCC_OscConfig+0x46a>
 8005dd4:	e035      	b.n	8005e42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd6:	4b10      	ldr	r3, [pc, #64]	@ (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ddc:	f7fd fda2 	bl	8003924 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005de4:	f7fd fd9e 	bl	8003924 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e026      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005df6:	4b06      	ldr	r3, [pc, #24]	@ (8005e10 <HAL_RCC_OscConfig+0x4c4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f0      	bne.n	8005de4 <HAL_RCC_OscConfig+0x498>
 8005e02:	e01e      	b.n	8005e42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d107      	bne.n	8005e1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e019      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
 8005e10:	40021000 	.word	0x40021000
 8005e14:	40007000 	.word	0x40007000
 8005e18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <HAL_RCC_OscConfig+0x500>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d106      	bne.n	8005e3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d001      	beq.n	8005e42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40021000 	.word	0x40021000

08005e50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e0d0      	b.n	8006006 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e64:	4b6a      	ldr	r3, [pc, #424]	@ (8006010 <HAL_RCC_ClockConfig+0x1c0>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d910      	bls.n	8005e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e72:	4b67      	ldr	r3, [pc, #412]	@ (8006010 <HAL_RCC_ClockConfig+0x1c0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f023 0207 	bic.w	r2, r3, #7
 8005e7a:	4965      	ldr	r1, [pc, #404]	@ (8006010 <HAL_RCC_ClockConfig+0x1c0>)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e82:	4b63      	ldr	r3, [pc, #396]	@ (8006010 <HAL_RCC_ClockConfig+0x1c0>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d001      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e0b8      	b.n	8006006 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d020      	beq.n	8005ee2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005eac:	4b59      	ldr	r3, [pc, #356]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	4a58      	ldr	r2, [pc, #352]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005eb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005eb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ec4:	4b53      	ldr	r3, [pc, #332]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4a52      	ldr	r2, [pc, #328]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005eca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005ece:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ed0:	4b50      	ldr	r3, [pc, #320]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	494d      	ldr	r1, [pc, #308]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d040      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d107      	bne.n	8005f06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ef6:	4b47      	ldr	r3, [pc, #284]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d115      	bne.n	8005f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e07f      	b.n	8006006 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d107      	bne.n	8005f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f0e:	4b41      	ldr	r3, [pc, #260]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d109      	bne.n	8005f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e073      	b.n	8006006 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e06b      	b.n	8006006 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f2e:	4b39      	ldr	r3, [pc, #228]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f023 0203 	bic.w	r2, r3, #3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	4936      	ldr	r1, [pc, #216]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f40:	f7fd fcf0 	bl	8003924 <HAL_GetTick>
 8005f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f46:	e00a      	b.n	8005f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f48:	f7fd fcec 	bl	8003924 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e053      	b.n	8006006 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f003 020c 	and.w	r2, r3, #12
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d1eb      	bne.n	8005f48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f70:	4b27      	ldr	r3, [pc, #156]	@ (8006010 <HAL_RCC_ClockConfig+0x1c0>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d210      	bcs.n	8005fa0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f7e:	4b24      	ldr	r3, [pc, #144]	@ (8006010 <HAL_RCC_ClockConfig+0x1c0>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f023 0207 	bic.w	r2, r3, #7
 8005f86:	4922      	ldr	r1, [pc, #136]	@ (8006010 <HAL_RCC_ClockConfig+0x1c0>)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f8e:	4b20      	ldr	r3, [pc, #128]	@ (8006010 <HAL_RCC_ClockConfig+0x1c0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d001      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e032      	b.n	8006006 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d008      	beq.n	8005fbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fac:	4b19      	ldr	r3, [pc, #100]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	4916      	ldr	r1, [pc, #88]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d009      	beq.n	8005fde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005fca:	4b12      	ldr	r3, [pc, #72]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	490e      	ldr	r1, [pc, #56]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fde:	f000 f821 	bl	8006024 <HAL_RCC_GetSysClockFreq>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	091b      	lsrs	r3, r3, #4
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	490a      	ldr	r1, [pc, #40]	@ (8006018 <HAL_RCC_ClockConfig+0x1c8>)
 8005ff0:	5ccb      	ldrb	r3, [r1, r3]
 8005ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff6:	4a09      	ldr	r2, [pc, #36]	@ (800601c <HAL_RCC_ClockConfig+0x1cc>)
 8005ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005ffa:	4b09      	ldr	r3, [pc, #36]	@ (8006020 <HAL_RCC_ClockConfig+0x1d0>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fc fc88 	bl	8002914 <HAL_InitTick>

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	40022000 	.word	0x40022000
 8006014:	40021000 	.word	0x40021000
 8006018:	080102d0 	.word	0x080102d0
 800601c:	20000004 	.word	0x20000004
 8006020:	20000018 	.word	0x20000018

08006024 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	2300      	movs	r3, #0
 8006030:	60bb      	str	r3, [r7, #8]
 8006032:	2300      	movs	r3, #0
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	2300      	movs	r3, #0
 8006038:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800603e:	4b1e      	ldr	r3, [pc, #120]	@ (80060b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f003 030c 	and.w	r3, r3, #12
 800604a:	2b04      	cmp	r3, #4
 800604c:	d002      	beq.n	8006054 <HAL_RCC_GetSysClockFreq+0x30>
 800604e:	2b08      	cmp	r3, #8
 8006050:	d003      	beq.n	800605a <HAL_RCC_GetSysClockFreq+0x36>
 8006052:	e027      	b.n	80060a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006054:	4b19      	ldr	r3, [pc, #100]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x98>)
 8006056:	613b      	str	r3, [r7, #16]
      break;
 8006058:	e027      	b.n	80060aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	0c9b      	lsrs	r3, r3, #18
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	4a17      	ldr	r2, [pc, #92]	@ (80060c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006064:	5cd3      	ldrb	r3, [r2, r3]
 8006066:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d010      	beq.n	8006094 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006072:	4b11      	ldr	r3, [pc, #68]	@ (80060b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	0c5b      	lsrs	r3, r3, #17
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	4a11      	ldr	r2, [pc, #68]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800607e:	5cd3      	ldrb	r3, [r2, r3]
 8006080:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a0d      	ldr	r2, [pc, #52]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x98>)
 8006086:	fb03 f202 	mul.w	r2, r3, r2
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	e004      	b.n	800609e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a0c      	ldr	r2, [pc, #48]	@ (80060c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006098:	fb02 f303 	mul.w	r3, r2, r3
 800609c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	613b      	str	r3, [r7, #16]
      break;
 80060a2:	e002      	b.n	80060aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80060a4:	4b05      	ldr	r3, [pc, #20]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x98>)
 80060a6:	613b      	str	r3, [r7, #16]
      break;
 80060a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060aa:	693b      	ldr	r3, [r7, #16]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	371c      	adds	r7, #28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	40021000 	.word	0x40021000
 80060bc:	007a1200 	.word	0x007a1200
 80060c0:	080102e8 	.word	0x080102e8
 80060c4:	080102f8 	.word	0x080102f8
 80060c8:	003d0900 	.word	0x003d0900

080060cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060d0:	4b02      	ldr	r3, [pc, #8]	@ (80060dc <HAL_RCC_GetHCLKFreq+0x10>)
 80060d2:	681b      	ldr	r3, [r3, #0]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr
 80060dc:	20000004 	.word	0x20000004

080060e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060e4:	f7ff fff2 	bl	80060cc <HAL_RCC_GetHCLKFreq>
 80060e8:	4602      	mov	r2, r0
 80060ea:	4b05      	ldr	r3, [pc, #20]	@ (8006100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	4903      	ldr	r1, [pc, #12]	@ (8006104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060f6:	5ccb      	ldrb	r3, [r1, r3]
 80060f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40021000 	.word	0x40021000
 8006104:	080102e0 	.word	0x080102e0

08006108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800610c:	f7ff ffde 	bl	80060cc <HAL_RCC_GetHCLKFreq>
 8006110:	4602      	mov	r2, r0
 8006112:	4b05      	ldr	r3, [pc, #20]	@ (8006128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	0adb      	lsrs	r3, r3, #11
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	4903      	ldr	r1, [pc, #12]	@ (800612c <HAL_RCC_GetPCLK2Freq+0x24>)
 800611e:	5ccb      	ldrb	r3, [r1, r3]
 8006120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006124:	4618      	mov	r0, r3
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40021000 	.word	0x40021000
 800612c:	080102e0 	.word	0x080102e0

08006130 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	220f      	movs	r2, #15
 800613e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006140:	4b11      	ldr	r3, [pc, #68]	@ (8006188 <HAL_RCC_GetClockConfig+0x58>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f003 0203 	and.w	r2, r3, #3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800614c:	4b0e      	ldr	r3, [pc, #56]	@ (8006188 <HAL_RCC_GetClockConfig+0x58>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006158:	4b0b      	ldr	r3, [pc, #44]	@ (8006188 <HAL_RCC_GetClockConfig+0x58>)
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006164:	4b08      	ldr	r3, [pc, #32]	@ (8006188 <HAL_RCC_GetClockConfig+0x58>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	08db      	lsrs	r3, r3, #3
 800616a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006172:	4b06      	ldr	r3, [pc, #24]	@ (800618c <HAL_RCC_GetClockConfig+0x5c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0207 	and.w	r2, r3, #7
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	bc80      	pop	{r7}
 8006186:	4770      	bx	lr
 8006188:	40021000 	.word	0x40021000
 800618c:	40022000 	.word	0x40022000

08006190 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006198:	4b0a      	ldr	r3, [pc, #40]	@ (80061c4 <RCC_Delay+0x34>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a0a      	ldr	r2, [pc, #40]	@ (80061c8 <RCC_Delay+0x38>)
 800619e:	fba2 2303 	umull	r2, r3, r2, r3
 80061a2:	0a5b      	lsrs	r3, r3, #9
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	fb02 f303 	mul.w	r3, r2, r3
 80061aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80061ac:	bf00      	nop
  }
  while (Delay --);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	1e5a      	subs	r2, r3, #1
 80061b2:	60fa      	str	r2, [r7, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1f9      	bne.n	80061ac <RCC_Delay+0x1c>
}
 80061b8:	bf00      	nop
 80061ba:	bf00      	nop
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr
 80061c4:	20000004 	.word	0x20000004
 80061c8:	10624dd3 	.word	0x10624dd3

080061cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	2300      	movs	r3, #0
 80061da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d07d      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80061e8:	2300      	movs	r3, #0
 80061ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ec:	4b4f      	ldr	r3, [pc, #316]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10d      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f8:	4b4c      	ldr	r3, [pc, #304]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	4a4b      	ldr	r2, [pc, #300]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006202:	61d3      	str	r3, [r2, #28]
 8006204:	4b49      	ldr	r3, [pc, #292]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006210:	2301      	movs	r3, #1
 8006212:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006214:	4b46      	ldr	r3, [pc, #280]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800621c:	2b00      	cmp	r3, #0
 800621e:	d118      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006220:	4b43      	ldr	r3, [pc, #268]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a42      	ldr	r2, [pc, #264]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800622a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800622c:	f7fd fb7a 	bl	8003924 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006232:	e008      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006234:	f7fd fb76 	bl	8003924 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b64      	cmp	r3, #100	@ 0x64
 8006240:	d901      	bls.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e06d      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006246:	4b3a      	ldr	r3, [pc, #232]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f0      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006252:	4b36      	ldr	r3, [pc, #216]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800625a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d02e      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	429a      	cmp	r2, r3
 800626e:	d027      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006270:	4b2e      	ldr	r3, [pc, #184]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006278:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800627a:	4b2e      	ldr	r3, [pc, #184]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800627c:	2201      	movs	r2, #1
 800627e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006280:	4b2c      	ldr	r3, [pc, #176]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006286:	4a29      	ldr	r2, [pc, #164]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d014      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006296:	f7fd fb45 	bl	8003924 <HAL_GetTick>
 800629a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800629c:	e00a      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800629e:	f7fd fb41 	bl	8003924 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e036      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b4:	4b1d      	ldr	r3, [pc, #116]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0ee      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062c0:	4b1a      	ldr	r3, [pc, #104]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	4917      	ldr	r1, [pc, #92]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d105      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062d8:	4b14      	ldr	r3, [pc, #80]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	4a13      	ldr	r2, [pc, #76]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d008      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062f0:	4b0e      	ldr	r3, [pc, #56]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	490b      	ldr	r1, [pc, #44]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	2b00      	cmp	r3, #0
 800630c:	d008      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800630e:	4b07      	ldr	r3, [pc, #28]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	4904      	ldr	r1, [pc, #16]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800631c:	4313      	orrs	r3, r2
 800631e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	40021000 	.word	0x40021000
 8006330:	40007000 	.word	0x40007000
 8006334:	42420440 	.word	0x42420440

08006338 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	2300      	movs	r3, #0
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	2300      	movs	r3, #0
 800634a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	2300      	movs	r3, #0
 8006352:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b10      	cmp	r3, #16
 8006358:	d00a      	beq.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b10      	cmp	r3, #16
 800635e:	f200 808a 	bhi.w	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d045      	beq.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b02      	cmp	r3, #2
 800636c:	d075      	beq.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800636e:	e082      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006370:	4b46      	ldr	r3, [pc, #280]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006376:	4b45      	ldr	r3, [pc, #276]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d07b      	beq.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	0c9b      	lsrs	r3, r3, #18
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	4a41      	ldr	r2, [pc, #260]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800638c:	5cd3      	ldrb	r3, [r2, r3]
 800638e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d015      	beq.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800639a:	4b3c      	ldr	r3, [pc, #240]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	0c5b      	lsrs	r3, r3, #17
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	4a3b      	ldr	r2, [pc, #236]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80063a6:	5cd3      	ldrb	r3, [r2, r3]
 80063a8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00d      	beq.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80063b4:	4a38      	ldr	r2, [pc, #224]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	fb02 f303 	mul.w	r3, r2, r3
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	e004      	b.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4a34      	ldr	r2, [pc, #208]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80063ca:	fb02 f303 	mul.w	r3, r2, r3
 80063ce:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80063d0:	4b2e      	ldr	r3, [pc, #184]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063dc:	d102      	bne.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	61bb      	str	r3, [r7, #24]
      break;
 80063e2:	e04a      	b.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	4a2d      	ldr	r2, [pc, #180]	@ (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80063ea:	fba2 2303 	umull	r2, r3, r2, r3
 80063ee:	085b      	lsrs	r3, r3, #1
 80063f0:	61bb      	str	r3, [r7, #24]
      break;
 80063f2:	e042      	b.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80063f4:	4b25      	ldr	r3, [pc, #148]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006404:	d108      	bne.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006410:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	e01f      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800641e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006422:	d109      	bne.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006424:	4b19      	ldr	r3, [pc, #100]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006430:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	e00f      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800643e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006442:	d11c      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006444:	4b11      	ldr	r3, [pc, #68]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d016      	beq.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006450:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8006454:	61bb      	str	r3, [r7, #24]
      break;
 8006456:	e012      	b.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006458:	e011      	b.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800645a:	f7ff fe55 	bl	8006108 <HAL_RCC_GetPCLK2Freq>
 800645e:	4602      	mov	r2, r0
 8006460:	4b0a      	ldr	r3, [pc, #40]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	0b9b      	lsrs	r3, r3, #14
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	3301      	adds	r3, #1
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006472:	61bb      	str	r3, [r7, #24]
      break;
 8006474:	e004      	b.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006476:	bf00      	nop
 8006478:	e002      	b.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800647a:	bf00      	nop
 800647c:	e000      	b.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800647e:	bf00      	nop
    }
  }
  return (frequency);
 8006480:	69bb      	ldr	r3, [r7, #24]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	40021000 	.word	0x40021000
 8006490:	080102fc 	.word	0x080102fc
 8006494:	0801030c 	.word	0x0801030c
 8006498:	007a1200 	.word	0x007a1200
 800649c:	003d0900 	.word	0x003d0900
 80064a0:	aaaaaaab 	.word	0xaaaaaaab

080064a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e076      	b.n	80065a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d108      	bne.n	80064d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064c6:	d009      	beq.n	80064dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	61da      	str	r2, [r3, #28]
 80064ce:	e005      	b.n	80064dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fc f8f0 	bl	80026dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006512:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800654c:	431a      	orrs	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006560:	ea42 0103 	orr.w	r1, r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006568:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	0c1a      	lsrs	r2, r3, #16
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f002 0204 	and.w	r2, r2, #4
 8006582:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	69da      	ldr	r2, [r3, #28]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006592:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	4613      	mov	r3, r2
 80065ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d101      	bne.n	80065ce <HAL_SPI_Transmit+0x22>
 80065ca:	2302      	movs	r3, #2
 80065cc:	e12d      	b.n	800682a <HAL_SPI_Transmit+0x27e>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065d6:	f7fd f9a5 	bl	8003924 <HAL_GetTick>
 80065da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80065dc:	88fb      	ldrh	r3, [r7, #6]
 80065de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d002      	beq.n	80065f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80065ec:	2302      	movs	r3, #2
 80065ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065f0:	e116      	b.n	8006820 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <HAL_SPI_Transmit+0x52>
 80065f8:	88fb      	ldrh	r3, [r7, #6]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d102      	bne.n	8006604 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006602:	e10d      	b.n	8006820 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2203      	movs	r2, #3
 8006608:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	88fa      	ldrh	r2, [r7, #6]
 800661c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	88fa      	ldrh	r2, [r7, #6]
 8006622:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800664a:	d10f      	bne.n	800666c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800665a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800666a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006676:	2b40      	cmp	r3, #64	@ 0x40
 8006678:	d007      	beq.n	800668a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006688:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006692:	d14f      	bne.n	8006734 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <HAL_SPI_Transmit+0xf6>
 800669c:	8afb      	ldrh	r3, [r7, #22]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d142      	bne.n	8006728 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a6:	881a      	ldrh	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b2:	1c9a      	adds	r2, r3, #2
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80066c6:	e02f      	b.n	8006728 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d112      	bne.n	80066fc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066da:	881a      	ldrh	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e6:	1c9a      	adds	r2, r3, #2
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	3b01      	subs	r3, #1
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80066fa:	e015      	b.n	8006728 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066fc:	f7fd f912 	bl	8003924 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d803      	bhi.n	8006714 <HAL_SPI_Transmit+0x168>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	d102      	bne.n	800671a <HAL_SPI_Transmit+0x16e>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006726:	e07b      	b.n	8006820 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1ca      	bne.n	80066c8 <HAL_SPI_Transmit+0x11c>
 8006732:	e050      	b.n	80067d6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <HAL_SPI_Transmit+0x196>
 800673c:	8afb      	ldrh	r3, [r7, #22]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d144      	bne.n	80067cc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	330c      	adds	r3, #12
 800674c:	7812      	ldrb	r2, [r2, #0]
 800674e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800675e:	b29b      	uxth	r3, r3
 8006760:	3b01      	subs	r3, #1
 8006762:	b29a      	uxth	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006768:	e030      	b.n	80067cc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	2b02      	cmp	r3, #2
 8006776:	d113      	bne.n	80067a0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	330c      	adds	r3, #12
 8006782:	7812      	ldrb	r2, [r2, #0]
 8006784:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800679e:	e015      	b.n	80067cc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067a0:	f7fd f8c0 	bl	8003924 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d803      	bhi.n	80067b8 <HAL_SPI_Transmit+0x20c>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d102      	bne.n	80067be <HAL_SPI_Transmit+0x212>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d106      	bne.n	80067cc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80067ca:	e029      	b.n	8006820 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1c9      	bne.n	800676a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 fbd8 	bl	8006f90 <SPI_EndRxTxTransaction>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2220      	movs	r2, #32
 80067ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067f4:	2300      	movs	r3, #0
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	77fb      	strb	r3, [r7, #31]
 8006816:	e003      	b.n	8006820 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006828:	7ffb      	ldrb	r3, [r7, #31]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3720      	adds	r7, #32
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b088      	sub	sp, #32
 8006836:	af02      	add	r7, sp, #8
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	603b      	str	r3, [r7, #0]
 800683e:	4613      	mov	r3, r2
 8006840:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b01      	cmp	r3, #1
 8006850:	d002      	beq.n	8006858 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006852:	2302      	movs	r3, #2
 8006854:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006856:	e0fb      	b.n	8006a50 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006860:	d112      	bne.n	8006888 <HAL_SPI_Receive+0x56>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10e      	bne.n	8006888 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2204      	movs	r2, #4
 800686e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006872:	88fa      	ldrh	r2, [r7, #6]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	4613      	mov	r3, r2
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	68b9      	ldr	r1, [r7, #8]
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 f8ef 	bl	8006a62 <HAL_SPI_TransmitReceive>
 8006884:	4603      	mov	r3, r0
 8006886:	e0e8      	b.n	8006a5a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800688e:	2b01      	cmp	r3, #1
 8006890:	d101      	bne.n	8006896 <HAL_SPI_Receive+0x64>
 8006892:	2302      	movs	r3, #2
 8006894:	e0e1      	b.n	8006a5a <HAL_SPI_Receive+0x228>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800689e:	f7fd f841 	bl	8003924 <HAL_GetTick>
 80068a2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <HAL_SPI_Receive+0x7e>
 80068aa:	88fb      	ldrh	r3, [r7, #6]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068b4:	e0cc      	b.n	8006a50 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2204      	movs	r2, #4
 80068ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	88fa      	ldrh	r2, [r7, #6]
 80068ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	88fa      	ldrh	r2, [r7, #6]
 80068d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068fc:	d10f      	bne.n	800691e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800690c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800691c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006928:	2b40      	cmp	r3, #64	@ 0x40
 800692a:	d007      	beq.n	800693c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800693a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d16a      	bne.n	8006a1a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006944:	e032      	b.n	80069ac <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b01      	cmp	r3, #1
 8006952:	d115      	bne.n	8006980 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f103 020c 	add.w	r2, r3, #12
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006960:	7812      	ldrb	r2, [r2, #0]
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800697e:	e015      	b.n	80069ac <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006980:	f7fc ffd0 	bl	8003924 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d803      	bhi.n	8006998 <HAL_SPI_Receive+0x166>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006996:	d102      	bne.n	800699e <HAL_SPI_Receive+0x16c>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80069aa:	e051      	b.n	8006a50 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1c7      	bne.n	8006946 <HAL_SPI_Receive+0x114>
 80069b6:	e035      	b.n	8006a24 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d113      	bne.n	80069ee <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d0:	b292      	uxth	r2, r2
 80069d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d8:	1c9a      	adds	r2, r3, #2
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069ec:	e015      	b.n	8006a1a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ee:	f7fc ff99 	bl	8003924 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d803      	bhi.n	8006a06 <HAL_SPI_Receive+0x1d4>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d102      	bne.n	8006a0c <HAL_SPI_Receive+0x1da>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d106      	bne.n	8006a1a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006a18:	e01a      	b.n	8006a50 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1c9      	bne.n	80069b8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 fa5f 	bl	8006eec <SPI_EndRxTransaction>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	75fb      	strb	r3, [r7, #23]
 8006a46:	e003      	b.n	8006a50 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b08c      	sub	sp, #48	@ 0x30
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	607a      	str	r2, [r7, #4]
 8006a6e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a70:	2301      	movs	r3, #1
 8006a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_SPI_TransmitReceive+0x26>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e198      	b.n	8006dba <HAL_SPI_TransmitReceive+0x358>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a90:	f7fc ff48 	bl	8003924 <HAL_GetTick>
 8006a94:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006aa6:	887b      	ldrh	r3, [r7, #2]
 8006aa8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006aaa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d00f      	beq.n	8006ad2 <HAL_SPI_TransmitReceive+0x70>
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ab8:	d107      	bne.n	8006aca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <HAL_SPI_TransmitReceive+0x68>
 8006ac2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d003      	beq.n	8006ad2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006aca:	2302      	movs	r3, #2
 8006acc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006ad0:	e16d      	b.n	8006dae <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <HAL_SPI_TransmitReceive+0x82>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <HAL_SPI_TransmitReceive+0x82>
 8006ade:	887b      	ldrh	r3, [r7, #2]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d103      	bne.n	8006aec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006aea:	e160      	b.n	8006dae <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d003      	beq.n	8006b00 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2205      	movs	r2, #5
 8006afc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	887a      	ldrh	r2, [r7, #2]
 8006b10:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	887a      	ldrh	r2, [r7, #2]
 8006b16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	887a      	ldrh	r2, [r7, #2]
 8006b22:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	887a      	ldrh	r2, [r7, #2]
 8006b28:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b40:	2b40      	cmp	r3, #64	@ 0x40
 8006b42:	d007      	beq.n	8006b54 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b5c:	d17c      	bne.n	8006c58 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <HAL_SPI_TransmitReceive+0x10a>
 8006b66:	8b7b      	ldrh	r3, [r7, #26]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d16a      	bne.n	8006c42 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b70:	881a      	ldrh	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b7c:	1c9a      	adds	r2, r3, #2
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b90:	e057      	b.n	8006c42 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d11b      	bne.n	8006bd8 <HAL_SPI_TransmitReceive+0x176>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d016      	beq.n	8006bd8 <HAL_SPI_TransmitReceive+0x176>
 8006baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d113      	bne.n	8006bd8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb4:	881a      	ldrh	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc0:	1c9a      	adds	r2, r3, #2
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d119      	bne.n	8006c1a <HAL_SPI_TransmitReceive+0x1b8>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d014      	beq.n	8006c1a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfa:	b292      	uxth	r2, r2
 8006bfc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c02:	1c9a      	adds	r2, r3, #2
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c16:	2301      	movs	r3, #1
 8006c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c1a:	f7fc fe83 	bl	8003924 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d80b      	bhi.n	8006c42 <HAL_SPI_TransmitReceive+0x1e0>
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c30:	d007      	beq.n	8006c42 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006c40:	e0b5      	b.n	8006dae <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1a2      	bne.n	8006b92 <HAL_SPI_TransmitReceive+0x130>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d19d      	bne.n	8006b92 <HAL_SPI_TransmitReceive+0x130>
 8006c56:	e080      	b.n	8006d5a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <HAL_SPI_TransmitReceive+0x204>
 8006c60:	8b7b      	ldrh	r3, [r7, #26]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d16f      	bne.n	8006d46 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	330c      	adds	r3, #12
 8006c70:	7812      	ldrb	r2, [r2, #0]
 8006c72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c8c:	e05b      	b.n	8006d46 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d11c      	bne.n	8006cd6 <HAL_SPI_TransmitReceive+0x274>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d017      	beq.n	8006cd6 <HAL_SPI_TransmitReceive+0x274>
 8006ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d114      	bne.n	8006cd6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	330c      	adds	r3, #12
 8006cb6:	7812      	ldrb	r2, [r2, #0]
 8006cb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d119      	bne.n	8006d18 <HAL_SPI_TransmitReceive+0x2b6>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d014      	beq.n	8006d18 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d14:	2301      	movs	r3, #1
 8006d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d18:	f7fc fe04 	bl	8003924 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d803      	bhi.n	8006d30 <HAL_SPI_TransmitReceive+0x2ce>
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2e:	d102      	bne.n	8006d36 <HAL_SPI_TransmitReceive+0x2d4>
 8006d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d107      	bne.n	8006d46 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006d44:	e033      	b.n	8006dae <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d19e      	bne.n	8006c8e <HAL_SPI_TransmitReceive+0x22c>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d199      	bne.n	8006c8e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 f916 	bl	8006f90 <SPI_EndRxTxTransaction>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d006      	beq.n	8006d78 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2220      	movs	r2, #32
 8006d74:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006d76:	e01a      	b.n	8006dae <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10a      	bne.n	8006d96 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d80:	2300      	movs	r3, #0
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006da4:	e003      	b.n	8006dae <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006db6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3730      	adds	r7, #48	@ 0x30
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006dd0:	b2db      	uxtb	r3, r3
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	603b      	str	r3, [r7, #0]
 8006de8:	4613      	mov	r3, r2
 8006dea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006dec:	f7fc fd9a 	bl	8003924 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df4:	1a9b      	subs	r3, r3, r2
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	4413      	add	r3, r2
 8006dfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006dfc:	f7fc fd92 	bl	8003924 <HAL_GetTick>
 8006e00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e02:	4b39      	ldr	r3, [pc, #228]	@ (8006ee8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	015b      	lsls	r3, r3, #5
 8006e08:	0d1b      	lsrs	r3, r3, #20
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	fb02 f303 	mul.w	r3, r2, r3
 8006e10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e12:	e054      	b.n	8006ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1a:	d050      	beq.n	8006ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e1c:	f7fc fd82 	bl	8003924 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d902      	bls.n	8006e32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d13d      	bne.n	8006eae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e4a:	d111      	bne.n	8006e70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e54:	d004      	beq.n	8006e60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e5e:	d107      	bne.n	8006e70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e78:	d10f      	bne.n	8006e9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e017      	b.n	8006ede <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	bf0c      	ite	eq
 8006ece:	2301      	moveq	r3, #1
 8006ed0:	2300      	movne	r3, #0
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	79fb      	ldrb	r3, [r7, #7]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d19b      	bne.n	8006e14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3720      	adds	r7, #32
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20000004 	.word	0x20000004

08006eec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af02      	add	r7, sp, #8
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f00:	d111      	bne.n	8006f26 <SPI_EndRxTransaction+0x3a>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f0a:	d004      	beq.n	8006f16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f14:	d107      	bne.n	8006f26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f24:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f2e:	d117      	bne.n	8006f60 <SPI_EndRxTransaction+0x74>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f38:	d112      	bne.n	8006f60 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2200      	movs	r2, #0
 8006f42:	2101      	movs	r1, #1
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f7ff ff49 	bl	8006ddc <SPI_WaitFlagStateUntilTimeout>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d01a      	beq.n	8006f86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f54:	f043 0220 	orr.w	r2, r3, #32
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e013      	b.n	8006f88 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2200      	movs	r2, #0
 8006f68:	2180      	movs	r1, #128	@ 0x80
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7ff ff36 	bl	8006ddc <SPI_WaitFlagStateUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7a:	f043 0220 	orr.w	r2, r3, #32
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e000      	b.n	8006f88 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af02      	add	r7, sp, #8
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2180      	movs	r1, #128	@ 0x80
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f7ff ff18 	bl	8006ddc <SPI_WaitFlagStateUntilTimeout>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d007      	beq.n	8006fc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb6:	f043 0220 	orr.w	r2, r3, #32
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e000      	b.n	8006fc4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e041      	b.n	8007062 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d106      	bne.n	8006ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7fb fbbe 	bl	8002774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3304      	adds	r3, #4
 8007008:	4619      	mov	r1, r3
 800700a:	4610      	mov	r0, r2
 800700c:	f000 fc94 	bl	8007938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b01      	cmp	r3, #1
 800707e:	d001      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e03a      	b.n	80070fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0201 	orr.w	r2, r2, #1
 800709a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a18      	ldr	r2, [pc, #96]	@ (8007104 <HAL_TIM_Base_Start_IT+0x98>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d00e      	beq.n	80070c4 <HAL_TIM_Base_Start_IT+0x58>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ae:	d009      	beq.n	80070c4 <HAL_TIM_Base_Start_IT+0x58>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a14      	ldr	r2, [pc, #80]	@ (8007108 <HAL_TIM_Base_Start_IT+0x9c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d004      	beq.n	80070c4 <HAL_TIM_Base_Start_IT+0x58>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a13      	ldr	r2, [pc, #76]	@ (800710c <HAL_TIM_Base_Start_IT+0xa0>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d111      	bne.n	80070e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 0307 	and.w	r3, r3, #7
 80070ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b06      	cmp	r3, #6
 80070d4:	d010      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f042 0201 	orr.w	r2, r2, #1
 80070e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070e6:	e007      	b.n	80070f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0201 	orr.w	r2, r2, #1
 80070f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	bc80      	pop	{r7}
 8007102:	4770      	bx	lr
 8007104:	40012c00 	.word	0x40012c00
 8007108:	40000400 	.word	0x40000400
 800710c:	40000800 	.word	0x40000800

08007110 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e041      	b.n	80071a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d106      	bne.n	800713c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f839 	bl	80071ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3304      	adds	r3, #4
 800714c:	4619      	mov	r1, r3
 800714e:	4610      	mov	r0, r2
 8007150:	f000 fbf2 	bl	8007938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bc80      	pop	{r7}
 80071be:	4770      	bx	lr

080071c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d109      	bne.n	80071e4 <HAL_TIM_PWM_Start+0x24>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b01      	cmp	r3, #1
 80071da:	bf14      	ite	ne
 80071dc:	2301      	movne	r3, #1
 80071de:	2300      	moveq	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	e022      	b.n	800722a <HAL_TIM_PWM_Start+0x6a>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d109      	bne.n	80071fe <HAL_TIM_PWM_Start+0x3e>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	bf14      	ite	ne
 80071f6:	2301      	movne	r3, #1
 80071f8:	2300      	moveq	r3, #0
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	e015      	b.n	800722a <HAL_TIM_PWM_Start+0x6a>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b08      	cmp	r3, #8
 8007202:	d109      	bne.n	8007218 <HAL_TIM_PWM_Start+0x58>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b01      	cmp	r3, #1
 800720e:	bf14      	ite	ne
 8007210:	2301      	movne	r3, #1
 8007212:	2300      	moveq	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	e008      	b.n	800722a <HAL_TIM_PWM_Start+0x6a>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b01      	cmp	r3, #1
 8007222:	bf14      	ite	ne
 8007224:	2301      	movne	r3, #1
 8007226:	2300      	moveq	r3, #0
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e05e      	b.n	80072f0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d104      	bne.n	8007242 <HAL_TIM_PWM_Start+0x82>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007240:	e013      	b.n	800726a <HAL_TIM_PWM_Start+0xaa>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b04      	cmp	r3, #4
 8007246:	d104      	bne.n	8007252 <HAL_TIM_PWM_Start+0x92>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2202      	movs	r2, #2
 800724c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007250:	e00b      	b.n	800726a <HAL_TIM_PWM_Start+0xaa>
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b08      	cmp	r3, #8
 8007256:	d104      	bne.n	8007262 <HAL_TIM_PWM_Start+0xa2>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007260:	e003      	b.n	800726a <HAL_TIM_PWM_Start+0xaa>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2202      	movs	r2, #2
 8007266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2201      	movs	r2, #1
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	4618      	mov	r0, r3
 8007274:	f000 fde0 	bl	8007e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1e      	ldr	r2, [pc, #120]	@ (80072f8 <HAL_TIM_PWM_Start+0x138>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d107      	bne.n	8007292 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007290:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a18      	ldr	r2, [pc, #96]	@ (80072f8 <HAL_TIM_PWM_Start+0x138>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d00e      	beq.n	80072ba <HAL_TIM_PWM_Start+0xfa>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072a4:	d009      	beq.n	80072ba <HAL_TIM_PWM_Start+0xfa>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a14      	ldr	r2, [pc, #80]	@ (80072fc <HAL_TIM_PWM_Start+0x13c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d004      	beq.n	80072ba <HAL_TIM_PWM_Start+0xfa>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a12      	ldr	r2, [pc, #72]	@ (8007300 <HAL_TIM_PWM_Start+0x140>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d111      	bne.n	80072de <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b06      	cmp	r3, #6
 80072ca:	d010      	beq.n	80072ee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0201 	orr.w	r2, r2, #1
 80072da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072dc:	e007      	b.n	80072ee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 0201 	orr.w	r2, r2, #1
 80072ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40012c00 	.word	0x40012c00
 80072fc:	40000400 	.word	0x40000400
 8007300:	40000800 	.word	0x40000800

08007304 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2200      	movs	r2, #0
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f000 fd8e 	bl	8007e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a29      	ldr	r2, [pc, #164]	@ (80073c8 <HAL_TIM_PWM_Stop+0xc4>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d117      	bne.n	8007356 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6a1a      	ldr	r2, [r3, #32]
 800732c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007330:	4013      	ands	r3, r2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10f      	bne.n	8007356 <HAL_TIM_PWM_Stop+0x52>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6a1a      	ldr	r2, [r3, #32]
 800733c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007340:	4013      	ands	r3, r2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d107      	bne.n	8007356 <HAL_TIM_PWM_Stop+0x52>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007354:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6a1a      	ldr	r2, [r3, #32]
 800735c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007360:	4013      	ands	r3, r2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10f      	bne.n	8007386 <HAL_TIM_PWM_Stop+0x82>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6a1a      	ldr	r2, [r3, #32]
 800736c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007370:	4013      	ands	r3, r2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d107      	bne.n	8007386 <HAL_TIM_PWM_Stop+0x82>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0201 	bic.w	r2, r2, #1
 8007384:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d104      	bne.n	8007396 <HAL_TIM_PWM_Stop+0x92>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007394:	e013      	b.n	80073be <HAL_TIM_PWM_Stop+0xba>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b04      	cmp	r3, #4
 800739a:	d104      	bne.n	80073a6 <HAL_TIM_PWM_Stop+0xa2>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073a4:	e00b      	b.n	80073be <HAL_TIM_PWM_Stop+0xba>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d104      	bne.n	80073b6 <HAL_TIM_PWM_Stop+0xb2>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073b4:	e003      	b.n	80073be <HAL_TIM_PWM_Stop+0xba>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	40012c00 	.word	0x40012c00

080073cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d122      	bne.n	8007428 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d11b      	bne.n	8007428 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f06f 0202 	mvn.w	r2, #2
 80073f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	f003 0303 	and.w	r3, r3, #3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa76 	bl	8007900 <HAL_TIM_IC_CaptureCallback>
 8007414:	e005      	b.n	8007422 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa69 	bl	80078ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fa78 	bl	8007912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f003 0304 	and.w	r3, r3, #4
 8007432:	2b04      	cmp	r3, #4
 8007434:	d122      	bne.n	800747c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f003 0304 	and.w	r3, r3, #4
 8007440:	2b04      	cmp	r3, #4
 8007442:	d11b      	bne.n	800747c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f06f 0204 	mvn.w	r2, #4
 800744c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2202      	movs	r2, #2
 8007452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fa4c 	bl	8007900 <HAL_TIM_IC_CaptureCallback>
 8007468:	e005      	b.n	8007476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa3f 	bl	80078ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fa4e 	bl	8007912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	f003 0308 	and.w	r3, r3, #8
 8007486:	2b08      	cmp	r3, #8
 8007488:	d122      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f003 0308 	and.w	r3, r3, #8
 8007494:	2b08      	cmp	r3, #8
 8007496:	d11b      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f06f 0208 	mvn.w	r2, #8
 80074a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2204      	movs	r2, #4
 80074a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fa22 	bl	8007900 <HAL_TIM_IC_CaptureCallback>
 80074bc:	e005      	b.n	80074ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa15 	bl	80078ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fa24 	bl	8007912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b10      	cmp	r3, #16
 80074dc:	d122      	bne.n	8007524 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f003 0310 	and.w	r3, r3, #16
 80074e8:	2b10      	cmp	r3, #16
 80074ea:	d11b      	bne.n	8007524 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0210 	mvn.w	r2, #16
 80074f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2208      	movs	r2, #8
 80074fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f9f8 	bl	8007900 <HAL_TIM_IC_CaptureCallback>
 8007510:	e005      	b.n	800751e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f9eb 	bl	80078ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f9fa 	bl	8007912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b01      	cmp	r3, #1
 8007530:	d10e      	bne.n	8007550 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b01      	cmp	r3, #1
 800753e:	d107      	bne.n	8007550 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0201 	mvn.w	r2, #1
 8007548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7fa ffc0 	bl	80024d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800755a:	2b80      	cmp	r3, #128	@ 0x80
 800755c:	d10e      	bne.n	800757c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007568:	2b80      	cmp	r3, #128	@ 0x80
 800756a:	d107      	bne.n	800757c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fce9 	bl	8007f4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007586:	2b40      	cmp	r3, #64	@ 0x40
 8007588:	d10e      	bne.n	80075a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007594:	2b40      	cmp	r3, #64	@ 0x40
 8007596:	d107      	bne.n	80075a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80075a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f9be 	bl	8007924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b20      	cmp	r3, #32
 80075b4:	d10e      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b20      	cmp	r3, #32
 80075c2:	d107      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f06f 0220 	mvn.w	r2, #32
 80075cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fcb4 	bl	8007f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075d4:	bf00      	nop
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d101      	bne.n	80075fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075f6:	2302      	movs	r3, #2
 80075f8:	e0ae      	b.n	8007758 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b0c      	cmp	r3, #12
 8007606:	f200 809f 	bhi.w	8007748 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800760a:	a201      	add	r2, pc, #4	@ (adr r2, 8007610 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007610:	08007645 	.word	0x08007645
 8007614:	08007749 	.word	0x08007749
 8007618:	08007749 	.word	0x08007749
 800761c:	08007749 	.word	0x08007749
 8007620:	08007685 	.word	0x08007685
 8007624:	08007749 	.word	0x08007749
 8007628:	08007749 	.word	0x08007749
 800762c:	08007749 	.word	0x08007749
 8007630:	080076c7 	.word	0x080076c7
 8007634:	08007749 	.word	0x08007749
 8007638:	08007749 	.word	0x08007749
 800763c:	08007749 	.word	0x08007749
 8007640:	08007707 	.word	0x08007707
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68b9      	ldr	r1, [r7, #8]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 f9d6 	bl	80079fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f042 0208 	orr.w	r2, r2, #8
 800765e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699a      	ldr	r2, [r3, #24]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0204 	bic.w	r2, r2, #4
 800766e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6999      	ldr	r1, [r3, #24]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	691a      	ldr	r2, [r3, #16]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	619a      	str	r2, [r3, #24]
      break;
 8007682:	e064      	b.n	800774e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68b9      	ldr	r1, [r7, #8]
 800768a:	4618      	mov	r0, r3
 800768c:	f000 fa1c 	bl	8007ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	699a      	ldr	r2, [r3, #24]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800769e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699a      	ldr	r2, [r3, #24]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6999      	ldr	r1, [r3, #24]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	021a      	lsls	r2, r3, #8
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	619a      	str	r2, [r3, #24]
      break;
 80076c4:	e043      	b.n	800774e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68b9      	ldr	r1, [r7, #8]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 fa65 	bl	8007b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	69da      	ldr	r2, [r3, #28]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f042 0208 	orr.w	r2, r2, #8
 80076e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69da      	ldr	r2, [r3, #28]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 0204 	bic.w	r2, r2, #4
 80076f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	69d9      	ldr	r1, [r3, #28]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	691a      	ldr	r2, [r3, #16]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	61da      	str	r2, [r3, #28]
      break;
 8007704:	e023      	b.n	800774e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68b9      	ldr	r1, [r7, #8]
 800770c:	4618      	mov	r0, r3
 800770e:	f000 faaf 	bl	8007c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69da      	ldr	r2, [r3, #28]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69da      	ldr	r2, [r3, #28]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	69d9      	ldr	r1, [r3, #28]
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	021a      	lsls	r2, r3, #8
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	61da      	str	r2, [r3, #28]
      break;
 8007746:	e002      	b.n	800774e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	75fb      	strb	r3, [r7, #23]
      break;
 800774c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007756:	7dfb      	ldrb	r3, [r7, #23]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3718      	adds	r7, #24
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007774:	2b01      	cmp	r3, #1
 8007776:	d101      	bne.n	800777c <HAL_TIM_ConfigClockSource+0x1c>
 8007778:	2302      	movs	r3, #2
 800777a:	e0b4      	b.n	80078e6 <HAL_TIM_ConfigClockSource+0x186>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800779a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077b4:	d03e      	beq.n	8007834 <HAL_TIM_ConfigClockSource+0xd4>
 80077b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077ba:	f200 8087 	bhi.w	80078cc <HAL_TIM_ConfigClockSource+0x16c>
 80077be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077c2:	f000 8086 	beq.w	80078d2 <HAL_TIM_ConfigClockSource+0x172>
 80077c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ca:	d87f      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x16c>
 80077cc:	2b70      	cmp	r3, #112	@ 0x70
 80077ce:	d01a      	beq.n	8007806 <HAL_TIM_ConfigClockSource+0xa6>
 80077d0:	2b70      	cmp	r3, #112	@ 0x70
 80077d2:	d87b      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x16c>
 80077d4:	2b60      	cmp	r3, #96	@ 0x60
 80077d6:	d050      	beq.n	800787a <HAL_TIM_ConfigClockSource+0x11a>
 80077d8:	2b60      	cmp	r3, #96	@ 0x60
 80077da:	d877      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x16c>
 80077dc:	2b50      	cmp	r3, #80	@ 0x50
 80077de:	d03c      	beq.n	800785a <HAL_TIM_ConfigClockSource+0xfa>
 80077e0:	2b50      	cmp	r3, #80	@ 0x50
 80077e2:	d873      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x16c>
 80077e4:	2b40      	cmp	r3, #64	@ 0x40
 80077e6:	d058      	beq.n	800789a <HAL_TIM_ConfigClockSource+0x13a>
 80077e8:	2b40      	cmp	r3, #64	@ 0x40
 80077ea:	d86f      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x16c>
 80077ec:	2b30      	cmp	r3, #48	@ 0x30
 80077ee:	d064      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x15a>
 80077f0:	2b30      	cmp	r3, #48	@ 0x30
 80077f2:	d86b      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x16c>
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	d060      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x15a>
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	d867      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x16c>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d05c      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x15a>
 8007800:	2b10      	cmp	r3, #16
 8007802:	d05a      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x15a>
 8007804:	e062      	b.n	80078cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007816:	f000 faf0 	bl	8007dfa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007828:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	609a      	str	r2, [r3, #8]
      break;
 8007832:	e04f      	b.n	80078d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007844:	f000 fad9 	bl	8007dfa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689a      	ldr	r2, [r3, #8]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007856:	609a      	str	r2, [r3, #8]
      break;
 8007858:	e03c      	b.n	80078d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007866:	461a      	mov	r2, r3
 8007868:	f000 fa50 	bl	8007d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2150      	movs	r1, #80	@ 0x50
 8007872:	4618      	mov	r0, r3
 8007874:	f000 faa7 	bl	8007dc6 <TIM_ITRx_SetConfig>
      break;
 8007878:	e02c      	b.n	80078d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007886:	461a      	mov	r2, r3
 8007888:	f000 fa6e 	bl	8007d68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2160      	movs	r1, #96	@ 0x60
 8007892:	4618      	mov	r0, r3
 8007894:	f000 fa97 	bl	8007dc6 <TIM_ITRx_SetConfig>
      break;
 8007898:	e01c      	b.n	80078d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078a6:	461a      	mov	r2, r3
 80078a8:	f000 fa30 	bl	8007d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2140      	movs	r1, #64	@ 0x40
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fa87 	bl	8007dc6 <TIM_ITRx_SetConfig>
      break;
 80078b8:	e00c      	b.n	80078d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4619      	mov	r1, r3
 80078c4:	4610      	mov	r0, r2
 80078c6:	f000 fa7e 	bl	8007dc6 <TIM_ITRx_SetConfig>
      break;
 80078ca:	e003      	b.n	80078d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	73fb      	strb	r3, [r7, #15]
      break;
 80078d0:	e000      	b.n	80078d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078f6:	bf00      	nop
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bc80      	pop	{r7}
 80078fe:	4770      	bx	lr

08007900 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	bc80      	pop	{r7}
 8007910:	4770      	bx	lr

08007912 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800791a:	bf00      	nop
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	bc80      	pop	{r7}
 8007922:	4770      	bx	lr

08007924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	bc80      	pop	{r7}
 8007934:	4770      	bx	lr
	...

08007938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a29      	ldr	r2, [pc, #164]	@ (80079f0 <TIM_Base_SetConfig+0xb8>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00b      	beq.n	8007968 <TIM_Base_SetConfig+0x30>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007956:	d007      	beq.n	8007968 <TIM_Base_SetConfig+0x30>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a26      	ldr	r2, [pc, #152]	@ (80079f4 <TIM_Base_SetConfig+0xbc>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_Base_SetConfig+0x30>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a25      	ldr	r2, [pc, #148]	@ (80079f8 <TIM_Base_SetConfig+0xc0>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d108      	bne.n	800797a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800796e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a1c      	ldr	r2, [pc, #112]	@ (80079f0 <TIM_Base_SetConfig+0xb8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00b      	beq.n	800799a <TIM_Base_SetConfig+0x62>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007988:	d007      	beq.n	800799a <TIM_Base_SetConfig+0x62>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a19      	ldr	r2, [pc, #100]	@ (80079f4 <TIM_Base_SetConfig+0xbc>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d003      	beq.n	800799a <TIM_Base_SetConfig+0x62>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a18      	ldr	r2, [pc, #96]	@ (80079f8 <TIM_Base_SetConfig+0xc0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d108      	bne.n	80079ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a07      	ldr	r2, [pc, #28]	@ (80079f0 <TIM_Base_SetConfig+0xb8>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d103      	bne.n	80079e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	691a      	ldr	r2, [r3, #16]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	615a      	str	r2, [r3, #20]
}
 80079e6:	bf00      	nop
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bc80      	pop	{r7}
 80079ee:	4770      	bx	lr
 80079f0:	40012c00 	.word	0x40012c00
 80079f4:	40000400 	.word	0x40000400
 80079f8:	40000800 	.word	0x40000800

080079fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	f023 0201 	bic.w	r2, r3, #1
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 0303 	bic.w	r3, r3, #3
 8007a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f023 0302 	bic.w	r3, r3, #2
 8007a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a1c      	ldr	r2, [pc, #112]	@ (8007ac4 <TIM_OC1_SetConfig+0xc8>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d10c      	bne.n	8007a72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f023 0308 	bic.w	r3, r3, #8
 8007a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f023 0304 	bic.w	r3, r3, #4
 8007a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a13      	ldr	r2, [pc, #76]	@ (8007ac4 <TIM_OC1_SetConfig+0xc8>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d111      	bne.n	8007a9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	621a      	str	r2, [r3, #32]
}
 8007ab8:	bf00      	nop
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bc80      	pop	{r7}
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40012c00 	.word	0x40012c00

08007ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	f023 0210 	bic.w	r2, r3, #16
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f023 0320 	bic.w	r3, r3, #32
 8007b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a1d      	ldr	r2, [pc, #116]	@ (8007b98 <TIM_OC2_SetConfig+0xd0>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d10d      	bne.n	8007b44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a14      	ldr	r2, [pc, #80]	@ (8007b98 <TIM_OC2_SetConfig+0xd0>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d113      	bne.n	8007b74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	621a      	str	r2, [r3, #32]
}
 8007b8e:	bf00      	nop
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bc80      	pop	{r7}
 8007b96:	4770      	bx	lr
 8007b98:	40012c00 	.word	0x40012c00

08007b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0303 	bic.w	r3, r3, #3
 8007bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	021b      	lsls	r3, r3, #8
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c6c <TIM_OC3_SetConfig+0xd0>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d10d      	bne.n	8007c16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	021b      	lsls	r3, r3, #8
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a14      	ldr	r2, [pc, #80]	@ (8007c6c <TIM_OC3_SetConfig+0xd0>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d113      	bne.n	8007c46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	011b      	lsls	r3, r3, #4
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	011b      	lsls	r3, r3, #4
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	621a      	str	r2, [r3, #32]
}
 8007c60:	bf00      	nop
 8007c62:	371c      	adds	r7, #28
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bc80      	pop	{r7}
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	40012c00 	.word	0x40012c00

08007c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a1b      	ldr	r3, [r3, #32]
 8007c84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	031b      	lsls	r3, r3, #12
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a0f      	ldr	r2, [pc, #60]	@ (8007d08 <TIM_OC4_SetConfig+0x98>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d109      	bne.n	8007ce4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	019b      	lsls	r3, r3, #6
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	621a      	str	r2, [r3, #32]
}
 8007cfe:	bf00      	nop
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bc80      	pop	{r7}
 8007d06:	4770      	bx	lr
 8007d08:	40012c00 	.word	0x40012c00

08007d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
 8007d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	f023 0201 	bic.w	r2, r3, #1
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f023 030a 	bic.w	r3, r3, #10
 8007d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	621a      	str	r2, [r3, #32]
}
 8007d5e:	bf00      	nop
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bc80      	pop	{r7}
 8007d66:	4770      	bx	lr

08007d68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f023 0210 	bic.w	r2, r3, #16
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	031b      	lsls	r3, r3, #12
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007da4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	011b      	lsls	r3, r3, #4
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	621a      	str	r2, [r3, #32]
}
 8007dbc:	bf00      	nop
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bc80      	pop	{r7}
 8007dc4:	4770      	bx	lr

08007dc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b085      	sub	sp, #20
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	f043 0307 	orr.w	r3, r3, #7
 8007de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	609a      	str	r2, [r3, #8]
}
 8007df0:	bf00      	nop
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bc80      	pop	{r7}
 8007df8:	4770      	bx	lr

08007dfa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b087      	sub	sp, #28
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
 8007e06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	021a      	lsls	r2, r3, #8
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	609a      	str	r2, [r3, #8]
}
 8007e2e:	bf00      	nop
 8007e30:	371c      	adds	r7, #28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bc80      	pop	{r7}
 8007e36:	4770      	bx	lr

08007e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f003 031f 	and.w	r3, r3, #31
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6a1a      	ldr	r2, [r3, #32]
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	43db      	mvns	r3, r3
 8007e5a:	401a      	ands	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a1a      	ldr	r2, [r3, #32]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f003 031f 	and.w	r3, r3, #31
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e70:	431a      	orrs	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	621a      	str	r2, [r3, #32]
}
 8007e76:	bf00      	nop
 8007e78:	371c      	adds	r7, #28
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bc80      	pop	{r7}
 8007e7e:	4770      	bx	lr

08007e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e046      	b.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a16      	ldr	r2, [pc, #88]	@ (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d00e      	beq.n	8007efa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ee4:	d009      	beq.n	8007efa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a12      	ldr	r2, [pc, #72]	@ (8007f34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d004      	beq.n	8007efa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a10      	ldr	r2, [pc, #64]	@ (8007f38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d10c      	bne.n	8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bc80      	pop	{r7}
 8007f2e:	4770      	bx	lr
 8007f30:	40012c00 	.word	0x40012c00
 8007f34:	40000400 	.word	0x40000400
 8007f38:	40000800 	.word	0x40000800

08007f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bc80      	pop	{r7}
 8007f4c:	4770      	bx	lr

08007f4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b083      	sub	sp, #12
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f56:	bf00      	nop
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bc80      	pop	{r7}
 8007f5e:	4770      	bx	lr

08007f60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e042      	b.n	8007ff8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d106      	bne.n	8007f8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7fa fc78 	bl	800287c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2224      	movs	r2, #36	@ 0x24
 8007f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68da      	ldr	r2, [r3, #12]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007fa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f889 	bl	80080bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	691a      	ldr	r2, [r3, #16]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007fb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	695a      	ldr	r2, [r3, #20]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007fc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68da      	ldr	r2, [r3, #12]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007fd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	4613      	mov	r3, r2
 800800c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b20      	cmp	r3, #32
 8008018:	d112      	bne.n	8008040 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d002      	beq.n	8008026 <HAL_UART_Receive_IT+0x26>
 8008020:	88fb      	ldrh	r3, [r7, #6]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e00b      	b.n	8008042 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008030:	88fb      	ldrh	r3, [r7, #6]
 8008032:	461a      	mov	r2, r3
 8008034:	68b9      	ldr	r1, [r7, #8]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 f807 	bl	800804a <UART_Start_Receive_IT>
 800803c:	4603      	mov	r3, r0
 800803e:	e000      	b.n	8008042 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008040:	2302      	movs	r3, #2
  }
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800804a:	b480      	push	{r7}
 800804c:	b085      	sub	sp, #20
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	4613      	mov	r3, r2
 8008056:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	88fa      	ldrh	r2, [r7, #6]
 8008062:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	88fa      	ldrh	r2, [r7, #6]
 8008068:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2222      	movs	r2, #34	@ 0x22
 8008074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d007      	beq.n	8008090 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800808e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	695a      	ldr	r2, [r3, #20]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f042 0201 	orr.w	r2, r2, #1
 800809e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68da      	ldr	r2, [r3, #12]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0220 	orr.w	r2, r2, #32
 80080ae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bc80      	pop	{r7}
 80080ba:	4770      	bx	lr

080080bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68da      	ldr	r2, [r3, #12]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	430a      	orrs	r2, r1
 80080d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	689a      	ldr	r2, [r3, #8]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	431a      	orrs	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80080f6:	f023 030c 	bic.w	r3, r3, #12
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	6812      	ldr	r2, [r2, #0]
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	430b      	orrs	r3, r1
 8008102:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	699a      	ldr	r2, [r3, #24]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	430a      	orrs	r2, r1
 8008118:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a2c      	ldr	r2, [pc, #176]	@ (80081d0 <UART_SetConfig+0x114>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d103      	bne.n	800812c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008124:	f7fd fff0 	bl	8006108 <HAL_RCC_GetPCLK2Freq>
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	e002      	b.n	8008132 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800812c:	f7fd ffd8 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 8008130:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	009a      	lsls	r2, r3, #2
 800813c:	441a      	add	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	fbb2 f3f3 	udiv	r3, r2, r3
 8008148:	4a22      	ldr	r2, [pc, #136]	@ (80081d4 <UART_SetConfig+0x118>)
 800814a:	fba2 2303 	umull	r2, r3, r2, r3
 800814e:	095b      	lsrs	r3, r3, #5
 8008150:	0119      	lsls	r1, r3, #4
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4613      	mov	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	009a      	lsls	r2, r3, #2
 800815c:	441a      	add	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	fbb2 f2f3 	udiv	r2, r2, r3
 8008168:	4b1a      	ldr	r3, [pc, #104]	@ (80081d4 <UART_SetConfig+0x118>)
 800816a:	fba3 0302 	umull	r0, r3, r3, r2
 800816e:	095b      	lsrs	r3, r3, #5
 8008170:	2064      	movs	r0, #100	@ 0x64
 8008172:	fb00 f303 	mul.w	r3, r0, r3
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	011b      	lsls	r3, r3, #4
 800817a:	3332      	adds	r3, #50	@ 0x32
 800817c:	4a15      	ldr	r2, [pc, #84]	@ (80081d4 <UART_SetConfig+0x118>)
 800817e:	fba2 2303 	umull	r2, r3, r2, r3
 8008182:	095b      	lsrs	r3, r3, #5
 8008184:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008188:	4419      	add	r1, r3
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	009a      	lsls	r2, r3, #2
 8008194:	441a      	add	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	fbb2 f2f3 	udiv	r2, r2, r3
 80081a0:	4b0c      	ldr	r3, [pc, #48]	@ (80081d4 <UART_SetConfig+0x118>)
 80081a2:	fba3 0302 	umull	r0, r3, r3, r2
 80081a6:	095b      	lsrs	r3, r3, #5
 80081a8:	2064      	movs	r0, #100	@ 0x64
 80081aa:	fb00 f303 	mul.w	r3, r0, r3
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	011b      	lsls	r3, r3, #4
 80081b2:	3332      	adds	r3, #50	@ 0x32
 80081b4:	4a07      	ldr	r2, [pc, #28]	@ (80081d4 <UART_SetConfig+0x118>)
 80081b6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ba:	095b      	lsrs	r3, r3, #5
 80081bc:	f003 020f 	and.w	r2, r3, #15
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	440a      	add	r2, r1
 80081c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80081c8:	bf00      	nop
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	40013800 	.word	0x40013800
 80081d4:	51eb851f 	.word	0x51eb851f

080081d8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081de:	f3ef 8305 	mrs	r3, IPSR
 80081e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80081e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10f      	bne.n	800820a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081ea:	f3ef 8310 	mrs	r3, PRIMASK
 80081ee:	607b      	str	r3, [r7, #4]
  return(result);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <osKernelInitialize+0x32>
 80081f6:	4b10      	ldr	r3, [pc, #64]	@ (8008238 <osKernelInitialize+0x60>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d109      	bne.n	8008212 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80081fe:	f3ef 8311 	mrs	r3, BASEPRI
 8008202:	603b      	str	r3, [r7, #0]
  return(result);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800820a:	f06f 0305 	mvn.w	r3, #5
 800820e:	60fb      	str	r3, [r7, #12]
 8008210:	e00c      	b.n	800822c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008212:	4b09      	ldr	r3, [pc, #36]	@ (8008238 <osKernelInitialize+0x60>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d105      	bne.n	8008226 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800821a:	4b07      	ldr	r3, [pc, #28]	@ (8008238 <osKernelInitialize+0x60>)
 800821c:	2201      	movs	r2, #1
 800821e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008220:	2300      	movs	r3, #0
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	e002      	b.n	800822c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008226:	f04f 33ff 	mov.w	r3, #4294967295
 800822a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800822c:	68fb      	ldr	r3, [r7, #12]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	bc80      	pop	{r7}
 8008236:	4770      	bx	lr
 8008238:	200005b4 	.word	0x200005b4

0800823c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008242:	f3ef 8305 	mrs	r3, IPSR
 8008246:	60bb      	str	r3, [r7, #8]
  return(result);
 8008248:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10f      	bne.n	800826e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800824e:	f3ef 8310 	mrs	r3, PRIMASK
 8008252:	607b      	str	r3, [r7, #4]
  return(result);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d109      	bne.n	800826e <osKernelStart+0x32>
 800825a:	4b11      	ldr	r3, [pc, #68]	@ (80082a0 <osKernelStart+0x64>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b02      	cmp	r3, #2
 8008260:	d109      	bne.n	8008276 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008262:	f3ef 8311 	mrs	r3, BASEPRI
 8008266:	603b      	str	r3, [r7, #0]
  return(result);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <osKernelStart+0x3a>
    stat = osErrorISR;
 800826e:	f06f 0305 	mvn.w	r3, #5
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	e00e      	b.n	8008294 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008276:	4b0a      	ldr	r3, [pc, #40]	@ (80082a0 <osKernelStart+0x64>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d107      	bne.n	800828e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800827e:	4b08      	ldr	r3, [pc, #32]	@ (80082a0 <osKernelStart+0x64>)
 8008280:	2202      	movs	r2, #2
 8008282:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008284:	f001 fa70 	bl	8009768 <vTaskStartScheduler>
      stat = osOK;
 8008288:	2300      	movs	r3, #0
 800828a:	60fb      	str	r3, [r7, #12]
 800828c:	e002      	b.n	8008294 <osKernelStart+0x58>
    } else {
      stat = osError;
 800828e:	f04f 33ff 	mov.w	r3, #4294967295
 8008292:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008294:	68fb      	ldr	r3, [r7, #12]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	200005b4 	.word	0x200005b4

080082a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b092      	sub	sp, #72	@ 0x48
 80082a8:	af04      	add	r7, sp, #16
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082b4:	f3ef 8305 	mrs	r3, IPSR
 80082b8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80082ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f040 8094 	bne.w	80083ea <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082c2:	f3ef 8310 	mrs	r3, PRIMASK
 80082c6:	623b      	str	r3, [r7, #32]
  return(result);
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f040 808d 	bne.w	80083ea <osThreadNew+0x146>
 80082d0:	4b48      	ldr	r3, [pc, #288]	@ (80083f4 <osThreadNew+0x150>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d106      	bne.n	80082e6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80082d8:	f3ef 8311 	mrs	r3, BASEPRI
 80082dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f040 8082 	bne.w	80083ea <osThreadNew+0x146>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d07e      	beq.n	80083ea <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80082ec:	2380      	movs	r3, #128	@ 0x80
 80082ee:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80082f0:	2318      	movs	r3, #24
 80082f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80082f4:	2300      	movs	r3, #0
 80082f6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80082f8:	f107 031b 	add.w	r3, r7, #27
 80082fc:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80082fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008302:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d045      	beq.n	8008396 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <osThreadNew+0x74>
        name = attr->name;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008328:	2b00      	cmp	r3, #0
 800832a:	d008      	beq.n	800833e <osThreadNew+0x9a>
 800832c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832e:	2b38      	cmp	r3, #56	@ 0x38
 8008330:	d805      	bhi.n	800833e <osThreadNew+0x9a>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <osThreadNew+0x9e>
        return (NULL);
 800833e:	2300      	movs	r3, #0
 8008340:	e054      	b.n	80083ec <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	089b      	lsrs	r3, r3, #2
 8008350:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00e      	beq.n	8008378 <osThreadNew+0xd4>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	2ba7      	cmp	r3, #167	@ 0xa7
 8008360:	d90a      	bls.n	8008378 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008366:	2b00      	cmp	r3, #0
 8008368:	d006      	beq.n	8008378 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d002      	beq.n	8008378 <osThreadNew+0xd4>
        mem = 1;
 8008372:	2301      	movs	r3, #1
 8008374:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008376:	e010      	b.n	800839a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10c      	bne.n	800839a <osThreadNew+0xf6>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d108      	bne.n	800839a <osThreadNew+0xf6>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d104      	bne.n	800839a <osThreadNew+0xf6>
          mem = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008394:	e001      	b.n	800839a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800839a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839c:	2b01      	cmp	r3, #1
 800839e:	d110      	bne.n	80083c2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083a8:	9202      	str	r2, [sp, #8]
 80083aa:	9301      	str	r3, [sp, #4]
 80083ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083b4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 fea2 	bl	8009100 <xTaskCreateStatic>
 80083bc:	4603      	mov	r3, r0
 80083be:	617b      	str	r3, [r7, #20]
 80083c0:	e013      	b.n	80083ea <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80083c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d110      	bne.n	80083ea <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80083c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	f107 0314 	add.w	r3, r7, #20
 80083d0:	9301      	str	r3, [sp, #4]
 80083d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 feef 	bl	80091be <xTaskCreate>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d001      	beq.n	80083ea <osThreadNew+0x146>
          hTask = NULL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80083ea:	697b      	ldr	r3, [r7, #20]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3738      	adds	r7, #56	@ 0x38
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	200005b4 	.word	0x200005b4

080083f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008400:	f3ef 8305 	mrs	r3, IPSR
 8008404:	613b      	str	r3, [r7, #16]
  return(result);
 8008406:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10f      	bne.n	800842c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800840c:	f3ef 8310 	mrs	r3, PRIMASK
 8008410:	60fb      	str	r3, [r7, #12]
  return(result);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d109      	bne.n	800842c <osDelay+0x34>
 8008418:	4b0d      	ldr	r3, [pc, #52]	@ (8008450 <osDelay+0x58>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b02      	cmp	r3, #2
 800841e:	d109      	bne.n	8008434 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008420:	f3ef 8311 	mrs	r3, BASEPRI
 8008424:	60bb      	str	r3, [r7, #8]
  return(result);
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <osDelay+0x3c>
    stat = osErrorISR;
 800842c:	f06f 0305 	mvn.w	r3, #5
 8008430:	617b      	str	r3, [r7, #20]
 8008432:	e007      	b.n	8008444 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008434:	2300      	movs	r3, #0
 8008436:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d002      	beq.n	8008444 <osDelay+0x4c>
      vTaskDelay(ticks);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f001 f830 	bl	80094a4 <vTaskDelay>
    }
  }

  return (stat);
 8008444:	697b      	ldr	r3, [r7, #20]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3718      	adds	r7, #24
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	200005b4 	.word	0x200005b4

08008454 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4a06      	ldr	r2, [pc, #24]	@ (800847c <vApplicationGetIdleTaskMemory+0x28>)
 8008464:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	4a05      	ldr	r2, [pc, #20]	@ (8008480 <vApplicationGetIdleTaskMemory+0x2c>)
 800846a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2280      	movs	r2, #128	@ 0x80
 8008470:	601a      	str	r2, [r3, #0]
}
 8008472:	bf00      	nop
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	bc80      	pop	{r7}
 800847a:	4770      	bx	lr
 800847c:	200005b8 	.word	0x200005b8
 8008480:	20000660 	.word	0x20000660

08008484 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4a07      	ldr	r2, [pc, #28]	@ (80084b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008494:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	4a06      	ldr	r2, [pc, #24]	@ (80084b4 <vApplicationGetTimerTaskMemory+0x30>)
 800849a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084a2:	601a      	str	r2, [r3, #0]
}
 80084a4:	bf00      	nop
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bc80      	pop	{r7}
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	20000860 	.word	0x20000860
 80084b4:	20000908 	.word	0x20000908

080084b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f103 0208 	add.w	r2, r3, #8
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f04f 32ff 	mov.w	r2, #4294967295
 80084d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f103 0208 	add.w	r2, r3, #8
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f103 0208 	add.w	r2, r3, #8
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bc80      	pop	{r7}
 80084f4:	4770      	bx	lr

080084f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	bc80      	pop	{r7}
 800850c:	4770      	bx	lr

0800850e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800850e:	b480      	push	{r7}
 8008510:	b085      	sub	sp, #20
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	601a      	str	r2, [r3, #0]
}
 800854a:	bf00      	nop
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	bc80      	pop	{r7}
 8008552:	4770      	bx	lr

08008554 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856a:	d103      	bne.n	8008574 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	e00c      	b.n	800858e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	3308      	adds	r3, #8
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	e002      	b.n	8008582 <vListInsert+0x2e>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	429a      	cmp	r2, r3
 800858c:	d2f6      	bcs.n	800857c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	1c5a      	adds	r2, r3, #1
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	601a      	str	r2, [r3, #0]
}
 80085ba:	bf00      	nop
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	bc80      	pop	{r7}
 80085c2:	4770      	bx	lr

080085c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	6892      	ldr	r2, [r2, #8]
 80085da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	6852      	ldr	r2, [r2, #4]
 80085e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d103      	bne.n	80085f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	1e5a      	subs	r2, r3, #1
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	bc80      	pop	{r7}
 8008614:	4770      	bx	lr
	...

08008618 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10b      	bne.n	8008644 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800863e:	bf00      	nop
 8008640:	bf00      	nop
 8008642:	e7fd      	b.n	8008640 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008644:	f002 fa0a 	bl	800aa5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008650:	68f9      	ldr	r1, [r7, #12]
 8008652:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008654:	fb01 f303 	mul.w	r3, r1, r3
 8008658:	441a      	add	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008674:	3b01      	subs	r3, #1
 8008676:	68f9      	ldr	r1, [r7, #12]
 8008678:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800867a:	fb01 f303 	mul.w	r3, r1, r3
 800867e:	441a      	add	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	22ff      	movs	r2, #255	@ 0xff
 8008688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	22ff      	movs	r2, #255	@ 0xff
 8008690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d114      	bne.n	80086c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d01a      	beq.n	80086d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3310      	adds	r3, #16
 80086a6:	4618      	mov	r0, r3
 80086a8:	f001 fb2c 	bl	8009d04 <xTaskRemoveFromEventList>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d012      	beq.n	80086d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086b2:	4b0d      	ldr	r3, [pc, #52]	@ (80086e8 <xQueueGenericReset+0xd0>)
 80086b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086b8:	601a      	str	r2, [r3, #0]
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	e009      	b.n	80086d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3310      	adds	r3, #16
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff fef5 	bl	80084b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3324      	adds	r3, #36	@ 0x24
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff fef0 	bl	80084b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086d8:	f002 f9f0 	bl	800aabc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086dc:	2301      	movs	r3, #1
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	e000ed04 	.word	0xe000ed04

080086ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08e      	sub	sp, #56	@ 0x38
 80086f0:	af02      	add	r7, sp, #8
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10b      	bne.n	8008718 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008712:	bf00      	nop
 8008714:	bf00      	nop
 8008716:	e7fd      	b.n	8008714 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10b      	bne.n	8008736 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	e7fd      	b.n	8008732 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <xQueueGenericCreateStatic+0x56>
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <xQueueGenericCreateStatic+0x5a>
 8008742:	2301      	movs	r3, #1
 8008744:	e000      	b.n	8008748 <xQueueGenericCreateStatic+0x5c>
 8008746:	2300      	movs	r3, #0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10b      	bne.n	8008764 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	623b      	str	r3, [r7, #32]
}
 800875e:	bf00      	nop
 8008760:	bf00      	nop
 8008762:	e7fd      	b.n	8008760 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d102      	bne.n	8008770 <xQueueGenericCreateStatic+0x84>
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <xQueueGenericCreateStatic+0x88>
 8008770:	2301      	movs	r3, #1
 8008772:	e000      	b.n	8008776 <xQueueGenericCreateStatic+0x8a>
 8008774:	2300      	movs	r3, #0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10b      	bne.n	8008792 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800877a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	61fb      	str	r3, [r7, #28]
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	e7fd      	b.n	800878e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008792:	2350      	movs	r3, #80	@ 0x50
 8008794:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2b50      	cmp	r3, #80	@ 0x50
 800879a:	d00b      	beq.n	80087b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	61bb      	str	r3, [r7, #24]
}
 80087ae:	bf00      	nop
 80087b0:	bf00      	nop
 80087b2:	e7fd      	b.n	80087b0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80087b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00d      	beq.n	80087da <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087c6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80087ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	4613      	mov	r3, r2
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	68b9      	ldr	r1, [r7, #8]
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 f805 	bl	80087e4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80087da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80087dc:	4618      	mov	r0, r3
 80087de:	3730      	adds	r7, #48	@ 0x30
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d103      	bne.n	8008800 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	e002      	b.n	8008806 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008812:	2101      	movs	r1, #1
 8008814:	69b8      	ldr	r0, [r7, #24]
 8008816:	f7ff feff 	bl	8008618 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	78fa      	ldrb	r2, [r7, #3]
 800881e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	68f9      	ldr	r1, [r7, #12]
 8008828:	2073      	movs	r0, #115	@ 0x73
 800882a:	f003 feff 	bl	800c62c <SEGGER_SYSVIEW_RecordU32x3>
}
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
	...

08008838 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b090      	sub	sp, #64	@ 0x40
 800883c:	af02      	add	r7, sp, #8
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008846:	2300      	movs	r3, #0
 8008848:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800884e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10b      	bne.n	800886c <xQueueGenericSend+0x34>
	__asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008866:	bf00      	nop
 8008868:	bf00      	nop
 800886a:	e7fd      	b.n	8008868 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d103      	bne.n	800887a <xQueueGenericSend+0x42>
 8008872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <xQueueGenericSend+0x46>
 800887a:	2301      	movs	r3, #1
 800887c:	e000      	b.n	8008880 <xQueueGenericSend+0x48>
 800887e:	2300      	movs	r3, #0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10b      	bne.n	800889c <xQueueGenericSend+0x64>
	__asm volatile
 8008884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008896:	bf00      	nop
 8008898:	bf00      	nop
 800889a:	e7fd      	b.n	8008898 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d103      	bne.n	80088aa <xQueueGenericSend+0x72>
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d101      	bne.n	80088ae <xQueueGenericSend+0x76>
 80088aa:	2301      	movs	r3, #1
 80088ac:	e000      	b.n	80088b0 <xQueueGenericSend+0x78>
 80088ae:	2300      	movs	r3, #0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10b      	bne.n	80088cc <xQueueGenericSend+0x94>
	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	623b      	str	r3, [r7, #32]
}
 80088c6:	bf00      	nop
 80088c8:	bf00      	nop
 80088ca:	e7fd      	b.n	80088c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088cc:	f001 fbea 	bl	800a0a4 <xTaskGetSchedulerState>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d102      	bne.n	80088dc <xQueueGenericSend+0xa4>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <xQueueGenericSend+0xa8>
 80088dc:	2301      	movs	r3, #1
 80088de:	e000      	b.n	80088e2 <xQueueGenericSend+0xaa>
 80088e0:	2300      	movs	r3, #0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10b      	bne.n	80088fe <xQueueGenericSend+0xc6>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	61fb      	str	r3, [r7, #28]
}
 80088f8:	bf00      	nop
 80088fa:	bf00      	nop
 80088fc:	e7fd      	b.n	80088fa <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088fe:	f002 f8ad 	bl	800aa5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800890a:	429a      	cmp	r2, r3
 800890c:	d302      	bcc.n	8008914 <xQueueGenericSend+0xdc>
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b02      	cmp	r3, #2
 8008912:	d136      	bne.n	8008982 <xQueueGenericSend+0x14a>
			{
				traceQUEUE_SEND( pxQueue );
 8008914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008916:	4618      	mov	r0, r3
 8008918:	f004 fb3a 	bl	800cf90 <SEGGER_SYSVIEW_ShrinkId>
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	6879      	ldr	r1, [r7, #4]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	460b      	mov	r3, r1
 8008926:	4601      	mov	r1, r0
 8008928:	205a      	movs	r0, #90	@ 0x5a
 800892a:	f003 fef5 	bl	800c718 <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	68b9      	ldr	r1, [r7, #8]
 8008932:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008934:	f000 fa6e 	bl	8008e14 <prvCopyDataToQueue>
 8008938:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800893a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893e:	2b00      	cmp	r3, #0
 8008940:	d010      	beq.n	8008964 <xQueueGenericSend+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	3324      	adds	r3, #36	@ 0x24
 8008946:	4618      	mov	r0, r3
 8008948:	f001 f9dc 	bl	8009d04 <xTaskRemoveFromEventList>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d013      	beq.n	800897a <xQueueGenericSend+0x142>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008952:	4b4d      	ldr	r3, [pc, #308]	@ (8008a88 <xQueueGenericSend+0x250>)
 8008954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	e00a      	b.n	800897a <xQueueGenericSend+0x142>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008966:	2b00      	cmp	r3, #0
 8008968:	d007      	beq.n	800897a <xQueueGenericSend+0x142>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800896a:	4b47      	ldr	r3, [pc, #284]	@ (8008a88 <xQueueGenericSend+0x250>)
 800896c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800897a:	f002 f89f 	bl	800aabc <vPortExitCritical>
				return pdPASS;
 800897e:	2301      	movs	r3, #1
 8008980:	e07d      	b.n	8008a7e <xQueueGenericSend+0x246>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d110      	bne.n	80089aa <xQueueGenericSend+0x172>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008988:	f002 f898 	bl	800aabc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800898c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898e:	4618      	mov	r0, r3
 8008990:	f004 fafe 	bl	800cf90 <SEGGER_SYSVIEW_ShrinkId>
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	460b      	mov	r3, r1
 800899e:	4601      	mov	r1, r0
 80089a0:	205a      	movs	r0, #90	@ 0x5a
 80089a2:	f003 feb9 	bl	800c718 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	e069      	b.n	8008a7e <xQueueGenericSend+0x246>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d106      	bne.n	80089be <xQueueGenericSend+0x186>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089b0:	f107 0314 	add.w	r3, r7, #20
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 fa0d 	bl	8009dd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089ba:	2301      	movs	r3, #1
 80089bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089be:	f002 f87d 	bl	800aabc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089c2:	f000 ff41 	bl	8009848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089c6:	f002 f849 	bl	800aa5c <vPortEnterCritical>
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089d0:	b25b      	sxtb	r3, r3
 80089d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d6:	d103      	bne.n	80089e0 <xQueueGenericSend+0x1a8>
 80089d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089e6:	b25b      	sxtb	r3, r3
 80089e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ec:	d103      	bne.n	80089f6 <xQueueGenericSend+0x1be>
 80089ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089f6:	f002 f861 	bl	800aabc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089fa:	1d3a      	adds	r2, r7, #4
 80089fc:	f107 0314 	add.w	r3, r7, #20
 8008a00:	4611      	mov	r1, r2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f001 f9fc 	bl	8009e00 <xTaskCheckForTimeOut>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d124      	bne.n	8008a58 <xQueueGenericSend+0x220>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a10:	f000 faf8 	bl	8009004 <prvIsQueueFull>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d018      	beq.n	8008a4c <xQueueGenericSend+0x214>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1c:	3310      	adds	r3, #16
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	4611      	mov	r1, r2
 8008a22:	4618      	mov	r0, r3
 8008a24:	f001 f918 	bl	8009c58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a2a:	f000 fa83 	bl	8008f34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a2e:	f000 ff19 	bl	8009864 <xTaskResumeAll>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f47f af62 	bne.w	80088fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008a3a:	4b13      	ldr	r3, [pc, #76]	@ (8008a88 <xQueueGenericSend+0x250>)
 8008a3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	e758      	b.n	80088fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a4e:	f000 fa71 	bl	8008f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a52:	f000 ff07 	bl	8009864 <xTaskResumeAll>
 8008a56:	e752      	b.n	80088fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a5a:	f000 fa6b 	bl	8008f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a5e:	f000 ff01 	bl	8009864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8008a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a64:	4618      	mov	r0, r3
 8008a66:	f004 fa93 	bl	800cf90 <SEGGER_SYSVIEW_ShrinkId>
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	460b      	mov	r3, r1
 8008a74:	4601      	mov	r1, r0
 8008a76:	205a      	movs	r0, #90	@ 0x5a
 8008a78:	f003 fe4e 	bl	800c718 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8008a7c:	2300      	movs	r3, #0
		}
	}
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3738      	adds	r7, #56	@ 0x38
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	e000ed04 	.word	0xe000ed04

08008a8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08e      	sub	sp, #56	@ 0x38
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10b      	bne.n	8008abc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008ab6:	bf00      	nop
 8008ab8:	bf00      	nop
 8008aba:	e7fd      	b.n	8008ab8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d103      	bne.n	8008aca <xQueueGenericSendFromISR+0x3e>
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <xQueueGenericSendFromISR+0x42>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e000      	b.n	8008ad0 <xQueueGenericSendFromISR+0x44>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10b      	bne.n	8008aec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	623b      	str	r3, [r7, #32]
}
 8008ae6:	bf00      	nop
 8008ae8:	bf00      	nop
 8008aea:	e7fd      	b.n	8008ae8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d103      	bne.n	8008afa <xQueueGenericSendFromISR+0x6e>
 8008af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d101      	bne.n	8008afe <xQueueGenericSendFromISR+0x72>
 8008afa:	2301      	movs	r3, #1
 8008afc:	e000      	b.n	8008b00 <xQueueGenericSendFromISR+0x74>
 8008afe:	2300      	movs	r3, #0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10b      	bne.n	8008b1c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	61fb      	str	r3, [r7, #28]
}
 8008b16:	bf00      	nop
 8008b18:	bf00      	nop
 8008b1a:	e7fd      	b.n	8008b18 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b1c:	f002 f860 	bl	800abe0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b20:	f3ef 8211 	mrs	r2, BASEPRI
 8008b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	61ba      	str	r2, [r7, #24]
 8008b36:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b38:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d302      	bcc.n	8008b4e <xQueueGenericSendFromISR+0xc2>
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d136      	bne.n	8008bbc <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f004 fa18 	bl	800cf90 <SEGGER_SYSVIEW_ShrinkId>
 8008b60:	4601      	mov	r1, r0
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	461a      	mov	r2, r3
 8008b66:	2060      	movs	r0, #96	@ 0x60
 8008b68:	f003 fd06 	bl	800c578 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	68b9      	ldr	r1, [r7, #8]
 8008b70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b72:	f000 f94f 	bl	8008e14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b76:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7e:	d112      	bne.n	8008ba6 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d016      	beq.n	8008bb6 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8a:	3324      	adds	r3, #36	@ 0x24
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 f8b9 	bl	8009d04 <xTaskRemoveFromEventList>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00e      	beq.n	8008bb6 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00b      	beq.n	8008bb6 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	e007      	b.n	8008bb6 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008baa:	3301      	adds	r3, #1
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	b25a      	sxtb	r2, r3
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008bba:	e00b      	b.n	8008bd4 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f004 f9e6 	bl	800cf90 <SEGGER_SYSVIEW_ShrinkId>
 8008bc4:	4601      	mov	r1, r0
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	2060      	movs	r0, #96	@ 0x60
 8008bcc:	f003 fcd4 	bl	800c578 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008bde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3738      	adds	r7, #56	@ 0x38
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
	...

08008bec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008bec:	b590      	push	{r4, r7, lr}
 8008bee:	b08f      	sub	sp, #60	@ 0x3c
 8008bf0:	af02      	add	r7, sp, #8
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10b      	bne.n	8008c1e <xQueueReceive+0x32>
	__asm volatile
 8008c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0a:	f383 8811 	msr	BASEPRI, r3
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	f3bf 8f4f 	dsb	sy
 8008c16:	623b      	str	r3, [r7, #32]
}
 8008c18:	bf00      	nop
 8008c1a:	bf00      	nop
 8008c1c:	e7fd      	b.n	8008c1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d103      	bne.n	8008c2c <xQueueReceive+0x40>
 8008c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <xQueueReceive+0x44>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e000      	b.n	8008c32 <xQueueReceive+0x46>
 8008c30:	2300      	movs	r3, #0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10b      	bne.n	8008c4e <xQueueReceive+0x62>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	61fb      	str	r3, [r7, #28]
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	e7fd      	b.n	8008c4a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c4e:	f001 fa29 	bl	800a0a4 <xTaskGetSchedulerState>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d102      	bne.n	8008c5e <xQueueReceive+0x72>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d101      	bne.n	8008c62 <xQueueReceive+0x76>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e000      	b.n	8008c64 <xQueueReceive+0x78>
 8008c62:	2300      	movs	r3, #0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10b      	bne.n	8008c80 <xQueueReceive+0x94>
	__asm volatile
 8008c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	61bb      	str	r3, [r7, #24]
}
 8008c7a:	bf00      	nop
 8008c7c:	bf00      	nop
 8008c7e:	e7fd      	b.n	8008c7c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c80:	f001 feec 	bl	800aa5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c88:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d02f      	beq.n	8008cf0 <xQueueReceive+0x104>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c90:	68b9      	ldr	r1, [r7, #8]
 8008c92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c94:	f000 f928 	bl	8008ee8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8008c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f004 f978 	bl	800cf90 <SEGGER_SYSVIEW_ShrinkId>
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	f004 f974 	bl	800cf90 <SEGGER_SYSVIEW_ShrinkId>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2101      	movs	r1, #1
 8008cae:	9100      	str	r1, [sp, #0]
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	205c      	movs	r0, #92	@ 0x5c
 8008cb4:	f003 fd30 	bl	800c718 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cba:	1e5a      	subs	r2, r3, #1
 8008cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00f      	beq.n	8008ce8 <xQueueReceive+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cca:	3310      	adds	r3, #16
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f001 f819 	bl	8009d04 <xTaskRemoveFromEventList>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d007      	beq.n	8008ce8 <xQueueReceive+0xfc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8008e10 <xQueueReceive+0x224>)
 8008cda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ce8:	f001 fee8 	bl	800aabc <vPortExitCritical>
				return pdPASS;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e08a      	b.n	8008e06 <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d113      	bne.n	8008d1e <xQueueReceive+0x132>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cf6:	f001 fee1 	bl	800aabc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f004 f947 	bl	800cf90 <SEGGER_SYSVIEW_ShrinkId>
 8008d02:	4604      	mov	r4, r0
 8008d04:	2000      	movs	r0, #0
 8008d06:	f004 f943 	bl	800cf90 <SEGGER_SYSVIEW_ShrinkId>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2101      	movs	r1, #1
 8008d10:	9100      	str	r1, [sp, #0]
 8008d12:	4621      	mov	r1, r4
 8008d14:	205c      	movs	r0, #92	@ 0x5c
 8008d16:	f003 fcff 	bl	800c718 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	e073      	b.n	8008e06 <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d106      	bne.n	8008d32 <xQueueReceive+0x146>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d24:	f107 0310 	add.w	r3, r7, #16
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f001 f853 	bl	8009dd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d32:	f001 fec3 	bl	800aabc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d36:	f000 fd87 	bl	8009848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d3a:	f001 fe8f 	bl	800aa5c <vPortEnterCritical>
 8008d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d44:	b25b      	sxtb	r3, r3
 8008d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4a:	d103      	bne.n	8008d54 <xQueueReceive+0x168>
 8008d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d5a:	b25b      	sxtb	r3, r3
 8008d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d60:	d103      	bne.n	8008d6a <xQueueReceive+0x17e>
 8008d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d6a:	f001 fea7 	bl	800aabc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d6e:	1d3a      	adds	r2, r7, #4
 8008d70:	f107 0310 	add.w	r3, r7, #16
 8008d74:	4611      	mov	r1, r2
 8008d76:	4618      	mov	r0, r3
 8008d78:	f001 f842 	bl	8009e00 <xTaskCheckForTimeOut>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d124      	bne.n	8008dcc <xQueueReceive+0x1e0>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d84:	f000 f928 	bl	8008fd8 <prvIsQueueEmpty>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d018      	beq.n	8008dc0 <xQueueReceive+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d90:	3324      	adds	r3, #36	@ 0x24
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	4611      	mov	r1, r2
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 ff5e 	bl	8009c58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d9e:	f000 f8c9 	bl	8008f34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008da2:	f000 fd5f 	bl	8009864 <xTaskResumeAll>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f47f af69 	bne.w	8008c80 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008dae:	4b18      	ldr	r3, [pc, #96]	@ (8008e10 <xQueueReceive+0x224>)
 8008db0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	e75f      	b.n	8008c80 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008dc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dc2:	f000 f8b7 	bl	8008f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dc6:	f000 fd4d 	bl	8009864 <xTaskResumeAll>
 8008dca:	e759      	b.n	8008c80 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008dcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dce:	f000 f8b1 	bl	8008f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dd2:	f000 fd47 	bl	8009864 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dd8:	f000 f8fe 	bl	8008fd8 <prvIsQueueEmpty>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f43f af4e 	beq.w	8008c80 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de6:	4618      	mov	r0, r3
 8008de8:	f004 f8d2 	bl	800cf90 <SEGGER_SYSVIEW_ShrinkId>
 8008dec:	4604      	mov	r4, r0
 8008dee:	2000      	movs	r0, #0
 8008df0:	f004 f8ce 	bl	800cf90 <SEGGER_SYSVIEW_ShrinkId>
 8008df4:	4602      	mov	r2, r0
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2101      	movs	r1, #1
 8008dfa:	9100      	str	r1, [sp, #0]
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	205c      	movs	r0, #92	@ 0x5c
 8008e00:	f003 fc8a 	bl	800c718 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8008e04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3734      	adds	r7, #52	@ 0x34
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd90      	pop	{r4, r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	e000ed04 	.word	0xe000ed04

08008e14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e20:	2300      	movs	r3, #0
 8008e22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10d      	bne.n	8008e4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d14d      	bne.n	8008ed6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f001 f94e 	bl	800a0e0 <xTaskPriorityDisinherit>
 8008e44:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	605a      	str	r2, [r3, #4]
 8008e4c:	e043      	b.n	8008ed6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d119      	bne.n	8008e88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6898      	ldr	r0, [r3, #8]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	68b9      	ldr	r1, [r7, #8]
 8008e60:	f005 f941 	bl	800e0e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	689a      	ldr	r2, [r3, #8]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6c:	441a      	add	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	689a      	ldr	r2, [r3, #8]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d32b      	bcc.n	8008ed6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	609a      	str	r2, [r3, #8]
 8008e86:	e026      	b.n	8008ed6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	68d8      	ldr	r0, [r3, #12]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e90:	461a      	mov	r2, r3
 8008e92:	68b9      	ldr	r1, [r7, #8]
 8008e94:	f005 f927 	bl	800e0e6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	68da      	ldr	r2, [r3, #12]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea0:	425b      	negs	r3, r3
 8008ea2:	441a      	add	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d207      	bcs.n	8008ec4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ebc:	425b      	negs	r3, r3
 8008ebe:	441a      	add	r2, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d105      	bne.n	8008ed6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008ede:	697b      	ldr	r3, [r7, #20]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3718      	adds	r7, #24
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d018      	beq.n	8008f2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68da      	ldr	r2, [r3, #12]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f02:	441a      	add	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68da      	ldr	r2, [r3, #12]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d303      	bcc.n	8008f1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68d9      	ldr	r1, [r3, #12]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f24:	461a      	mov	r2, r3
 8008f26:	6838      	ldr	r0, [r7, #0]
 8008f28:	f005 f8dd 	bl	800e0e6 <memcpy>
	}
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f3c:	f001 fd8e 	bl	800aa5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f48:	e011      	b.n	8008f6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d012      	beq.n	8008f78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3324      	adds	r3, #36	@ 0x24
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 fed4 	bl	8009d04 <xTaskRemoveFromEventList>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f62:	f000 ffb1 	bl	8009ec8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	dce9      	bgt.n	8008f4a <prvUnlockQueue+0x16>
 8008f76:	e000      	b.n	8008f7a <prvUnlockQueue+0x46>
					break;
 8008f78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	22ff      	movs	r2, #255	@ 0xff
 8008f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008f82:	f001 fd9b 	bl	800aabc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f86:	f001 fd69 	bl	800aa5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f92:	e011      	b.n	8008fb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d012      	beq.n	8008fc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3310      	adds	r3, #16
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 feaf 	bl	8009d04 <xTaskRemoveFromEventList>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008fac:	f000 ff8c 	bl	8009ec8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	dce9      	bgt.n	8008f94 <prvUnlockQueue+0x60>
 8008fc0:	e000      	b.n	8008fc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008fc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	22ff      	movs	r2, #255	@ 0xff
 8008fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008fcc:	f001 fd76 	bl	800aabc <vPortExitCritical>
}
 8008fd0:	bf00      	nop
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fe0:	f001 fd3c 	bl	800aa5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d102      	bne.n	8008ff2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008fec:	2301      	movs	r3, #1
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	e001      	b.n	8008ff6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ff6:	f001 fd61 	bl	800aabc <vPortExitCritical>

	return xReturn;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800900c:	f001 fd26 	bl	800aa5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009018:	429a      	cmp	r2, r3
 800901a:	d102      	bne.n	8009022 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800901c:	2301      	movs	r3, #1
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	e001      	b.n	8009026 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009026:	f001 fd49 	bl	800aabc <vPortExitCritical>

	return xReturn;
 800902a:	68fb      	ldr	r3, [r7, #12]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800903e:	2300      	movs	r3, #0
 8009040:	60fb      	str	r3, [r7, #12]
 8009042:	e01e      	b.n	8009082 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009044:	4a13      	ldr	r2, [pc, #76]	@ (8009094 <vQueueAddToRegistry+0x60>)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d115      	bne.n	800907c <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009050:	4910      	ldr	r1, [pc, #64]	@ (8009094 <vQueueAddToRegistry+0x60>)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800905a:	4a0e      	ldr	r2, [pc, #56]	@ (8009094 <vQueueAddToRegistry+0x60>)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	4413      	add	r3, r2
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4618      	mov	r0, r3
 800906a:	f003 ff91 	bl	800cf90 <SEGGER_SYSVIEW_ShrinkId>
 800906e:	4601      	mov	r1, r0
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	2071      	movs	r0, #113	@ 0x71
 8009076:	f003 fa7f 	bl	800c578 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800907a:	e006      	b.n	800908a <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	3301      	adds	r3, #1
 8009080:	60fb      	str	r3, [r7, #12]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b07      	cmp	r3, #7
 8009086:	d9dd      	bls.n	8009044 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009088:	bf00      	nop
 800908a:	bf00      	nop
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20000d08 	.word	0x20000d08

08009098 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80090a8:	f001 fcd8 	bl	800aa5c <vPortEnterCritical>
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090b2:	b25b      	sxtb	r3, r3
 80090b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b8:	d103      	bne.n	80090c2 <vQueueWaitForMessageRestricted+0x2a>
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090c8:	b25b      	sxtb	r3, r3
 80090ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ce:	d103      	bne.n	80090d8 <vQueueWaitForMessageRestricted+0x40>
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090d8:	f001 fcf0 	bl	800aabc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d106      	bne.n	80090f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	3324      	adds	r3, #36	@ 0x24
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	68b9      	ldr	r1, [r7, #8]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 fdd9 	bl	8009ca4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80090f2:	6978      	ldr	r0, [r7, #20]
 80090f4:	f7ff ff1e 	bl	8008f34 <prvUnlockQueue>
	}
 80090f8:	bf00      	nop
 80090fa:	3718      	adds	r7, #24
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08e      	sub	sp, #56	@ 0x38
 8009104:	af04      	add	r7, sp, #16
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800910e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10b      	bne.n	800912c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	623b      	str	r3, [r7, #32]
}
 8009126:	bf00      	nop
 8009128:	bf00      	nop
 800912a:	e7fd      	b.n	8009128 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800912c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10b      	bne.n	800914a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	61fb      	str	r3, [r7, #28]
}
 8009144:	bf00      	nop
 8009146:	bf00      	nop
 8009148:	e7fd      	b.n	8009146 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800914a:	23a8      	movs	r3, #168	@ 0xa8
 800914c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	2ba8      	cmp	r3, #168	@ 0xa8
 8009152:	d00b      	beq.n	800916c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	61bb      	str	r3, [r7, #24]
}
 8009166:	bf00      	nop
 8009168:	bf00      	nop
 800916a:	e7fd      	b.n	8009168 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800916c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916e:	2b00      	cmp	r3, #0
 8009170:	d01e      	beq.n	80091b0 <xTaskCreateStatic+0xb0>
 8009172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009174:	2b00      	cmp	r3, #0
 8009176:	d01b      	beq.n	80091b0 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800917c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009180:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009184:	2202      	movs	r2, #2
 8009186:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800918a:	2300      	movs	r3, #0
 800918c:	9303      	str	r3, [sp, #12]
 800918e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009190:	9302      	str	r3, [sp, #8]
 8009192:	f107 0314 	add.w	r3, r7, #20
 8009196:	9301      	str	r3, [sp, #4]
 8009198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	68b9      	ldr	r1, [r7, #8]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f000 f850 	bl	8009248 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80091aa:	f000 f8ed 	bl	8009388 <prvAddNewTaskToReadyList>
 80091ae:	e001      	b.n	80091b4 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80091b0:	2300      	movs	r3, #0
 80091b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091b4:	697b      	ldr	r3, [r7, #20]
	}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3728      	adds	r7, #40	@ 0x28
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b08c      	sub	sp, #48	@ 0x30
 80091c2:	af04      	add	r7, sp, #16
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	603b      	str	r3, [r7, #0]
 80091ca:	4613      	mov	r3, r2
 80091cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ce:	88fb      	ldrh	r3, [r7, #6]
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4618      	mov	r0, r3
 80091d4:	f001 fd44 	bl	800ac60 <pvPortMalloc>
 80091d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00e      	beq.n	80091fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80091e0:	20a8      	movs	r0, #168	@ 0xa8
 80091e2:	f001 fd3d 	bl	800ac60 <pvPortMalloc>
 80091e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80091f4:	e005      	b.n	8009202 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80091f6:	6978      	ldr	r0, [r7, #20]
 80091f8:	f001 fdfa 	bl	800adf0 <vPortFree>
 80091fc:	e001      	b.n	8009202 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80091fe:	2300      	movs	r3, #0
 8009200:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d017      	beq.n	8009238 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009210:	88fa      	ldrh	r2, [r7, #6]
 8009212:	2300      	movs	r3, #0
 8009214:	9303      	str	r3, [sp, #12]
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	9302      	str	r3, [sp, #8]
 800921a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	68b9      	ldr	r1, [r7, #8]
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 f80e 	bl	8009248 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800922c:	69f8      	ldr	r0, [r7, #28]
 800922e:	f000 f8ab 	bl	8009388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009232:	2301      	movs	r3, #1
 8009234:	61bb      	str	r3, [r7, #24]
 8009236:	e002      	b.n	800923e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009238:	f04f 33ff 	mov.w	r3, #4294967295
 800923c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800923e:	69bb      	ldr	r3, [r7, #24]
	}
 8009240:	4618      	mov	r0, r3
 8009242:	3720      	adds	r7, #32
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b088      	sub	sp, #32
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009258:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	461a      	mov	r2, r3
 8009260:	21a5      	movs	r1, #165	@ 0xa5
 8009262:	f004 fe5e 	bl	800df22 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009270:	3b01      	subs	r3, #1
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	f023 0307 	bic.w	r3, r3, #7
 800927e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	f003 0307 	and.w	r3, r3, #7
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00b      	beq.n	80092a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	617b      	str	r3, [r7, #20]
}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	e7fd      	b.n	800929e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092a2:	2300      	movs	r3, #0
 80092a4:	61fb      	str	r3, [r7, #28]
 80092a6:	e012      	b.n	80092ce <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	4413      	add	r3, r2
 80092ae:	7819      	ldrb	r1, [r3, #0]
 80092b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	4413      	add	r3, r2
 80092b6:	3334      	adds	r3, #52	@ 0x34
 80092b8:	460a      	mov	r2, r1
 80092ba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	4413      	add	r3, r2
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d006      	beq.n	80092d6 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	3301      	adds	r3, #1
 80092cc:	61fb      	str	r3, [r7, #28]
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	2b0f      	cmp	r3, #15
 80092d2:	d9e9      	bls.n	80092a8 <prvInitialiseNewTask+0x60>
 80092d4:	e000      	b.n	80092d8 <prvInitialiseNewTask+0x90>
		{
			break;
 80092d6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e2:	2b37      	cmp	r3, #55	@ 0x37
 80092e4:	d901      	bls.n	80092ea <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80092e6:	2337      	movs	r3, #55	@ 0x37
 80092e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80092ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80092f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092f4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80092f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f8:	2200      	movs	r2, #0
 80092fa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fe:	3304      	adds	r3, #4
 8009300:	4618      	mov	r0, r3
 8009302:	f7ff f8f8 	bl	80084f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009308:	3318      	adds	r3, #24
 800930a:	4618      	mov	r0, r3
 800930c:	f7ff f8f3 	bl	80084f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009314:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009318:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800931c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009324:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009328:	2200      	movs	r2, #0
 800932a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800932e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009330:	2200      	movs	r2, #0
 8009332:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009338:	3354      	adds	r3, #84	@ 0x54
 800933a:	224c      	movs	r2, #76	@ 0x4c
 800933c:	2100      	movs	r1, #0
 800933e:	4618      	mov	r0, r3
 8009340:	f004 fdef 	bl	800df22 <memset>
 8009344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009346:	4a0d      	ldr	r2, [pc, #52]	@ (800937c <prvInitialiseNewTask+0x134>)
 8009348:	659a      	str	r2, [r3, #88]	@ 0x58
 800934a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934c:	4a0c      	ldr	r2, [pc, #48]	@ (8009380 <prvInitialiseNewTask+0x138>)
 800934e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009352:	4a0c      	ldr	r2, [pc, #48]	@ (8009384 <prvInitialiseNewTask+0x13c>)
 8009354:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	68f9      	ldr	r1, [r7, #12]
 800935a:	69b8      	ldr	r0, [r7, #24]
 800935c:	f001 fa90 	bl	800a880 <pxPortInitialiseStack>
 8009360:	4602      	mov	r2, r0
 8009362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009364:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800936c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800936e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009370:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009372:	bf00      	nop
 8009374:	3720      	adds	r7, #32
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	20004544 	.word	0x20004544
 8009380:	200045ac 	.word	0x200045ac
 8009384:	20004614 	.word	0x20004614

08009388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009388:	b5b0      	push	{r4, r5, r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af02      	add	r7, sp, #8
 800938e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009390:	f001 fb64 	bl	800aa5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009394:	4b3c      	ldr	r3, [pc, #240]	@ (8009488 <prvAddNewTaskToReadyList+0x100>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3301      	adds	r3, #1
 800939a:	4a3b      	ldr	r2, [pc, #236]	@ (8009488 <prvAddNewTaskToReadyList+0x100>)
 800939c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800939e:	4b3b      	ldr	r3, [pc, #236]	@ (800948c <prvAddNewTaskToReadyList+0x104>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093a6:	4a39      	ldr	r2, [pc, #228]	@ (800948c <prvAddNewTaskToReadyList+0x104>)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093ac:	4b36      	ldr	r3, [pc, #216]	@ (8009488 <prvAddNewTaskToReadyList+0x100>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d110      	bne.n	80093d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093b4:	f000 fdae 	bl	8009f14 <prvInitialiseTaskLists>
 80093b8:	e00d      	b.n	80093d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093ba:	4b35      	ldr	r3, [pc, #212]	@ (8009490 <prvAddNewTaskToReadyList+0x108>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d109      	bne.n	80093d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093c2:	4b32      	ldr	r3, [pc, #200]	@ (800948c <prvAddNewTaskToReadyList+0x104>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d802      	bhi.n	80093d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093d0:	4a2e      	ldr	r2, [pc, #184]	@ (800948c <prvAddNewTaskToReadyList+0x104>)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093d6:	4b2f      	ldr	r3, [pc, #188]	@ (8009494 <prvAddNewTaskToReadyList+0x10c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3301      	adds	r3, #1
 80093dc:	4a2d      	ldr	r2, [pc, #180]	@ (8009494 <prvAddNewTaskToReadyList+0x10c>)
 80093de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80093e0:	4b2c      	ldr	r3, [pc, #176]	@ (8009494 <prvAddNewTaskToReadyList+0x10c>)
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d016      	beq.n	800941c <prvAddNewTaskToReadyList+0x94>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f003 fd07 	bl	800ce04 <SEGGER_SYSVIEW_OnTaskCreate>
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009406:	461d      	mov	r5, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	461c      	mov	r4, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009412:	1ae3      	subs	r3, r4, r3
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	462b      	mov	r3, r5
 8009418:	f001 feb0 	bl	800b17c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4618      	mov	r0, r3
 8009420:	f003 fd74 	bl	800cf0c <SEGGER_SYSVIEW_OnTaskStartReady>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009428:	4b1b      	ldr	r3, [pc, #108]	@ (8009498 <prvAddNewTaskToReadyList+0x110>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d903      	bls.n	8009438 <prvAddNewTaskToReadyList+0xb0>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009434:	4a18      	ldr	r2, [pc, #96]	@ (8009498 <prvAddNewTaskToReadyList+0x110>)
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800943c:	4613      	mov	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4413      	add	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4a15      	ldr	r2, [pc, #84]	@ (800949c <prvAddNewTaskToReadyList+0x114>)
 8009446:	441a      	add	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3304      	adds	r3, #4
 800944c:	4619      	mov	r1, r3
 800944e:	4610      	mov	r0, r2
 8009450:	f7ff f85d 	bl	800850e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009454:	f001 fb32 	bl	800aabc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009458:	4b0d      	ldr	r3, [pc, #52]	@ (8009490 <prvAddNewTaskToReadyList+0x108>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00e      	beq.n	800947e <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009460:	4b0a      	ldr	r3, [pc, #40]	@ (800948c <prvAddNewTaskToReadyList+0x104>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800946a:	429a      	cmp	r2, r3
 800946c:	d207      	bcs.n	800947e <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800946e:	4b0c      	ldr	r3, [pc, #48]	@ (80094a0 <prvAddNewTaskToReadyList+0x118>)
 8009470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800947e:	bf00      	nop
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bdb0      	pop	{r4, r5, r7, pc}
 8009486:	bf00      	nop
 8009488:	2000121c 	.word	0x2000121c
 800948c:	20000d48 	.word	0x20000d48
 8009490:	20001228 	.word	0x20001228
 8009494:	20001238 	.word	0x20001238
 8009498:	20001224 	.word	0x20001224
 800949c:	20000d4c 	.word	0x20000d4c
 80094a0:	e000ed04 	.word	0xe000ed04

080094a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094ac:	2300      	movs	r3, #0
 80094ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d01c      	beq.n	80094f0 <vTaskDelay+0x4c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094b6:	4b16      	ldr	r3, [pc, #88]	@ (8009510 <vTaskDelay+0x6c>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00b      	beq.n	80094d6 <vTaskDelay+0x32>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	60bb      	str	r3, [r7, #8]
}
 80094d0:	bf00      	nop
 80094d2:	bf00      	nop
 80094d4:	e7fd      	b.n	80094d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80094d6:	f000 f9b7 	bl	8009848 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	2023      	movs	r0, #35	@ 0x23
 80094de:	f003 f80f 	bl	800c500 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094e2:	2100      	movs	r1, #0
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fe73 	bl	800a1d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094ea:	f000 f9bb 	bl	8009864 <xTaskResumeAll>
 80094ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d107      	bne.n	8009506 <vTaskDelay+0x62>
		{
			portYIELD_WITHIN_API();
 80094f6:	4b07      	ldr	r3, [pc, #28]	@ (8009514 <vTaskDelay+0x70>)
 80094f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009506:	bf00      	nop
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	20001244 	.word	0x20001244
 8009514:	e000ed04 	.word	0xe000ed04

08009518 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009520:	f001 fa9c 	bl	800aa5c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d102      	bne.n	8009530 <vTaskSuspend+0x18>
 800952a:	4b35      	ldr	r3, [pc, #212]	@ (8009600 <vTaskSuspend+0xe8>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	e000      	b.n	8009532 <vTaskSuspend+0x1a>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4618      	mov	r0, r3
 8009538:	f003 fd2a 	bl	800cf90 <SEGGER_SYSVIEW_ShrinkId>
 800953c:	4603      	mov	r3, r0
 800953e:	4619      	mov	r1, r3
 8009540:	2029      	movs	r0, #41	@ 0x29
 8009542:	f002 ffdd 	bl	800c500 <SEGGER_SYSVIEW_RecordU32>

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	3304      	adds	r3, #4
 800954a:	4618      	mov	r0, r3
 800954c:	f7ff f83a 	bl	80085c4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009554:	2b00      	cmp	r3, #0
 8009556:	d004      	beq.n	8009562 <vTaskSuspend+0x4a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3318      	adds	r3, #24
 800955c:	4618      	mov	r0, r3
 800955e:	f7ff f831 	bl	80085c4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	3304      	adds	r3, #4
 8009566:	4619      	mov	r1, r3
 8009568:	4826      	ldr	r0, [pc, #152]	@ (8009604 <vTaskSuspend+0xec>)
 800956a:	f7fe ffd0 	bl	800850e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b01      	cmp	r3, #1
 8009578:	d103      	bne.n	8009582 <vTaskSuspend+0x6a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009582:	f001 fa9b 	bl	800aabc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009586:	4b20      	ldr	r3, [pc, #128]	@ (8009608 <vTaskSuspend+0xf0>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d005      	beq.n	800959a <vTaskSuspend+0x82>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800958e:	f001 fa65 	bl	800aa5c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009592:	f000 fd63 	bl	800a05c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009596:	f001 fa91 	bl	800aabc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800959a:	4b19      	ldr	r3, [pc, #100]	@ (8009600 <vTaskSuspend+0xe8>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d128      	bne.n	80095f6 <vTaskSuspend+0xde>
		{
			if( xSchedulerRunning != pdFALSE )
 80095a4:	4b18      	ldr	r3, [pc, #96]	@ (8009608 <vTaskSuspend+0xf0>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d018      	beq.n	80095de <vTaskSuspend+0xc6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80095ac:	4b17      	ldr	r3, [pc, #92]	@ (800960c <vTaskSuspend+0xf4>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00b      	beq.n	80095cc <vTaskSuspend+0xb4>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	60bb      	str	r3, [r7, #8]
}
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	e7fd      	b.n	80095c8 <vTaskSuspend+0xb0>
				portYIELD_WITHIN_API();
 80095cc:	4b10      	ldr	r3, [pc, #64]	@ (8009610 <vTaskSuspend+0xf8>)
 80095ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095dc:	e00b      	b.n	80095f6 <vTaskSuspend+0xde>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80095de:	4b09      	ldr	r3, [pc, #36]	@ (8009604 <vTaskSuspend+0xec>)
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009614 <vTaskSuspend+0xfc>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d103      	bne.n	80095f2 <vTaskSuspend+0xda>
					pxCurrentTCB = NULL;
 80095ea:	4b05      	ldr	r3, [pc, #20]	@ (8009600 <vTaskSuspend+0xe8>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	601a      	str	r2, [r3, #0]
	}
 80095f0:	e001      	b.n	80095f6 <vTaskSuspend+0xde>
					vTaskSwitchContext();
 80095f2:	f000 fabd 	bl	8009b70 <vTaskSwitchContext>
	}
 80095f6:	bf00      	nop
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20000d48 	.word	0x20000d48
 8009604:	20001208 	.word	0x20001208
 8009608:	20001228 	.word	0x20001228
 800960c:	20001244 	.word	0x20001244
 8009610:	e000ed04 	.word	0xe000ed04
 8009614:	2000121c 	.word	0x2000121c

08009618 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009618:	b480      	push	{r7}
 800961a:	b087      	sub	sp, #28
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009620:	2300      	movs	r3, #0
 8009622:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10b      	bne.n	8009646 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	60fb      	str	r3, [r7, #12]
}
 8009640:	bf00      	nop
 8009642:	bf00      	nop
 8009644:	e7fd      	b.n	8009642 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	4a0f      	ldr	r2, [pc, #60]	@ (8009688 <prvTaskIsTaskSuspended+0x70>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d101      	bne.n	8009654 <prvTaskIsTaskSuspended+0x3c>
 8009650:	2301      	movs	r3, #1
 8009652:	e000      	b.n	8009656 <prvTaskIsTaskSuspended+0x3e>
 8009654:	2300      	movs	r3, #0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00f      	beq.n	800967a <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800965e:	4a0b      	ldr	r2, [pc, #44]	@ (800968c <prvTaskIsTaskSuspended+0x74>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d00a      	beq.n	800967a <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009668:	2b00      	cmp	r3, #0
 800966a:	d101      	bne.n	8009670 <prvTaskIsTaskSuspended+0x58>
 800966c:	2301      	movs	r3, #1
 800966e:	e000      	b.n	8009672 <prvTaskIsTaskSuspended+0x5a>
 8009670:	2300      	movs	r3, #0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 8009676:	2301      	movs	r3, #1
 8009678:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800967a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800967c:	4618      	mov	r0, r3
 800967e:	371c      	adds	r7, #28
 8009680:	46bd      	mov	sp, r7
 8009682:	bc80      	pop	{r7}
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	20001208 	.word	0x20001208
 800968c:	200011dc 	.word	0x200011dc

08009690 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10b      	bne.n	80096ba <vTaskResume+0x2a>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	60bb      	str	r3, [r7, #8]
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop
 80096b8:	e7fd      	b.n	80096b6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d047      	beq.n	8009750 <vTaskResume+0xc0>
 80096c0:	4b25      	ldr	r3, [pc, #148]	@ (8009758 <vTaskResume+0xc8>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d042      	beq.n	8009750 <vTaskResume+0xc0>
		{
			taskENTER_CRITICAL();
 80096ca:	f001 f9c7 	bl	800aa5c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f7ff ffa2 	bl	8009618 <prvTaskIsTaskSuspended>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d038      	beq.n	800974c <vTaskResume+0xbc>
				{
					traceTASK_RESUME( pxTCB );
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	4618      	mov	r0, r3
 80096de:	f003 fc57 	bl	800cf90 <SEGGER_SYSVIEW_ShrinkId>
 80096e2:	4603      	mov	r3, r0
 80096e4:	4619      	mov	r1, r3
 80096e6:	202a      	movs	r0, #42	@ 0x2a
 80096e8:	f002 ff0a 	bl	800c500 <SEGGER_SYSVIEW_RecordU32>

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	3304      	adds	r3, #4
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fe ff67 	bl	80085c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f003 fc07 	bl	800cf0c <SEGGER_SYSVIEW_OnTaskStartReady>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009702:	4b16      	ldr	r3, [pc, #88]	@ (800975c <vTaskResume+0xcc>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	429a      	cmp	r2, r3
 8009708:	d903      	bls.n	8009712 <vTaskResume+0x82>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970e:	4a13      	ldr	r2, [pc, #76]	@ (800975c <vTaskResume+0xcc>)
 8009710:	6013      	str	r3, [r2, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4a10      	ldr	r2, [pc, #64]	@ (8009760 <vTaskResume+0xd0>)
 8009720:	441a      	add	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3304      	adds	r3, #4
 8009726:	4619      	mov	r1, r3
 8009728:	4610      	mov	r0, r2
 800972a:	f7fe fef0 	bl	800850e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009732:	4b09      	ldr	r3, [pc, #36]	@ (8009758 <vTaskResume+0xc8>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009738:	429a      	cmp	r2, r3
 800973a:	d307      	bcc.n	800974c <vTaskResume+0xbc>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800973c:	4b09      	ldr	r3, [pc, #36]	@ (8009764 <vTaskResume+0xd4>)
 800973e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009742:	601a      	str	r2, [r3, #0]
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800974c:	f001 f9b6 	bl	800aabc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009750:	bf00      	nop
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	20000d48 	.word	0x20000d48
 800975c:	20001224 	.word	0x20001224
 8009760:	20000d4c 	.word	0x20000d4c
 8009764:	e000ed04 	.word	0xe000ed04

08009768 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b08a      	sub	sp, #40	@ 0x28
 800976c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800976e:	2300      	movs	r3, #0
 8009770:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009772:	2300      	movs	r3, #0
 8009774:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009776:	463a      	mov	r2, r7
 8009778:	1d39      	adds	r1, r7, #4
 800977a:	f107 0308 	add.w	r3, r7, #8
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe fe68 	bl	8008454 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	9202      	str	r2, [sp, #8]
 800978c:	9301      	str	r3, [sp, #4]
 800978e:	2300      	movs	r3, #0
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	2300      	movs	r3, #0
 8009794:	460a      	mov	r2, r1
 8009796:	4924      	ldr	r1, [pc, #144]	@ (8009828 <vTaskStartScheduler+0xc0>)
 8009798:	4824      	ldr	r0, [pc, #144]	@ (800982c <vTaskStartScheduler+0xc4>)
 800979a:	f7ff fcb1 	bl	8009100 <xTaskCreateStatic>
 800979e:	4603      	mov	r3, r0
 80097a0:	4a23      	ldr	r2, [pc, #140]	@ (8009830 <vTaskStartScheduler+0xc8>)
 80097a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80097a4:	4b22      	ldr	r3, [pc, #136]	@ (8009830 <vTaskStartScheduler+0xc8>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80097ac:	2301      	movs	r3, #1
 80097ae:	617b      	str	r3, [r7, #20]
 80097b0:	e001      	b.n	80097b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80097b2:	2300      	movs	r3, #0
 80097b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d102      	bne.n	80097c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80097bc:	f000 fd5c 	bl	800a278 <xTimerCreateTimerTask>
 80097c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d11b      	bne.n	8009800 <vTaskStartScheduler+0x98>
	__asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	613b      	str	r3, [r7, #16]
}
 80097da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097dc:	4b15      	ldr	r3, [pc, #84]	@ (8009834 <vTaskStartScheduler+0xcc>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3354      	adds	r3, #84	@ 0x54
 80097e2:	4a15      	ldr	r2, [pc, #84]	@ (8009838 <vTaskStartScheduler+0xd0>)
 80097e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80097e6:	4b15      	ldr	r3, [pc, #84]	@ (800983c <vTaskStartScheduler+0xd4>)
 80097e8:	f04f 32ff 	mov.w	r2, #4294967295
 80097ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097ee:	4b14      	ldr	r3, [pc, #80]	@ (8009840 <vTaskStartScheduler+0xd8>)
 80097f0:	2201      	movs	r2, #1
 80097f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80097f4:	4b13      	ldr	r3, [pc, #76]	@ (8009844 <vTaskStartScheduler+0xdc>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80097fa:	f001 f8bd 	bl	800a978 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80097fe:	e00f      	b.n	8009820 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009806:	d10b      	bne.n	8009820 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	60fb      	str	r3, [r7, #12]
}
 800981a:	bf00      	nop
 800981c:	bf00      	nop
 800981e:	e7fd      	b.n	800981c <vTaskStartScheduler+0xb4>
}
 8009820:	bf00      	nop
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	08010160 	.word	0x08010160
 800982c:	08009ee1 	.word	0x08009ee1
 8009830:	20001240 	.word	0x20001240
 8009834:	20000d48 	.word	0x20000d48
 8009838:	2000019c 	.word	0x2000019c
 800983c:	2000123c 	.word	0x2000123c
 8009840:	20001228 	.word	0x20001228
 8009844:	20001220 	.word	0x20001220

08009848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009848:	b480      	push	{r7}
 800984a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800984c:	4b04      	ldr	r3, [pc, #16]	@ (8009860 <vTaskSuspendAll+0x18>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	3301      	adds	r3, #1
 8009852:	4a03      	ldr	r2, [pc, #12]	@ (8009860 <vTaskSuspendAll+0x18>)
 8009854:	6013      	str	r3, [r2, #0]
}
 8009856:	bf00      	nop
 8009858:	46bd      	mov	sp, r7
 800985a:	bc80      	pop	{r7}
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	20001244 	.word	0x20001244

08009864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800986e:	2300      	movs	r3, #0
 8009870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009872:	4b44      	ldr	r3, [pc, #272]	@ (8009984 <xTaskResumeAll+0x120>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10b      	bne.n	8009892 <xTaskResumeAll+0x2e>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	603b      	str	r3, [r7, #0]
}
 800988c:	bf00      	nop
 800988e:	bf00      	nop
 8009890:	e7fd      	b.n	800988e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009892:	f001 f8e3 	bl	800aa5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009896:	4b3b      	ldr	r3, [pc, #236]	@ (8009984 <xTaskResumeAll+0x120>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3b01      	subs	r3, #1
 800989c:	4a39      	ldr	r2, [pc, #228]	@ (8009984 <xTaskResumeAll+0x120>)
 800989e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098a0:	4b38      	ldr	r3, [pc, #224]	@ (8009984 <xTaskResumeAll+0x120>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d166      	bne.n	8009976 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80098a8:	4b37      	ldr	r3, [pc, #220]	@ (8009988 <xTaskResumeAll+0x124>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d062      	beq.n	8009976 <xTaskResumeAll+0x112>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098b0:	e033      	b.n	800991a <xTaskResumeAll+0xb6>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80098b2:	4b36      	ldr	r3, [pc, #216]	@ (800998c <xTaskResumeAll+0x128>)
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	3318      	adds	r3, #24
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe fe80 	bl	80085c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	3304      	adds	r3, #4
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fe fe7b 	bl	80085c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f003 fb1b 	bl	800cf0c <SEGGER_SYSVIEW_OnTaskStartReady>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098da:	4b2d      	ldr	r3, [pc, #180]	@ (8009990 <xTaskResumeAll+0x12c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d903      	bls.n	80098ea <xTaskResumeAll+0x86>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e6:	4a2a      	ldr	r2, [pc, #168]	@ (8009990 <xTaskResumeAll+0x12c>)
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ee:	4613      	mov	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4413      	add	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4a27      	ldr	r2, [pc, #156]	@ (8009994 <xTaskResumeAll+0x130>)
 80098f8:	441a      	add	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	3304      	adds	r3, #4
 80098fe:	4619      	mov	r1, r3
 8009900:	4610      	mov	r0, r2
 8009902:	f7fe fe04 	bl	800850e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800990a:	4b23      	ldr	r3, [pc, #140]	@ (8009998 <xTaskResumeAll+0x134>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009910:	429a      	cmp	r2, r3
 8009912:	d302      	bcc.n	800991a <xTaskResumeAll+0xb6>
					{
						xYieldPending = pdTRUE;
 8009914:	4b21      	ldr	r3, [pc, #132]	@ (800999c <xTaskResumeAll+0x138>)
 8009916:	2201      	movs	r2, #1
 8009918:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800991a:	4b1c      	ldr	r3, [pc, #112]	@ (800998c <xTaskResumeAll+0x128>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1c7      	bne.n	80098b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d001      	beq.n	800992c <xTaskResumeAll+0xc8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009928:	f000 fb98 	bl	800a05c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800992c:	4b1c      	ldr	r3, [pc, #112]	@ (80099a0 <xTaskResumeAll+0x13c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d010      	beq.n	800995a <xTaskResumeAll+0xf6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009938:	f000 f856 	bl	80099e8 <xTaskIncrementTick>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <xTaskResumeAll+0xe4>
							{
								xYieldPending = pdTRUE;
 8009942:	4b16      	ldr	r3, [pc, #88]	@ (800999c <xTaskResumeAll+0x138>)
 8009944:	2201      	movs	r2, #1
 8009946:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	3b01      	subs	r3, #1
 800994c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1f1      	bne.n	8009938 <xTaskResumeAll+0xd4>

						uxPendedTicks = 0;
 8009954:	4b12      	ldr	r3, [pc, #72]	@ (80099a0 <xTaskResumeAll+0x13c>)
 8009956:	2200      	movs	r2, #0
 8009958:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800995a:	4b10      	ldr	r3, [pc, #64]	@ (800999c <xTaskResumeAll+0x138>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d009      	beq.n	8009976 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009962:	2301      	movs	r3, #1
 8009964:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009966:	4b0f      	ldr	r3, [pc, #60]	@ (80099a4 <xTaskResumeAll+0x140>)
 8009968:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009976:	f001 f8a1 	bl	800aabc <vPortExitCritical>

	return xAlreadyYielded;
 800997a:	68bb      	ldr	r3, [r7, #8]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	20001244 	.word	0x20001244
 8009988:	2000121c 	.word	0x2000121c
 800998c:	200011dc 	.word	0x200011dc
 8009990:	20001224 	.word	0x20001224
 8009994:	20000d4c 	.word	0x20000d4c
 8009998:	20000d48 	.word	0x20000d48
 800999c:	20001230 	.word	0x20001230
 80099a0:	2000122c 	.word	0x2000122c
 80099a4:	e000ed04 	.word	0xe000ed04

080099a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80099ae:	4b04      	ldr	r3, [pc, #16]	@ (80099c0 <xTaskGetTickCount+0x18>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80099b4:	687b      	ldr	r3, [r7, #4]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bc80      	pop	{r7}
 80099be:	4770      	bx	lr
 80099c0:	20001220 	.word	0x20001220

080099c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099ca:	f001 f909 	bl	800abe0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80099ce:	2300      	movs	r3, #0
 80099d0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80099d2:	4b04      	ldr	r3, [pc, #16]	@ (80099e4 <xTaskGetTickCountFromISR+0x20>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099d8:	683b      	ldr	r3, [r7, #0]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	20001220 	.word	0x20001220

080099e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80099ee:	2300      	movs	r3, #0
 80099f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099f2:	4b54      	ldr	r3, [pc, #336]	@ (8009b44 <xTaskIncrementTick+0x15c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f040 8093 	bne.w	8009b22 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099fc:	4b52      	ldr	r3, [pc, #328]	@ (8009b48 <xTaskIncrementTick+0x160>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3301      	adds	r3, #1
 8009a02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a04:	4a50      	ldr	r2, [pc, #320]	@ (8009b48 <xTaskIncrementTick+0x160>)
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d121      	bne.n	8009a54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a10:	4b4e      	ldr	r3, [pc, #312]	@ (8009b4c <xTaskIncrementTick+0x164>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00b      	beq.n	8009a32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	603b      	str	r3, [r7, #0]
}
 8009a2c:	bf00      	nop
 8009a2e:	bf00      	nop
 8009a30:	e7fd      	b.n	8009a2e <xTaskIncrementTick+0x46>
 8009a32:	4b46      	ldr	r3, [pc, #280]	@ (8009b4c <xTaskIncrementTick+0x164>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	60fb      	str	r3, [r7, #12]
 8009a38:	4b45      	ldr	r3, [pc, #276]	@ (8009b50 <xTaskIncrementTick+0x168>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a43      	ldr	r2, [pc, #268]	@ (8009b4c <xTaskIncrementTick+0x164>)
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	4a43      	ldr	r2, [pc, #268]	@ (8009b50 <xTaskIncrementTick+0x168>)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6013      	str	r3, [r2, #0]
 8009a46:	4b43      	ldr	r3, [pc, #268]	@ (8009b54 <xTaskIncrementTick+0x16c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	4a41      	ldr	r2, [pc, #260]	@ (8009b54 <xTaskIncrementTick+0x16c>)
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	f000 fb04 	bl	800a05c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a54:	4b40      	ldr	r3, [pc, #256]	@ (8009b58 <xTaskIncrementTick+0x170>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	693a      	ldr	r2, [r7, #16]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d352      	bcc.n	8009b04 <xTaskIncrementTick+0x11c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8009b4c <xTaskIncrementTick+0x164>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d101      	bne.n	8009a6c <xTaskIncrementTick+0x84>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e000      	b.n	8009a6e <xTaskIncrementTick+0x86>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d004      	beq.n	8009a7c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a72:	4b39      	ldr	r3, [pc, #228]	@ (8009b58 <xTaskIncrementTick+0x170>)
 8009a74:	f04f 32ff 	mov.w	r2, #4294967295
 8009a78:	601a      	str	r2, [r3, #0]
					break;
 8009a7a:	e043      	b.n	8009b04 <xTaskIncrementTick+0x11c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009a7c:	4b33      	ldr	r3, [pc, #204]	@ (8009b4c <xTaskIncrementTick+0x164>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d203      	bcs.n	8009a9c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a94:	4a30      	ldr	r2, [pc, #192]	@ (8009b58 <xTaskIncrementTick+0x170>)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6013      	str	r3, [r2, #0]
						break;
 8009a9a:	e033      	b.n	8009b04 <xTaskIncrementTick+0x11c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe fd8f 	bl	80085c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d004      	beq.n	8009ab8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	3318      	adds	r3, #24
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe fd86 	bl	80085c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f003 fa26 	bl	800cf0c <SEGGER_SYSVIEW_OnTaskStartReady>
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac4:	4b25      	ldr	r3, [pc, #148]	@ (8009b5c <xTaskIncrementTick+0x174>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d903      	bls.n	8009ad4 <xTaskIncrementTick+0xec>
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad0:	4a22      	ldr	r2, [pc, #136]	@ (8009b5c <xTaskIncrementTick+0x174>)
 8009ad2:	6013      	str	r3, [r2, #0]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad8:	4613      	mov	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4a1f      	ldr	r2, [pc, #124]	@ (8009b60 <xTaskIncrementTick+0x178>)
 8009ae2:	441a      	add	r2, r3
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	4619      	mov	r1, r3
 8009aea:	4610      	mov	r0, r2
 8009aec:	f7fe fd0f 	bl	800850e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af4:	4b1b      	ldr	r3, [pc, #108]	@ (8009b64 <xTaskIncrementTick+0x17c>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d3af      	bcc.n	8009a5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009afe:	2301      	movs	r3, #1
 8009b00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b02:	e7ac      	b.n	8009a5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b04:	4b17      	ldr	r3, [pc, #92]	@ (8009b64 <xTaskIncrementTick+0x17c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b0a:	4915      	ldr	r1, [pc, #84]	@ (8009b60 <xTaskIncrementTick+0x178>)
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	440b      	add	r3, r1
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d907      	bls.n	8009b2c <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	617b      	str	r3, [r7, #20]
 8009b20:	e004      	b.n	8009b2c <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009b22:	4b11      	ldr	r3, [pc, #68]	@ (8009b68 <xTaskIncrementTick+0x180>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	3301      	adds	r3, #1
 8009b28:	4a0f      	ldr	r2, [pc, #60]	@ (8009b68 <xTaskIncrementTick+0x180>)
 8009b2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8009b6c <xTaskIncrementTick+0x184>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <xTaskIncrementTick+0x150>
		{
			xSwitchRequired = pdTRUE;
 8009b34:	2301      	movs	r3, #1
 8009b36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009b38:	697b      	ldr	r3, [r7, #20]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3718      	adds	r7, #24
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20001244 	.word	0x20001244
 8009b48:	20001220 	.word	0x20001220
 8009b4c:	200011d4 	.word	0x200011d4
 8009b50:	200011d8 	.word	0x200011d8
 8009b54:	20001234 	.word	0x20001234
 8009b58:	2000123c 	.word	0x2000123c
 8009b5c:	20001224 	.word	0x20001224
 8009b60:	20000d4c 	.word	0x20000d4c
 8009b64:	20000d48 	.word	0x20000d48
 8009b68:	2000122c 	.word	0x2000122c
 8009b6c:	20001230 	.word	0x20001230

08009b70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b76:	4b31      	ldr	r3, [pc, #196]	@ (8009c3c <vTaskSwitchContext+0xcc>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d003      	beq.n	8009b86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b7e:	4b30      	ldr	r3, [pc, #192]	@ (8009c40 <vTaskSwitchContext+0xd0>)
 8009b80:	2201      	movs	r2, #1
 8009b82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b84:	e055      	b.n	8009c32 <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 8009b86:	4b2e      	ldr	r3, [pc, #184]	@ (8009c40 <vTaskSwitchContext+0xd0>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8009c44 <vTaskSwitchContext+0xd4>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	60fb      	str	r3, [r7, #12]
 8009b92:	e011      	b.n	8009bb8 <vTaskSwitchContext+0x48>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10b      	bne.n	8009bb2 <vTaskSwitchContext+0x42>
	__asm volatile
 8009b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	607b      	str	r3, [r7, #4]
}
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
 8009bb0:	e7fd      	b.n	8009bae <vTaskSwitchContext+0x3e>
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	4923      	ldr	r1, [pc, #140]	@ (8009c48 <vTaskSwitchContext+0xd8>)
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	440b      	add	r3, r1
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d0e3      	beq.n	8009b94 <vTaskSwitchContext+0x24>
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8009c48 <vTaskSwitchContext+0xd8>)
 8009bd8:	4413      	add	r3, r2
 8009bda:	60bb      	str	r3, [r7, #8]
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	685a      	ldr	r2, [r3, #4]
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	605a      	str	r2, [r3, #4]
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	685a      	ldr	r2, [r3, #4]
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	3308      	adds	r3, #8
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d104      	bne.n	8009bfc <vTaskSwitchContext+0x8c>
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	605a      	str	r2, [r3, #4]
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	4a12      	ldr	r2, [pc, #72]	@ (8009c4c <vTaskSwitchContext+0xdc>)
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	4a0f      	ldr	r2, [pc, #60]	@ (8009c44 <vTaskSwitchContext+0xd4>)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8009c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8009c4c <vTaskSwitchContext+0xdc>)
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	4b0f      	ldr	r3, [pc, #60]	@ (8009c50 <vTaskSwitchContext+0xe0>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d102      	bne.n	8009c1e <vTaskSwitchContext+0xae>
 8009c18:	f003 f8d8 	bl	800cdcc <SEGGER_SYSVIEW_OnIdle>
 8009c1c:	e004      	b.n	8009c28 <vTaskSwitchContext+0xb8>
 8009c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c4c <vTaskSwitchContext+0xdc>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f003 f930 	bl	800ce88 <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c28:	4b08      	ldr	r3, [pc, #32]	@ (8009c4c <vTaskSwitchContext+0xdc>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3354      	adds	r3, #84	@ 0x54
 8009c2e:	4a09      	ldr	r2, [pc, #36]	@ (8009c54 <vTaskSwitchContext+0xe4>)
 8009c30:	6013      	str	r3, [r2, #0]
}
 8009c32:	bf00      	nop
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	20001244 	.word	0x20001244
 8009c40:	20001230 	.word	0x20001230
 8009c44:	20001224 	.word	0x20001224
 8009c48:	20000d4c 	.word	0x20000d4c
 8009c4c:	20000d48 	.word	0x20000d48
 8009c50:	20001240 	.word	0x20001240
 8009c54:	2000019c 	.word	0x2000019c

08009c58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10b      	bne.n	8009c80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6c:	f383 8811 	msr	BASEPRI, r3
 8009c70:	f3bf 8f6f 	isb	sy
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	60fb      	str	r3, [r7, #12]
}
 8009c7a:	bf00      	nop
 8009c7c:	bf00      	nop
 8009c7e:	e7fd      	b.n	8009c7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c80:	4b07      	ldr	r3, [pc, #28]	@ (8009ca0 <vTaskPlaceOnEventList+0x48>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	3318      	adds	r3, #24
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f7fe fc63 	bl	8008554 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c8e:	2101      	movs	r1, #1
 8009c90:	6838      	ldr	r0, [r7, #0]
 8009c92:	f000 fa9d 	bl	800a1d0 <prvAddCurrentTaskToDelayedList>
}
 8009c96:	bf00      	nop
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20000d48 	.word	0x20000d48

08009ca4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10b      	bne.n	8009cce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	617b      	str	r3, [r7, #20]
}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	e7fd      	b.n	8009cca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cce:	4b0c      	ldr	r3, [pc, #48]	@ (8009d00 <vTaskPlaceOnEventListRestricted+0x5c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3318      	adds	r3, #24
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f7fe fc19 	bl	800850e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d002      	beq.n	8009ce8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8009ce8:	2024      	movs	r0, #36	@ 0x24
 8009cea:	f002 fbeb 	bl	800c4c4 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	68b8      	ldr	r0, [r7, #8]
 8009cf2:	f000 fa6d 	bl	800a1d0 <prvAddCurrentTaskToDelayedList>
	}
 8009cf6:	bf00      	nop
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000d48 	.word	0x20000d48

08009d04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10b      	bne.n	8009d32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	60fb      	str	r3, [r7, #12]
}
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	e7fd      	b.n	8009d2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	3318      	adds	r3, #24
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe fc44 	bl	80085c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8009dbc <xTaskRemoveFromEventList+0xb8>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d121      	bne.n	8009d88 <xTaskRemoveFromEventList+0x84>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	3304      	adds	r3, #4
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fe fc3b 	bl	80085c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f003 f8db 	bl	800cf0c <SEGGER_SYSVIEW_OnTaskStartReady>
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d5a:	4b19      	ldr	r3, [pc, #100]	@ (8009dc0 <xTaskRemoveFromEventList+0xbc>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d903      	bls.n	8009d6a <xTaskRemoveFromEventList+0x66>
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d66:	4a16      	ldr	r2, [pc, #88]	@ (8009dc0 <xTaskRemoveFromEventList+0xbc>)
 8009d68:	6013      	str	r3, [r2, #0]
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d6e:	4613      	mov	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4413      	add	r3, r2
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	4a13      	ldr	r2, [pc, #76]	@ (8009dc4 <xTaskRemoveFromEventList+0xc0>)
 8009d78:	441a      	add	r2, r3
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	4619      	mov	r1, r3
 8009d80:	4610      	mov	r0, r2
 8009d82:	f7fe fbc4 	bl	800850e <vListInsertEnd>
 8009d86:	e005      	b.n	8009d94 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	3318      	adds	r3, #24
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	480e      	ldr	r0, [pc, #56]	@ (8009dc8 <xTaskRemoveFromEventList+0xc4>)
 8009d90:	f7fe fbbd 	bl	800850e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d98:	4b0c      	ldr	r3, [pc, #48]	@ (8009dcc <xTaskRemoveFromEventList+0xc8>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d905      	bls.n	8009dae <xTaskRemoveFromEventList+0xaa>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009da2:	2301      	movs	r3, #1
 8009da4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009da6:	4b0a      	ldr	r3, [pc, #40]	@ (8009dd0 <xTaskRemoveFromEventList+0xcc>)
 8009da8:	2201      	movs	r2, #1
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	e001      	b.n	8009db2 <xTaskRemoveFromEventList+0xae>
	}
	else
	{
		xReturn = pdFALSE;
 8009dae:	2300      	movs	r3, #0
 8009db0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009db2:	697b      	ldr	r3, [r7, #20]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3718      	adds	r7, #24
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20001244 	.word	0x20001244
 8009dc0:	20001224 	.word	0x20001224
 8009dc4:	20000d4c 	.word	0x20000d4c
 8009dc8:	200011dc 	.word	0x200011dc
 8009dcc:	20000d48 	.word	0x20000d48
 8009dd0:	20001230 	.word	0x20001230

08009dd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ddc:	4b06      	ldr	r3, [pc, #24]	@ (8009df8 <vTaskInternalSetTimeOutState+0x24>)
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009de4:	4b05      	ldr	r3, [pc, #20]	@ (8009dfc <vTaskInternalSetTimeOutState+0x28>)
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	605a      	str	r2, [r3, #4]
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bc80      	pop	{r7}
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	20001234 	.word	0x20001234
 8009dfc:	20001220 	.word	0x20001220

08009e00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b088      	sub	sp, #32
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10b      	bne.n	8009e28 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	613b      	str	r3, [r7, #16]
}
 8009e22:	bf00      	nop
 8009e24:	bf00      	nop
 8009e26:	e7fd      	b.n	8009e24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10b      	bne.n	8009e46 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	60fb      	str	r3, [r7, #12]
}
 8009e40:	bf00      	nop
 8009e42:	bf00      	nop
 8009e44:	e7fd      	b.n	8009e42 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009e46:	f000 fe09 	bl	800aa5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8009ec0 <xTaskCheckForTimeOut+0xc0>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	69ba      	ldr	r2, [r7, #24]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e62:	d102      	bne.n	8009e6a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009e64:	2300      	movs	r3, #0
 8009e66:	61fb      	str	r3, [r7, #28]
 8009e68:	e023      	b.n	8009eb2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	4b15      	ldr	r3, [pc, #84]	@ (8009ec4 <xTaskCheckForTimeOut+0xc4>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d007      	beq.n	8009e86 <xTaskCheckForTimeOut+0x86>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	69ba      	ldr	r2, [r7, #24]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d302      	bcc.n	8009e86 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009e80:	2301      	movs	r3, #1
 8009e82:	61fb      	str	r3, [r7, #28]
 8009e84:	e015      	b.n	8009eb2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d20b      	bcs.n	8009ea8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	1ad2      	subs	r2, r2, r3
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7ff ff99 	bl	8009dd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	61fb      	str	r3, [r7, #28]
 8009ea6:	e004      	b.n	8009eb2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009eb2:	f000 fe03 	bl	800aabc <vPortExitCritical>

	return xReturn;
 8009eb6:	69fb      	ldr	r3, [r7, #28]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3720      	adds	r7, #32
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	20001220 	.word	0x20001220
 8009ec4:	20001234 	.word	0x20001234

08009ec8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009ec8:	b480      	push	{r7}
 8009eca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ecc:	4b03      	ldr	r3, [pc, #12]	@ (8009edc <vTaskMissedYield+0x14>)
 8009ece:	2201      	movs	r2, #1
 8009ed0:	601a      	str	r2, [r3, #0]
}
 8009ed2:	bf00      	nop
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bc80      	pop	{r7}
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	20001230 	.word	0x20001230

08009ee0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ee8:	f000 f854 	bl	8009f94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009eec:	4b07      	ldr	r3, [pc, #28]	@ (8009f0c <prvIdleTask+0x2c>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d907      	bls.n	8009f04 <prvIdleTask+0x24>
			{
				taskYIELD();
 8009ef4:	4b06      	ldr	r3, [pc, #24]	@ (8009f10 <prvIdleTask+0x30>)
 8009ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009f04:	f7f7 f950 	bl	80011a8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009f08:	e7ee      	b.n	8009ee8 <prvIdleTask+0x8>
 8009f0a:	bf00      	nop
 8009f0c:	20000d4c 	.word	0x20000d4c
 8009f10:	e000ed04 	.word	0xe000ed04

08009f14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	607b      	str	r3, [r7, #4]
 8009f1e:	e00c      	b.n	8009f3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	4613      	mov	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	4a12      	ldr	r2, [pc, #72]	@ (8009f74 <prvInitialiseTaskLists+0x60>)
 8009f2c:	4413      	add	r3, r2
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe fac2 	bl	80084b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	3301      	adds	r3, #1
 8009f38:	607b      	str	r3, [r7, #4]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b37      	cmp	r3, #55	@ 0x37
 8009f3e:	d9ef      	bls.n	8009f20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f40:	480d      	ldr	r0, [pc, #52]	@ (8009f78 <prvInitialiseTaskLists+0x64>)
 8009f42:	f7fe fab9 	bl	80084b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f46:	480d      	ldr	r0, [pc, #52]	@ (8009f7c <prvInitialiseTaskLists+0x68>)
 8009f48:	f7fe fab6 	bl	80084b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f4c:	480c      	ldr	r0, [pc, #48]	@ (8009f80 <prvInitialiseTaskLists+0x6c>)
 8009f4e:	f7fe fab3 	bl	80084b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009f52:	480c      	ldr	r0, [pc, #48]	@ (8009f84 <prvInitialiseTaskLists+0x70>)
 8009f54:	f7fe fab0 	bl	80084b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009f58:	480b      	ldr	r0, [pc, #44]	@ (8009f88 <prvInitialiseTaskLists+0x74>)
 8009f5a:	f7fe faad 	bl	80084b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8009f8c <prvInitialiseTaskLists+0x78>)
 8009f60:	4a05      	ldr	r2, [pc, #20]	@ (8009f78 <prvInitialiseTaskLists+0x64>)
 8009f62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f64:	4b0a      	ldr	r3, [pc, #40]	@ (8009f90 <prvInitialiseTaskLists+0x7c>)
 8009f66:	4a05      	ldr	r2, [pc, #20]	@ (8009f7c <prvInitialiseTaskLists+0x68>)
 8009f68:	601a      	str	r2, [r3, #0]
}
 8009f6a:	bf00      	nop
 8009f6c:	3708      	adds	r7, #8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	20000d4c 	.word	0x20000d4c
 8009f78:	200011ac 	.word	0x200011ac
 8009f7c:	200011c0 	.word	0x200011c0
 8009f80:	200011dc 	.word	0x200011dc
 8009f84:	200011f0 	.word	0x200011f0
 8009f88:	20001208 	.word	0x20001208
 8009f8c:	200011d4 	.word	0x200011d4
 8009f90:	200011d8 	.word	0x200011d8

08009f94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f9a:	e019      	b.n	8009fd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009f9c:	f000 fd5e 	bl	800aa5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009fa0:	4b10      	ldr	r3, [pc, #64]	@ (8009fe4 <prvCheckTasksWaitingTermination+0x50>)
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	3304      	adds	r3, #4
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7fe fb09 	bl	80085c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe8 <prvCheckTasksWaitingTermination+0x54>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8009fe8 <prvCheckTasksWaitingTermination+0x54>)
 8009fba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8009fec <prvCheckTasksWaitingTermination+0x58>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8009fec <prvCheckTasksWaitingTermination+0x58>)
 8009fc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009fc6:	f000 fd79 	bl	800aabc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f810 	bl	8009ff0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fd0:	4b06      	ldr	r3, [pc, #24]	@ (8009fec <prvCheckTasksWaitingTermination+0x58>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d1e1      	bne.n	8009f9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	200011f0 	.word	0x200011f0
 8009fe8:	2000121c 	.word	0x2000121c
 8009fec:	20001204 	.word	0x20001204

08009ff0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	3354      	adds	r3, #84	@ 0x54
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f003 ffad 	bl	800df5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d108      	bne.n	800a01e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a010:	4618      	mov	r0, r3
 800a012:	f000 feed 	bl	800adf0 <vPortFree>
				vPortFree( pxTCB );
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 feea 	bl	800adf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a01c:	e019      	b.n	800a052 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a024:	2b01      	cmp	r3, #1
 800a026:	d103      	bne.n	800a030 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fee1 	bl	800adf0 <vPortFree>
	}
 800a02e:	e010      	b.n	800a052 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a036:	2b02      	cmp	r3, #2
 800a038:	d00b      	beq.n	800a052 <prvDeleteTCB+0x62>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	60fb      	str	r3, [r7, #12]
}
 800a04c:	bf00      	nop
 800a04e:	bf00      	nop
 800a050:	e7fd      	b.n	800a04e <prvDeleteTCB+0x5e>
	}
 800a052:	bf00      	nop
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a062:	4b0e      	ldr	r3, [pc, #56]	@ (800a09c <prvResetNextTaskUnblockTime+0x40>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d101      	bne.n	800a070 <prvResetNextTaskUnblockTime+0x14>
 800a06c:	2301      	movs	r3, #1
 800a06e:	e000      	b.n	800a072 <prvResetNextTaskUnblockTime+0x16>
 800a070:	2300      	movs	r3, #0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d004      	beq.n	800a080 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a076:	4b0a      	ldr	r3, [pc, #40]	@ (800a0a0 <prvResetNextTaskUnblockTime+0x44>)
 800a078:	f04f 32ff 	mov.w	r2, #4294967295
 800a07c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a07e:	e008      	b.n	800a092 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a080:	4b06      	ldr	r3, [pc, #24]	@ (800a09c <prvResetNextTaskUnblockTime+0x40>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	4a04      	ldr	r2, [pc, #16]	@ (800a0a0 <prvResetNextTaskUnblockTime+0x44>)
 800a090:	6013      	str	r3, [r2, #0]
}
 800a092:	bf00      	nop
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	bc80      	pop	{r7}
 800a09a:	4770      	bx	lr
 800a09c:	200011d4 	.word	0x200011d4
 800a0a0:	2000123c 	.word	0x2000123c

0800a0a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a0aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d8 <xTaskGetSchedulerState+0x34>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d102      	bne.n	800a0b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	607b      	str	r3, [r7, #4]
 800a0b6:	e008      	b.n	800a0ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0b8:	4b08      	ldr	r3, [pc, #32]	@ (800a0dc <xTaskGetSchedulerState+0x38>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d102      	bne.n	800a0c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	607b      	str	r3, [r7, #4]
 800a0c4:	e001      	b.n	800a0ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a0ca:	687b      	ldr	r3, [r7, #4]
	}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bc80      	pop	{r7}
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	20001228 	.word	0x20001228
 800a0dc:	20001244 	.word	0x20001244

0800a0e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d061      	beq.n	800a1ba <xTaskPriorityDisinherit+0xda>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a0f6:	4b33      	ldr	r3, [pc, #204]	@ (800a1c4 <xTaskPriorityDisinherit+0xe4>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d00b      	beq.n	800a118 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	60fb      	str	r3, [r7, #12]
}
 800a112:	bf00      	nop
 800a114:	bf00      	nop
 800a116:	e7fd      	b.n	800a114 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10b      	bne.n	800a138 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	60bb      	str	r3, [r7, #8]
}
 800a132:	bf00      	nop
 800a134:	bf00      	nop
 800a136:	e7fd      	b.n	800a134 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a13c:	1e5a      	subs	r2, r3, #1
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d035      	beq.n	800a1ba <xTaskPriorityDisinherit+0xda>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a152:	2b00      	cmp	r3, #0
 800a154:	d131      	bne.n	800a1ba <xTaskPriorityDisinherit+0xda>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	3304      	adds	r3, #4
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fe fa32 	bl	80085c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4619      	mov	r1, r3
 800a164:	204a      	movs	r0, #74	@ 0x4a
 800a166:	f002 f9cb 	bl	800c500 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a176:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	4618      	mov	r0, r3
 800a182:	f002 fec3 	bl	800cf0c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a18a:	4b0f      	ldr	r3, [pc, #60]	@ (800a1c8 <xTaskPriorityDisinherit+0xe8>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d903      	bls.n	800a19a <xTaskPriorityDisinherit+0xba>
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a196:	4a0c      	ldr	r2, [pc, #48]	@ (800a1c8 <xTaskPriorityDisinherit+0xe8>)
 800a198:	6013      	str	r3, [r2, #0]
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a19e:	4613      	mov	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4a09      	ldr	r2, [pc, #36]	@ (800a1cc <xTaskPriorityDisinherit+0xec>)
 800a1a8:	441a      	add	r2, r3
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	f7fe f9ac 	bl	800850e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a1ba:	697b      	ldr	r3, [r7, #20]
	}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3718      	adds	r7, #24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	20000d48 	.word	0x20000d48
 800a1c8:	20001224 	.word	0x20001224
 800a1cc:	20000d4c 	.word	0x20000d4c

0800a1d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1da:	4b21      	ldr	r3, [pc, #132]	@ (800a260 <prvAddCurrentTaskToDelayedList+0x90>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1e0:	4b20      	ldr	r3, [pc, #128]	@ (800a264 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fe f9ec 	bl	80085c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f2:	d10a      	bne.n	800a20a <prvAddCurrentTaskToDelayedList+0x3a>
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d007      	beq.n	800a20a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1fa:	4b1a      	ldr	r3, [pc, #104]	@ (800a264 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3304      	adds	r3, #4
 800a200:	4619      	mov	r1, r3
 800a202:	4819      	ldr	r0, [pc, #100]	@ (800a268 <prvAddCurrentTaskToDelayedList+0x98>)
 800a204:	f7fe f983 	bl	800850e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a208:	e026      	b.n	800a258 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4413      	add	r3, r2
 800a210:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a212:	4b14      	ldr	r3, [pc, #80]	@ (800a264 <prvAddCurrentTaskToDelayedList+0x94>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d209      	bcs.n	800a236 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a222:	4b12      	ldr	r3, [pc, #72]	@ (800a26c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	4b0f      	ldr	r3, [pc, #60]	@ (800a264 <prvAddCurrentTaskToDelayedList+0x94>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3304      	adds	r3, #4
 800a22c:	4619      	mov	r1, r3
 800a22e:	4610      	mov	r0, r2
 800a230:	f7fe f990 	bl	8008554 <vListInsert>
}
 800a234:	e010      	b.n	800a258 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a236:	4b0e      	ldr	r3, [pc, #56]	@ (800a270 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	4b0a      	ldr	r3, [pc, #40]	@ (800a264 <prvAddCurrentTaskToDelayedList+0x94>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	3304      	adds	r3, #4
 800a240:	4619      	mov	r1, r3
 800a242:	4610      	mov	r0, r2
 800a244:	f7fe f986 	bl	8008554 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a248:	4b0a      	ldr	r3, [pc, #40]	@ (800a274 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d202      	bcs.n	800a258 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a252:	4a08      	ldr	r2, [pc, #32]	@ (800a274 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	6013      	str	r3, [r2, #0]
}
 800a258:	bf00      	nop
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	20001220 	.word	0x20001220
 800a264:	20000d48 	.word	0x20000d48
 800a268:	20001208 	.word	0x20001208
 800a26c:	200011d8 	.word	0x200011d8
 800a270:	200011d4 	.word	0x200011d4
 800a274:	2000123c 	.word	0x2000123c

0800a278 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b08a      	sub	sp, #40	@ 0x28
 800a27c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a27e:	2300      	movs	r3, #0
 800a280:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a282:	f000 fabd 	bl	800a800 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a286:	4b1d      	ldr	r3, [pc, #116]	@ (800a2fc <xTimerCreateTimerTask+0x84>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d021      	beq.n	800a2d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a28e:	2300      	movs	r3, #0
 800a290:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a292:	2300      	movs	r3, #0
 800a294:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a296:	1d3a      	adds	r2, r7, #4
 800a298:	f107 0108 	add.w	r1, r7, #8
 800a29c:	f107 030c 	add.w	r3, r7, #12
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fe f8ef 	bl	8008484 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2a6:	6879      	ldr	r1, [r7, #4]
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	9202      	str	r2, [sp, #8]
 800a2ae:	9301      	str	r3, [sp, #4]
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	460a      	mov	r2, r1
 800a2b8:	4911      	ldr	r1, [pc, #68]	@ (800a300 <xTimerCreateTimerTask+0x88>)
 800a2ba:	4812      	ldr	r0, [pc, #72]	@ (800a304 <xTimerCreateTimerTask+0x8c>)
 800a2bc:	f7fe ff20 	bl	8009100 <xTaskCreateStatic>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	4a11      	ldr	r2, [pc, #68]	@ (800a308 <xTimerCreateTimerTask+0x90>)
 800a2c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a2c6:	4b10      	ldr	r3, [pc, #64]	@ (800a308 <xTimerCreateTimerTask+0x90>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10b      	bne.n	800a2f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	613b      	str	r3, [r7, #16]
}
 800a2ea:	bf00      	nop
 800a2ec:	bf00      	nop
 800a2ee:	e7fd      	b.n	800a2ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a2f0:	697b      	ldr	r3, [r7, #20]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3718      	adds	r7, #24
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20001278 	.word	0x20001278
 800a300:	08010168 	.word	0x08010168
 800a304:	0800a42d 	.word	0x0800a42d
 800a308:	2000127c 	.word	0x2000127c

0800a30c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b08a      	sub	sp, #40	@ 0x28
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a31a:	2300      	movs	r3, #0
 800a31c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10b      	bne.n	800a33c <xTimerGenericCommand+0x30>
	__asm volatile
 800a324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	623b      	str	r3, [r7, #32]
}
 800a336:	bf00      	nop
 800a338:	bf00      	nop
 800a33a:	e7fd      	b.n	800a338 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a33c:	4b19      	ldr	r3, [pc, #100]	@ (800a3a4 <xTimerGenericCommand+0x98>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d02a      	beq.n	800a39a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	2b05      	cmp	r3, #5
 800a354:	dc18      	bgt.n	800a388 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a356:	f7ff fea5 	bl	800a0a4 <xTaskGetSchedulerState>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d109      	bne.n	800a374 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a360:	4b10      	ldr	r3, [pc, #64]	@ (800a3a4 <xTimerGenericCommand+0x98>)
 800a362:	6818      	ldr	r0, [r3, #0]
 800a364:	f107 0114 	add.w	r1, r7, #20
 800a368:	2300      	movs	r3, #0
 800a36a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a36c:	f7fe fa64 	bl	8008838 <xQueueGenericSend>
 800a370:	6278      	str	r0, [r7, #36]	@ 0x24
 800a372:	e012      	b.n	800a39a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a374:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a4 <xTimerGenericCommand+0x98>)
 800a376:	6818      	ldr	r0, [r3, #0]
 800a378:	f107 0114 	add.w	r1, r7, #20
 800a37c:	2300      	movs	r3, #0
 800a37e:	2200      	movs	r2, #0
 800a380:	f7fe fa5a 	bl	8008838 <xQueueGenericSend>
 800a384:	6278      	str	r0, [r7, #36]	@ 0x24
 800a386:	e008      	b.n	800a39a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a388:	4b06      	ldr	r3, [pc, #24]	@ (800a3a4 <xTimerGenericCommand+0x98>)
 800a38a:	6818      	ldr	r0, [r3, #0]
 800a38c:	f107 0114 	add.w	r1, r7, #20
 800a390:	2300      	movs	r3, #0
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	f7fe fb7a 	bl	8008a8c <xQueueGenericSendFromISR>
 800a398:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3728      	adds	r7, #40	@ 0x28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	20001278 	.word	0x20001278

0800a3a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b088      	sub	sp, #32
 800a3ac:	af02      	add	r7, sp, #8
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3b2:	4b1d      	ldr	r3, [pc, #116]	@ (800a428 <prvProcessExpiredTimer+0x80>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	3304      	adds	r3, #4
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fe f8ff 	bl	80085c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	69db      	ldr	r3, [r3, #28]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d123      	bne.n	800a416 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	699a      	ldr	r2, [r3, #24]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	18d1      	adds	r1, r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	6978      	ldr	r0, [r7, #20]
 800a3dc:	f000 f8cc 	bl	800a578 <prvInsertTimerInActiveList>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d017      	beq.n	800a416 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	6978      	ldr	r0, [r7, #20]
 800a3f2:	f7ff ff8b 	bl	800a30c <xTimerGenericCommand>
 800a3f6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10b      	bne.n	800a416 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	60fb      	str	r3, [r7, #12]
}
 800a410:	bf00      	nop
 800a412:	bf00      	nop
 800a414:	e7fd      	b.n	800a412 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a41a:	6978      	ldr	r0, [r7, #20]
 800a41c:	4798      	blx	r3
}
 800a41e:	bf00      	nop
 800a420:	3718      	adds	r7, #24
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	20001270 	.word	0x20001270

0800a42c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a434:	f107 0308 	add.w	r3, r7, #8
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 f859 	bl	800a4f0 <prvGetNextExpireTime>
 800a43e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4619      	mov	r1, r3
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f000 f805 	bl	800a454 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a44a:	f000 f8d7 	bl	800a5fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a44e:	bf00      	nop
 800a450:	e7f0      	b.n	800a434 <prvTimerTask+0x8>
	...

0800a454 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a45e:	f7ff f9f3 	bl	8009848 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a462:	f107 0308 	add.w	r3, r7, #8
 800a466:	4618      	mov	r0, r3
 800a468:	f000 f866 	bl	800a538 <prvSampleTimeNow>
 800a46c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d130      	bne.n	800a4d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10a      	bne.n	800a490 <prvProcessTimerOrBlockTask+0x3c>
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d806      	bhi.n	800a490 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a482:	f7ff f9ef 	bl	8009864 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a486:	68f9      	ldr	r1, [r7, #12]
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f7ff ff8d 	bl	800a3a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a48e:	e024      	b.n	800a4da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d008      	beq.n	800a4a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a496:	4b13      	ldr	r3, [pc, #76]	@ (800a4e4 <prvProcessTimerOrBlockTask+0x90>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	bf0c      	ite	eq
 800a4a0:	2301      	moveq	r3, #1
 800a4a2:	2300      	movne	r3, #0
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4a8:	4b0f      	ldr	r3, [pc, #60]	@ (800a4e8 <prvProcessTimerOrBlockTask+0x94>)
 800a4aa:	6818      	ldr	r0, [r3, #0]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	f7fe fdef 	bl	8009098 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4ba:	f7ff f9d3 	bl	8009864 <xTaskResumeAll>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d10a      	bne.n	800a4da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a4c4:	4b09      	ldr	r3, [pc, #36]	@ (800a4ec <prvProcessTimerOrBlockTask+0x98>)
 800a4c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4ca:	601a      	str	r2, [r3, #0]
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	f3bf 8f6f 	isb	sy
}
 800a4d4:	e001      	b.n	800a4da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a4d6:	f7ff f9c5 	bl	8009864 <xTaskResumeAll>
}
 800a4da:	bf00      	nop
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	20001274 	.word	0x20001274
 800a4e8:	20001278 	.word	0x20001278
 800a4ec:	e000ed04 	.word	0xe000ed04

0800a4f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a534 <prvGetNextExpireTime+0x44>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	bf0c      	ite	eq
 800a502:	2301      	moveq	r3, #1
 800a504:	2300      	movne	r3, #0
 800a506:	b2db      	uxtb	r3, r3
 800a508:	461a      	mov	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d105      	bne.n	800a522 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a516:	4b07      	ldr	r3, [pc, #28]	@ (800a534 <prvGetNextExpireTime+0x44>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	60fb      	str	r3, [r7, #12]
 800a520:	e001      	b.n	800a526 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a522:	2300      	movs	r3, #0
 800a524:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a526:	68fb      	ldr	r3, [r7, #12]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bc80      	pop	{r7}
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	20001270 	.word	0x20001270

0800a538 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a540:	f7ff fa32 	bl	80099a8 <xTaskGetTickCount>
 800a544:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a546:	4b0b      	ldr	r3, [pc, #44]	@ (800a574 <prvSampleTimeNow+0x3c>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d205      	bcs.n	800a55c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a550:	f000 f8f4 	bl	800a73c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	601a      	str	r2, [r3, #0]
 800a55a:	e002      	b.n	800a562 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a562:	4a04      	ldr	r2, [pc, #16]	@ (800a574 <prvSampleTimeNow+0x3c>)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a568:	68fb      	ldr	r3, [r7, #12]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20001280 	.word	0x20001280

0800a578 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
 800a584:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a586:	2300      	movs	r3, #0
 800a588:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d812      	bhi.n	800a5c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	1ad2      	subs	r2, r2, r3
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	699b      	ldr	r3, [r3, #24]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d302      	bcc.n	800a5b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	617b      	str	r3, [r7, #20]
 800a5b0:	e01b      	b.n	800a5ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5b2:	4b10      	ldr	r3, [pc, #64]	@ (800a5f4 <prvInsertTimerInActiveList+0x7c>)
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	4610      	mov	r0, r2
 800a5be:	f7fd ffc9 	bl	8008554 <vListInsert>
 800a5c2:	e012      	b.n	800a5ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d206      	bcs.n	800a5da <prvInsertTimerInActiveList+0x62>
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d302      	bcc.n	800a5da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	617b      	str	r3, [r7, #20]
 800a5d8:	e007      	b.n	800a5ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5da:	4b07      	ldr	r3, [pc, #28]	@ (800a5f8 <prvInsertTimerInActiveList+0x80>)
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	3304      	adds	r3, #4
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	4610      	mov	r0, r2
 800a5e6:	f7fd ffb5 	bl	8008554 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a5ea:	697b      	ldr	r3, [r7, #20]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3718      	adds	r7, #24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	20001274 	.word	0x20001274
 800a5f8:	20001270 	.word	0x20001270

0800a5fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08c      	sub	sp, #48	@ 0x30
 800a600:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a602:	e087      	b.n	800a714 <prvProcessReceivedCommands+0x118>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	2b00      	cmp	r3, #0
 800a608:	f2c0 8084 	blt.w	800a714 <prvProcessReceivedCommands+0x118>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a612:	695b      	ldr	r3, [r3, #20]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d004      	beq.n	800a622 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61a:	3304      	adds	r3, #4
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fd ffd1 	bl	80085c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a622:	1d3b      	adds	r3, r7, #4
 800a624:	4618      	mov	r0, r3
 800a626:	f7ff ff87 	bl	800a538 <prvSampleTimeNow>
 800a62a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	2b09      	cmp	r3, #9
 800a630:	d86b      	bhi.n	800a70a <prvProcessReceivedCommands+0x10e>
 800a632:	a201      	add	r2, pc, #4	@ (adr r2, 800a638 <prvProcessReceivedCommands+0x3c>)
 800a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a638:	0800a661 	.word	0x0800a661
 800a63c:	0800a661 	.word	0x0800a661
 800a640:	0800a661 	.word	0x0800a661
 800a644:	0800a70b 	.word	0x0800a70b
 800a648:	0800a6bf 	.word	0x0800a6bf
 800a64c:	0800a6f9 	.word	0x0800a6f9
 800a650:	0800a661 	.word	0x0800a661
 800a654:	0800a661 	.word	0x0800a661
 800a658:	0800a70b 	.word	0x0800a70b
 800a65c:	0800a6bf 	.word	0x0800a6bf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	18d1      	adds	r1, r2, r3
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6a3a      	ldr	r2, [r7, #32]
 800a66c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a66e:	f7ff ff83 	bl	800a578 <prvInsertTimerInActiveList>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d04a      	beq.n	800a70e <prvProcessReceivedCommands+0x112>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a67c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a67e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a682:	69db      	ldr	r3, [r3, #28]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d142      	bne.n	800a70e <prvProcessReceivedCommands+0x112>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	441a      	add	r2, r3
 800a690:	2300      	movs	r3, #0
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	2300      	movs	r3, #0
 800a696:	2100      	movs	r1, #0
 800a698:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a69a:	f7ff fe37 	bl	800a30c <xTimerGenericCommand>
 800a69e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d133      	bne.n	800a70e <prvProcessReceivedCommands+0x112>
	__asm volatile
 800a6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	61bb      	str	r3, [r7, #24]
}
 800a6b8:	bf00      	nop
 800a6ba:	bf00      	nop
 800a6bc:	e7fd      	b.n	800a6ba <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10b      	bne.n	800a6e4 <prvProcessReceivedCommands+0xe8>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	617b      	str	r3, [r7, #20]
}
 800a6de:	bf00      	nop
 800a6e0:	bf00      	nop
 800a6e2:	e7fd      	b.n	800a6e0 <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e6:	699a      	ldr	r2, [r3, #24]
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
 800a6ea:	18d1      	adds	r1, r2, r3
 800a6ec:	6a3b      	ldr	r3, [r7, #32]
 800a6ee:	6a3a      	ldr	r2, [r7, #32]
 800a6f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a6f2:	f7ff ff41 	bl	800a578 <prvInsertTimerInActiveList>
					break;
 800a6f6:	e00d      	b.n	800a714 <prvProcessReceivedCommands+0x118>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d107      	bne.n	800a712 <prvProcessReceivedCommands+0x116>
						{
							vPortFree( pxTimer );
 800a702:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a704:	f000 fb74 	bl	800adf0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a708:	e003      	b.n	800a712 <prvProcessReceivedCommands+0x116>

				default	:
					/* Don't expect to get here. */
					break;
 800a70a:	bf00      	nop
 800a70c:	e002      	b.n	800a714 <prvProcessReceivedCommands+0x118>
					break;
 800a70e:	bf00      	nop
 800a710:	e000      	b.n	800a714 <prvProcessReceivedCommands+0x118>
					break;
 800a712:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a714:	4b08      	ldr	r3, [pc, #32]	@ (800a738 <prvProcessReceivedCommands+0x13c>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f107 0108 	add.w	r1, r7, #8
 800a71c:	2200      	movs	r2, #0
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fe fa64 	bl	8008bec <xQueueReceive>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	f47f af6c 	bne.w	800a604 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a72c:	bf00      	nop
 800a72e:	bf00      	nop
 800a730:	3728      	adds	r7, #40	@ 0x28
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	20001278 	.word	0x20001278

0800a73c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a742:	e046      	b.n	800a7d2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a744:	4b2c      	ldr	r3, [pc, #176]	@ (800a7f8 <prvSwitchTimerLists+0xbc>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a74e:	4b2a      	ldr	r3, [pc, #168]	@ (800a7f8 <prvSwitchTimerLists+0xbc>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	3304      	adds	r3, #4
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fd ff31 	bl	80085c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	69db      	ldr	r3, [r3, #28]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d12f      	bne.n	800a7d2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	4413      	add	r3, r2
 800a77a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	429a      	cmp	r2, r3
 800a782:	d90e      	bls.n	800a7a2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a790:	4b19      	ldr	r3, [pc, #100]	@ (800a7f8 <prvSwitchTimerLists+0xbc>)
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	3304      	adds	r3, #4
 800a798:	4619      	mov	r1, r3
 800a79a:	4610      	mov	r0, r2
 800a79c:	f7fd feda 	bl	8008554 <vListInsert>
 800a7a0:	e017      	b.n	800a7d2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f7ff fdad 	bl	800a30c <xTimerGenericCommand>
 800a7b2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10b      	bne.n	800a7d2 <prvSwitchTimerLists+0x96>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	603b      	str	r3, [r7, #0]
}
 800a7cc:	bf00      	nop
 800a7ce:	bf00      	nop
 800a7d0:	e7fd      	b.n	800a7ce <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7d2:	4b09      	ldr	r3, [pc, #36]	@ (800a7f8 <prvSwitchTimerLists+0xbc>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1b3      	bne.n	800a744 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7dc:	4b06      	ldr	r3, [pc, #24]	@ (800a7f8 <prvSwitchTimerLists+0xbc>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7e2:	4b06      	ldr	r3, [pc, #24]	@ (800a7fc <prvSwitchTimerLists+0xc0>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a04      	ldr	r2, [pc, #16]	@ (800a7f8 <prvSwitchTimerLists+0xbc>)
 800a7e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7ea:	4a04      	ldr	r2, [pc, #16]	@ (800a7fc <prvSwitchTimerLists+0xc0>)
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	6013      	str	r3, [r2, #0]
}
 800a7f0:	bf00      	nop
 800a7f2:	3718      	adds	r7, #24
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	20001270 	.word	0x20001270
 800a7fc:	20001274 	.word	0x20001274

0800a800 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a806:	f000 f929 	bl	800aa5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a80a:	4b15      	ldr	r3, [pc, #84]	@ (800a860 <prvCheckForValidListAndQueue+0x60>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d120      	bne.n	800a854 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a812:	4814      	ldr	r0, [pc, #80]	@ (800a864 <prvCheckForValidListAndQueue+0x64>)
 800a814:	f7fd fe50 	bl	80084b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a818:	4813      	ldr	r0, [pc, #76]	@ (800a868 <prvCheckForValidListAndQueue+0x68>)
 800a81a:	f7fd fe4d 	bl	80084b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a81e:	4b13      	ldr	r3, [pc, #76]	@ (800a86c <prvCheckForValidListAndQueue+0x6c>)
 800a820:	4a10      	ldr	r2, [pc, #64]	@ (800a864 <prvCheckForValidListAndQueue+0x64>)
 800a822:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a824:	4b12      	ldr	r3, [pc, #72]	@ (800a870 <prvCheckForValidListAndQueue+0x70>)
 800a826:	4a10      	ldr	r2, [pc, #64]	@ (800a868 <prvCheckForValidListAndQueue+0x68>)
 800a828:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a82a:	2300      	movs	r3, #0
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	4b11      	ldr	r3, [pc, #68]	@ (800a874 <prvCheckForValidListAndQueue+0x74>)
 800a830:	4a11      	ldr	r2, [pc, #68]	@ (800a878 <prvCheckForValidListAndQueue+0x78>)
 800a832:	210c      	movs	r1, #12
 800a834:	200a      	movs	r0, #10
 800a836:	f7fd ff59 	bl	80086ec <xQueueGenericCreateStatic>
 800a83a:	4603      	mov	r3, r0
 800a83c:	4a08      	ldr	r2, [pc, #32]	@ (800a860 <prvCheckForValidListAndQueue+0x60>)
 800a83e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a840:	4b07      	ldr	r3, [pc, #28]	@ (800a860 <prvCheckForValidListAndQueue+0x60>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d005      	beq.n	800a854 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a848:	4b05      	ldr	r3, [pc, #20]	@ (800a860 <prvCheckForValidListAndQueue+0x60>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	490b      	ldr	r1, [pc, #44]	@ (800a87c <prvCheckForValidListAndQueue+0x7c>)
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fe fbf0 	bl	8009034 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a854:	f000 f932 	bl	800aabc <vPortExitCritical>
}
 800a858:	bf00      	nop
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	20001278 	.word	0x20001278
 800a864:	20001248 	.word	0x20001248
 800a868:	2000125c 	.word	0x2000125c
 800a86c:	20001270 	.word	0x20001270
 800a870:	20001274 	.word	0x20001274
 800a874:	200012fc 	.word	0x200012fc
 800a878:	20001284 	.word	0x20001284
 800a87c:	08010170 	.word	0x08010170

0800a880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	3b04      	subs	r3, #4
 800a890:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	3b04      	subs	r3, #4
 800a89e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	f023 0201 	bic.w	r2, r3, #1
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3b04      	subs	r3, #4
 800a8ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a8b0:	4a08      	ldr	r2, [pc, #32]	@ (800a8d4 <pxPortInitialiseStack+0x54>)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	3b14      	subs	r3, #20
 800a8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3b20      	subs	r3, #32
 800a8c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bc80      	pop	{r7}
 800a8d2:	4770      	bx	lr
 800a8d4:	0800a8d9 	.word	0x0800a8d9

0800a8d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8e2:	4b12      	ldr	r3, [pc, #72]	@ (800a92c <prvTaskExitError+0x54>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ea:	d00b      	beq.n	800a904 <prvTaskExitError+0x2c>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	60fb      	str	r3, [r7, #12]
}
 800a8fe:	bf00      	nop
 800a900:	bf00      	nop
 800a902:	e7fd      	b.n	800a900 <prvTaskExitError+0x28>
	__asm volatile
 800a904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	60bb      	str	r3, [r7, #8]
}
 800a916:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a918:	bf00      	nop
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d0fc      	beq.n	800a91a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a920:	bf00      	nop
 800a922:	bf00      	nop
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	bc80      	pop	{r7}
 800a92a:	4770      	bx	lr
 800a92c:	20000020 	.word	0x20000020

0800a930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a930:	4b07      	ldr	r3, [pc, #28]	@ (800a950 <pxCurrentTCBConst2>)
 800a932:	6819      	ldr	r1, [r3, #0]
 800a934:	6808      	ldr	r0, [r1, #0]
 800a936:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a93a:	f380 8809 	msr	PSP, r0
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f04f 0000 	mov.w	r0, #0
 800a946:	f380 8811 	msr	BASEPRI, r0
 800a94a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a94e:	4770      	bx	lr

0800a950 <pxCurrentTCBConst2>:
 800a950:	20000d48 	.word	0x20000d48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a954:	bf00      	nop
 800a956:	bf00      	nop

0800a958 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a958:	4806      	ldr	r0, [pc, #24]	@ (800a974 <prvPortStartFirstTask+0x1c>)
 800a95a:	6800      	ldr	r0, [r0, #0]
 800a95c:	6800      	ldr	r0, [r0, #0]
 800a95e:	f380 8808 	msr	MSP, r0
 800a962:	b662      	cpsie	i
 800a964:	b661      	cpsie	f
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	df00      	svc	0
 800a970:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a972:	bf00      	nop
 800a974:	e000ed08 	.word	0xe000ed08

0800a978 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a97e:	4b32      	ldr	r3, [pc, #200]	@ (800aa48 <xPortStartScheduler+0xd0>)
 800a980:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	b2db      	uxtb	r3, r3
 800a988:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	22ff      	movs	r2, #255	@ 0xff
 800a98e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	b2db      	uxtb	r3, r3
 800a996:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a998:	78fb      	ldrb	r3, [r7, #3]
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	4b2a      	ldr	r3, [pc, #168]	@ (800aa4c <xPortStartScheduler+0xd4>)
 800a9a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9a6:	4b2a      	ldr	r3, [pc, #168]	@ (800aa50 <xPortStartScheduler+0xd8>)
 800a9a8:	2207      	movs	r2, #7
 800a9aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9ac:	e009      	b.n	800a9c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a9ae:	4b28      	ldr	r3, [pc, #160]	@ (800aa50 <xPortStartScheduler+0xd8>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	4a26      	ldr	r2, [pc, #152]	@ (800aa50 <xPortStartScheduler+0xd8>)
 800a9b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9b8:	78fb      	ldrb	r3, [r7, #3]
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	005b      	lsls	r3, r3, #1
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9c2:	78fb      	ldrb	r3, [r7, #3]
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9ca:	2b80      	cmp	r3, #128	@ 0x80
 800a9cc:	d0ef      	beq.n	800a9ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9ce:	4b20      	ldr	r3, [pc, #128]	@ (800aa50 <xPortStartScheduler+0xd8>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f1c3 0307 	rsb	r3, r3, #7
 800a9d6:	2b04      	cmp	r3, #4
 800a9d8:	d00b      	beq.n	800a9f2 <xPortStartScheduler+0x7a>
	__asm volatile
 800a9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	60bb      	str	r3, [r7, #8]
}
 800a9ec:	bf00      	nop
 800a9ee:	bf00      	nop
 800a9f0:	e7fd      	b.n	800a9ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9f2:	4b17      	ldr	r3, [pc, #92]	@ (800aa50 <xPortStartScheduler+0xd8>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	021b      	lsls	r3, r3, #8
 800a9f8:	4a15      	ldr	r2, [pc, #84]	@ (800aa50 <xPortStartScheduler+0xd8>)
 800a9fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a9fc:	4b14      	ldr	r3, [pc, #80]	@ (800aa50 <xPortStartScheduler+0xd8>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa04:	4a12      	ldr	r2, [pc, #72]	@ (800aa50 <xPortStartScheduler+0xd8>)
 800aa06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	b2da      	uxtb	r2, r3
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa10:	4b10      	ldr	r3, [pc, #64]	@ (800aa54 <xPortStartScheduler+0xdc>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a0f      	ldr	r2, [pc, #60]	@ (800aa54 <xPortStartScheduler+0xdc>)
 800aa16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aa1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa1c:	4b0d      	ldr	r3, [pc, #52]	@ (800aa54 <xPortStartScheduler+0xdc>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a0c      	ldr	r2, [pc, #48]	@ (800aa54 <xPortStartScheduler+0xdc>)
 800aa22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aa26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa28:	f000 f8b8 	bl	800ab9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa58 <xPortStartScheduler+0xe0>)
 800aa2e:	2200      	movs	r2, #0
 800aa30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa32:	f7ff ff91 	bl	800a958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa36:	f7ff f89b 	bl	8009b70 <vTaskSwitchContext>
	prvTaskExitError();
 800aa3a:	f7ff ff4d 	bl	800a8d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	e000e400 	.word	0xe000e400
 800aa4c:	2000134c 	.word	0x2000134c
 800aa50:	20001350 	.word	0x20001350
 800aa54:	e000ed20 	.word	0xe000ed20
 800aa58:	20000020 	.word	0x20000020

0800aa5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	607b      	str	r3, [r7, #4]
}
 800aa74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa76:	4b0f      	ldr	r3, [pc, #60]	@ (800aab4 <vPortEnterCritical+0x58>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	4a0d      	ldr	r2, [pc, #52]	@ (800aab4 <vPortEnterCritical+0x58>)
 800aa7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa80:	4b0c      	ldr	r3, [pc, #48]	@ (800aab4 <vPortEnterCritical+0x58>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d110      	bne.n	800aaaa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa88:	4b0b      	ldr	r3, [pc, #44]	@ (800aab8 <vPortEnterCritical+0x5c>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00b      	beq.n	800aaaa <vPortEnterCritical+0x4e>
	__asm volatile
 800aa92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	603b      	str	r3, [r7, #0]
}
 800aaa4:	bf00      	nop
 800aaa6:	bf00      	nop
 800aaa8:	e7fd      	b.n	800aaa6 <vPortEnterCritical+0x4a>
	}
}
 800aaaa:	bf00      	nop
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bc80      	pop	{r7}
 800aab2:	4770      	bx	lr
 800aab4:	20000020 	.word	0x20000020
 800aab8:	e000ed04 	.word	0xe000ed04

0800aabc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aac2:	4b12      	ldr	r3, [pc, #72]	@ (800ab0c <vPortExitCritical+0x50>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d10b      	bne.n	800aae2 <vPortExitCritical+0x26>
	__asm volatile
 800aaca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aace:	f383 8811 	msr	BASEPRI, r3
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	f3bf 8f4f 	dsb	sy
 800aada:	607b      	str	r3, [r7, #4]
}
 800aadc:	bf00      	nop
 800aade:	bf00      	nop
 800aae0:	e7fd      	b.n	800aade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aae2:	4b0a      	ldr	r3, [pc, #40]	@ (800ab0c <vPortExitCritical+0x50>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3b01      	subs	r3, #1
 800aae8:	4a08      	ldr	r2, [pc, #32]	@ (800ab0c <vPortExitCritical+0x50>)
 800aaea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aaec:	4b07      	ldr	r3, [pc, #28]	@ (800ab0c <vPortExitCritical+0x50>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d105      	bne.n	800ab00 <vPortExitCritical+0x44>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	f383 8811 	msr	BASEPRI, r3
}
 800aafe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bc80      	pop	{r7}
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	20000020 	.word	0x20000020

0800ab10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab10:	f3ef 8009 	mrs	r0, PSP
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	4b0d      	ldr	r3, [pc, #52]	@ (800ab50 <pxCurrentTCBConst>)
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ab20:	6010      	str	r0, [r2, #0]
 800ab22:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ab26:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ab2a:	f380 8811 	msr	BASEPRI, r0
 800ab2e:	f7ff f81f 	bl	8009b70 <vTaskSwitchContext>
 800ab32:	f04f 0000 	mov.w	r0, #0
 800ab36:	f380 8811 	msr	BASEPRI, r0
 800ab3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ab3e:	6819      	ldr	r1, [r3, #0]
 800ab40:	6808      	ldr	r0, [r1, #0]
 800ab42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ab46:	f380 8809 	msr	PSP, r0
 800ab4a:	f3bf 8f6f 	isb	sy
 800ab4e:	4770      	bx	lr

0800ab50 <pxCurrentTCBConst>:
 800ab50:	20000d48 	.word	0x20000d48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab54:	bf00      	nop
 800ab56:	bf00      	nop

0800ab58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	607b      	str	r3, [r7, #4]
}
 800ab70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab72:	f7fe ff39 	bl	80099e8 <xTaskIncrementTick>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d003      	beq.n	800ab84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab7c:	4b06      	ldr	r3, [pc, #24]	@ (800ab98 <SysTick_Handler+0x40>)
 800ab7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab82:	601a      	str	r2, [r3, #0]
 800ab84:	2300      	movs	r3, #0
 800ab86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	f383 8811 	msr	BASEPRI, r3
}
 800ab8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab90:	bf00      	nop
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	e000ed04 	.word	0xe000ed04

0800ab9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aba0:	4b0a      	ldr	r3, [pc, #40]	@ (800abcc <vPortSetupTimerInterrupt+0x30>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aba6:	4b0a      	ldr	r3, [pc, #40]	@ (800abd0 <vPortSetupTimerInterrupt+0x34>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800abac:	4b09      	ldr	r3, [pc, #36]	@ (800abd4 <vPortSetupTimerInterrupt+0x38>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a09      	ldr	r2, [pc, #36]	@ (800abd8 <vPortSetupTimerInterrupt+0x3c>)
 800abb2:	fba2 2303 	umull	r2, r3, r2, r3
 800abb6:	099b      	lsrs	r3, r3, #6
 800abb8:	4a08      	ldr	r2, [pc, #32]	@ (800abdc <vPortSetupTimerInterrupt+0x40>)
 800abba:	3b01      	subs	r3, #1
 800abbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800abbe:	4b03      	ldr	r3, [pc, #12]	@ (800abcc <vPortSetupTimerInterrupt+0x30>)
 800abc0:	2207      	movs	r2, #7
 800abc2:	601a      	str	r2, [r3, #0]
}
 800abc4:	bf00      	nop
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bc80      	pop	{r7}
 800abca:	4770      	bx	lr
 800abcc:	e000e010 	.word	0xe000e010
 800abd0:	e000e018 	.word	0xe000e018
 800abd4:	20000004 	.word	0x20000004
 800abd8:	10624dd3 	.word	0x10624dd3
 800abdc:	e000e014 	.word	0xe000e014

0800abe0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800abe6:	f3ef 8305 	mrs	r3, IPSR
 800abea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2b0f      	cmp	r3, #15
 800abf0:	d915      	bls.n	800ac1e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800abf2:	4a17      	ldr	r2, [pc, #92]	@ (800ac50 <vPortValidateInterruptPriority+0x70>)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4413      	add	r3, r2
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800abfc:	4b15      	ldr	r3, [pc, #84]	@ (800ac54 <vPortValidateInterruptPriority+0x74>)
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	7afa      	ldrb	r2, [r7, #11]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d20b      	bcs.n	800ac1e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ac06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0a:	f383 8811 	msr	BASEPRI, r3
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f3bf 8f4f 	dsb	sy
 800ac16:	607b      	str	r3, [r7, #4]
}
 800ac18:	bf00      	nop
 800ac1a:	bf00      	nop
 800ac1c:	e7fd      	b.n	800ac1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ac58 <vPortValidateInterruptPriority+0x78>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ac26:	4b0d      	ldr	r3, [pc, #52]	@ (800ac5c <vPortValidateInterruptPriority+0x7c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d90b      	bls.n	800ac46 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	603b      	str	r3, [r7, #0]
}
 800ac40:	bf00      	nop
 800ac42:	bf00      	nop
 800ac44:	e7fd      	b.n	800ac42 <vPortValidateInterruptPriority+0x62>
	}
 800ac46:	bf00      	nop
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bc80      	pop	{r7}
 800ac4e:	4770      	bx	lr
 800ac50:	e000e3f0 	.word	0xe000e3f0
 800ac54:	2000134c 	.word	0x2000134c
 800ac58:	e000ed0c 	.word	0xe000ed0c
 800ac5c:	20001350 	.word	0x20001350

0800ac60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b08a      	sub	sp, #40	@ 0x28
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac6c:	f7fe fdec 	bl	8009848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac70:	4b5a      	ldr	r3, [pc, #360]	@ (800addc <pvPortMalloc+0x17c>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d101      	bne.n	800ac7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac78:	f000 f916 	bl	800aea8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac7c:	4b58      	ldr	r3, [pc, #352]	@ (800ade0 <pvPortMalloc+0x180>)
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4013      	ands	r3, r2
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f040 8090 	bne.w	800adaa <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d01e      	beq.n	800acce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ac90:	2208      	movs	r2, #8
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4413      	add	r3, r2
 800ac96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f003 0307 	and.w	r3, r3, #7
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d015      	beq.n	800acce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f023 0307 	bic.w	r3, r3, #7
 800aca8:	3308      	adds	r3, #8
 800acaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f003 0307 	and.w	r3, r3, #7
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00b      	beq.n	800acce <pvPortMalloc+0x6e>
	__asm volatile
 800acb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acba:	f383 8811 	msr	BASEPRI, r3
 800acbe:	f3bf 8f6f 	isb	sy
 800acc2:	f3bf 8f4f 	dsb	sy
 800acc6:	617b      	str	r3, [r7, #20]
}
 800acc8:	bf00      	nop
 800acca:	bf00      	nop
 800accc:	e7fd      	b.n	800acca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d06a      	beq.n	800adaa <pvPortMalloc+0x14a>
 800acd4:	4b43      	ldr	r3, [pc, #268]	@ (800ade4 <pvPortMalloc+0x184>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d865      	bhi.n	800adaa <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800acde:	4b42      	ldr	r3, [pc, #264]	@ (800ade8 <pvPortMalloc+0x188>)
 800ace0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ace2:	4b41      	ldr	r3, [pc, #260]	@ (800ade8 <pvPortMalloc+0x188>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ace8:	e004      	b.n	800acf4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800acea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d903      	bls.n	800ad06 <pvPortMalloc+0xa6>
 800acfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1f1      	bne.n	800acea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad06:	4b35      	ldr	r3, [pc, #212]	@ (800addc <pvPortMalloc+0x17c>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d04c      	beq.n	800adaa <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad10:	6a3b      	ldr	r3, [r7, #32]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2208      	movs	r2, #8
 800ad16:	4413      	add	r3, r2
 800ad18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad24:	685a      	ldr	r2, [r3, #4]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	1ad2      	subs	r2, r2, r3
 800ad2a:	2308      	movs	r3, #8
 800ad2c:	005b      	lsls	r3, r3, #1
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d920      	bls.n	800ad74 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4413      	add	r3, r2
 800ad38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	f003 0307 	and.w	r3, r3, #7
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00b      	beq.n	800ad5c <pvPortMalloc+0xfc>
	__asm volatile
 800ad44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	613b      	str	r3, [r7, #16]
}
 800ad56:	bf00      	nop
 800ad58:	bf00      	nop
 800ad5a:	e7fd      	b.n	800ad58 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	1ad2      	subs	r2, r2, r3
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad6e:	69b8      	ldr	r0, [r7, #24]
 800ad70:	f000 f8fc 	bl	800af6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad74:	4b1b      	ldr	r3, [pc, #108]	@ (800ade4 <pvPortMalloc+0x184>)
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	4a19      	ldr	r2, [pc, #100]	@ (800ade4 <pvPortMalloc+0x184>)
 800ad80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad82:	4b18      	ldr	r3, [pc, #96]	@ (800ade4 <pvPortMalloc+0x184>)
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	4b19      	ldr	r3, [pc, #100]	@ (800adec <pvPortMalloc+0x18c>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d203      	bcs.n	800ad96 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad8e:	4b15      	ldr	r3, [pc, #84]	@ (800ade4 <pvPortMalloc+0x184>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a16      	ldr	r2, [pc, #88]	@ (800adec <pvPortMalloc+0x18c>)
 800ad94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	4b11      	ldr	r3, [pc, #68]	@ (800ade0 <pvPortMalloc+0x180>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	431a      	orrs	r2, r3
 800ada0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ada4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada6:	2200      	movs	r2, #0
 800ada8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800adaa:	f7fe fd5b 	bl	8009864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	f003 0307 	and.w	r3, r3, #7
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00b      	beq.n	800add0 <pvPortMalloc+0x170>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	60fb      	str	r3, [r7, #12]
}
 800adca:	bf00      	nop
 800adcc:	bf00      	nop
 800adce:	e7fd      	b.n	800adcc <pvPortMalloc+0x16c>
	return pvReturn;
 800add0:	69fb      	ldr	r3, [r7, #28]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3728      	adds	r7, #40	@ 0x28
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	20002eb4 	.word	0x20002eb4
 800ade0:	20002ec0 	.word	0x20002ec0
 800ade4:	20002eb8 	.word	0x20002eb8
 800ade8:	20002eac 	.word	0x20002eac
 800adec:	20002ebc 	.word	0x20002ebc

0800adf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d04a      	beq.n	800ae98 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae02:	2308      	movs	r3, #8
 800ae04:	425b      	negs	r3, r3
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	4413      	add	r3, r2
 800ae0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	685a      	ldr	r2, [r3, #4]
 800ae14:	4b22      	ldr	r3, [pc, #136]	@ (800aea0 <vPortFree+0xb0>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4013      	ands	r3, r2
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10b      	bne.n	800ae36 <vPortFree+0x46>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	60fb      	str	r3, [r7, #12]
}
 800ae30:	bf00      	nop
 800ae32:	bf00      	nop
 800ae34:	e7fd      	b.n	800ae32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00b      	beq.n	800ae56 <vPortFree+0x66>
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	60bb      	str	r3, [r7, #8]
}
 800ae50:	bf00      	nop
 800ae52:	bf00      	nop
 800ae54:	e7fd      	b.n	800ae52 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	685a      	ldr	r2, [r3, #4]
 800ae5a:	4b11      	ldr	r3, [pc, #68]	@ (800aea0 <vPortFree+0xb0>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4013      	ands	r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d019      	beq.n	800ae98 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d115      	bne.n	800ae98 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	685a      	ldr	r2, [r3, #4]
 800ae70:	4b0b      	ldr	r3, [pc, #44]	@ (800aea0 <vPortFree+0xb0>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	43db      	mvns	r3, r3
 800ae76:	401a      	ands	r2, r3
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae7c:	f7fe fce4 	bl	8009848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	685a      	ldr	r2, [r3, #4]
 800ae84:	4b07      	ldr	r3, [pc, #28]	@ (800aea4 <vPortFree+0xb4>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4413      	add	r3, r2
 800ae8a:	4a06      	ldr	r2, [pc, #24]	@ (800aea4 <vPortFree+0xb4>)
 800ae8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae8e:	6938      	ldr	r0, [r7, #16]
 800ae90:	f000 f86c 	bl	800af6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ae94:	f7fe fce6 	bl	8009864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae98:	bf00      	nop
 800ae9a:	3718      	adds	r7, #24
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	20002ec0 	.word	0x20002ec0
 800aea4:	20002eb8 	.word	0x20002eb8

0800aea8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aeae:	f641 3358 	movw	r3, #7000	@ 0x1b58
 800aeb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aeb4:	4b27      	ldr	r3, [pc, #156]	@ (800af54 <prvHeapInit+0xac>)
 800aeb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f003 0307 	and.w	r3, r3, #7
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00c      	beq.n	800aedc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	3307      	adds	r3, #7
 800aec6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f023 0307 	bic.w	r3, r3, #7
 800aece:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aed0:	68ba      	ldr	r2, [r7, #8]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	4a1f      	ldr	r2, [pc, #124]	@ (800af54 <prvHeapInit+0xac>)
 800aed8:	4413      	add	r3, r2
 800aeda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aee0:	4a1d      	ldr	r2, [pc, #116]	@ (800af58 <prvHeapInit+0xb0>)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aee6:	4b1c      	ldr	r3, [pc, #112]	@ (800af58 <prvHeapInit+0xb0>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	4413      	add	r3, r2
 800aef2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aef4:	2208      	movs	r2, #8
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	1a9b      	subs	r3, r3, r2
 800aefa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f023 0307 	bic.w	r3, r3, #7
 800af02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	4a15      	ldr	r2, [pc, #84]	@ (800af5c <prvHeapInit+0xb4>)
 800af08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af0a:	4b14      	ldr	r3, [pc, #80]	@ (800af5c <prvHeapInit+0xb4>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2200      	movs	r2, #0
 800af10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af12:	4b12      	ldr	r3, [pc, #72]	@ (800af5c <prvHeapInit+0xb4>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2200      	movs	r2, #0
 800af18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	1ad2      	subs	r2, r2, r3
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af28:	4b0c      	ldr	r3, [pc, #48]	@ (800af5c <prvHeapInit+0xb4>)
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	4a0a      	ldr	r2, [pc, #40]	@ (800af60 <prvHeapInit+0xb8>)
 800af36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	4a09      	ldr	r2, [pc, #36]	@ (800af64 <prvHeapInit+0xbc>)
 800af3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af40:	4b09      	ldr	r3, [pc, #36]	@ (800af68 <prvHeapInit+0xc0>)
 800af42:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800af46:	601a      	str	r2, [r3, #0]
}
 800af48:	bf00      	nop
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bc80      	pop	{r7}
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	20001354 	.word	0x20001354
 800af58:	20002eac 	.word	0x20002eac
 800af5c:	20002eb4 	.word	0x20002eb4
 800af60:	20002ebc 	.word	0x20002ebc
 800af64:	20002eb8 	.word	0x20002eb8
 800af68:	20002ec0 	.word	0x20002ec0

0800af6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af74:	4b27      	ldr	r3, [pc, #156]	@ (800b014 <prvInsertBlockIntoFreeList+0xa8>)
 800af76:	60fb      	str	r3, [r7, #12]
 800af78:	e002      	b.n	800af80 <prvInsertBlockIntoFreeList+0x14>
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	60fb      	str	r3, [r7, #12]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	429a      	cmp	r2, r3
 800af88:	d8f7      	bhi.n	800af7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	4413      	add	r3, r2
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d108      	bne.n	800afae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	685a      	ldr	r2, [r3, #4]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	441a      	add	r2, r3
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	441a      	add	r2, r3
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d118      	bne.n	800aff4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	4b14      	ldr	r3, [pc, #80]	@ (800b018 <prvInsertBlockIntoFreeList+0xac>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d00d      	beq.n	800afea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685a      	ldr	r2, [r3, #4]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	441a      	add	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	601a      	str	r2, [r3, #0]
 800afe8:	e008      	b.n	800affc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800afea:	4b0b      	ldr	r3, [pc, #44]	@ (800b018 <prvInsertBlockIntoFreeList+0xac>)
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	601a      	str	r2, [r3, #0]
 800aff2:	e003      	b.n	800affc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	429a      	cmp	r2, r3
 800b002:	d002      	beq.n	800b00a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b00a:	bf00      	nop
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	bc80      	pop	{r7}
 800b012:	4770      	bx	lr
 800b014:	20002eac 	.word	0x20002eac
 800b018:	20002eb4 	.word	0x20002eb4

0800b01c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800b01c:	b580      	push	{r7, lr}
 800b01e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800b020:	4803      	ldr	r0, [pc, #12]	@ (800b030 <_cbSendSystemDesc+0x14>)
 800b022:	f001 fe7d 	bl	800cd20 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800b026:	4803      	ldr	r0, [pc, #12]	@ (800b034 <_cbSendSystemDesc+0x18>)
 800b028:	f001 fe7a 	bl	800cd20 <SEGGER_SYSVIEW_SendSysDesc>
}
 800b02c:	bf00      	nop
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	08010178 	.word	0x08010178
 800b034:	080101b8 	.word	0x080101b8

0800b038 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800b038:	b580      	push	{r7, lr}
 800b03a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800b03c:	4b06      	ldr	r3, [pc, #24]	@ (800b058 <SEGGER_SYSVIEW_Conf+0x20>)
 800b03e:	6818      	ldr	r0, [r3, #0]
 800b040:	4b05      	ldr	r3, [pc, #20]	@ (800b058 <SEGGER_SYSVIEW_Conf+0x20>)
 800b042:	6819      	ldr	r1, [r3, #0]
 800b044:	4b05      	ldr	r3, [pc, #20]	@ (800b05c <SEGGER_SYSVIEW_Conf+0x24>)
 800b046:	4a06      	ldr	r2, [pc, #24]	@ (800b060 <SEGGER_SYSVIEW_Conf+0x28>)
 800b048:	f001 f9e8 	bl	800c41c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800b04c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800b050:	f001 fa2a 	bl	800c4a8 <SEGGER_SYSVIEW_SetRAMBase>
}
 800b054:	bf00      	nop
 800b056:	bd80      	pop	{r7, pc}
 800b058:	20000004 	.word	0x20000004
 800b05c:	0800b01d 	.word	0x0800b01d
 800b060:	08010310 	.word	0x08010310

0800b064 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800b064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b066:	b085      	sub	sp, #20
 800b068:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800b06a:	2300      	movs	r3, #0
 800b06c:	607b      	str	r3, [r7, #4]
 800b06e:	e033      	b.n	800b0d8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800b070:	491e      	ldr	r1, [pc, #120]	@ (800b0ec <_cbSendTaskList+0x88>)
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	4613      	mov	r3, r2
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	4413      	add	r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	440b      	add	r3, r1
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	491a      	ldr	r1, [pc, #104]	@ (800b0ec <_cbSendTaskList+0x88>)
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	4613      	mov	r3, r2
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	4413      	add	r3, r2
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	440b      	add	r3, r1
 800b08e:	3304      	adds	r3, #4
 800b090:	6819      	ldr	r1, [r3, #0]
 800b092:	4c16      	ldr	r4, [pc, #88]	@ (800b0ec <_cbSendTaskList+0x88>)
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	4613      	mov	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	4423      	add	r3, r4
 800b0a0:	3308      	adds	r3, #8
 800b0a2:	681c      	ldr	r4, [r3, #0]
 800b0a4:	4d11      	ldr	r5, [pc, #68]	@ (800b0ec <_cbSendTaskList+0x88>)
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	4413      	add	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	442b      	add	r3, r5
 800b0b2:	330c      	adds	r3, #12
 800b0b4:	681d      	ldr	r5, [r3, #0]
 800b0b6:	4e0d      	ldr	r6, [pc, #52]	@ (800b0ec <_cbSendTaskList+0x88>)
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	4433      	add	r3, r6
 800b0c4:	3310      	adds	r3, #16
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	462b      	mov	r3, r5
 800b0cc:	4622      	mov	r2, r4
 800b0ce:	f000 f8bd 	bl	800b24c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	607b      	str	r3, [r7, #4]
 800b0d8:	4b05      	ldr	r3, [pc, #20]	@ (800b0f0 <_cbSendTaskList+0x8c>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d3c6      	bcc.n	800b070 <_cbSendTaskList+0xc>
  }
}
 800b0e2:	bf00      	nop
 800b0e4:	bf00      	nop
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0ec:	20002ec4 	.word	0x20002ec4
 800b0f0:	20002f64 	.word	0x20002f64

0800b0f4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800b0f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800b0fc:	f7fe fc62 	bl	80099c4 <xTaskGetTickCountFromISR>
 800b100:	4603      	mov	r3, r0
 800b102:	2200      	movs	r2, #0
 800b104:	469a      	mov	sl, r3
 800b106:	4693      	mov	fp, r2
 800b108:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800b10c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	f04f 0a00 	mov.w	sl, #0
 800b118:	f04f 0b00 	mov.w	fp, #0
 800b11c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800b120:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800b124:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800b128:	4652      	mov	r2, sl
 800b12a:	465b      	mov	r3, fp
 800b12c:	1a14      	subs	r4, r2, r0
 800b12e:	eb63 0501 	sbc.w	r5, r3, r1
 800b132:	f04f 0200 	mov.w	r2, #0
 800b136:	f04f 0300 	mov.w	r3, #0
 800b13a:	00ab      	lsls	r3, r5, #2
 800b13c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800b140:	00a2      	lsls	r2, r4, #2
 800b142:	4614      	mov	r4, r2
 800b144:	461d      	mov	r5, r3
 800b146:	eb14 0800 	adds.w	r8, r4, r0
 800b14a:	eb45 0901 	adc.w	r9, r5, r1
 800b14e:	f04f 0200 	mov.w	r2, #0
 800b152:	f04f 0300 	mov.w	r3, #0
 800b156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b15a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b15e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b162:	4690      	mov	r8, r2
 800b164:	4699      	mov	r9, r3
 800b166:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800b16a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800b16e:	4610      	mov	r0, r2
 800b170:	4619      	mov	r1, r3
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800b17c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af02      	add	r7, sp, #8
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800b18a:	2205      	movs	r2, #5
 800b18c:	492b      	ldr	r1, [pc, #172]	@ (800b23c <SYSVIEW_AddTask+0xc0>)
 800b18e:	68b8      	ldr	r0, [r7, #8]
 800b190:	f002 feb7 	bl	800df02 <memcmp>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d04b      	beq.n	800b232 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800b19a:	4b29      	ldr	r3, [pc, #164]	@ (800b240 <SYSVIEW_AddTask+0xc4>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2b07      	cmp	r3, #7
 800b1a0:	d903      	bls.n	800b1aa <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800b1a2:	4828      	ldr	r0, [pc, #160]	@ (800b244 <SYSVIEW_AddTask+0xc8>)
 800b1a4:	f001 fff4 	bl	800d190 <SEGGER_SYSVIEW_Warn>
    return;
 800b1a8:	e044      	b.n	800b234 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800b1aa:	4b25      	ldr	r3, [pc, #148]	@ (800b240 <SYSVIEW_AddTask+0xc4>)
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	4926      	ldr	r1, [pc, #152]	@ (800b248 <SYSVIEW_AddTask+0xcc>)
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4413      	add	r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	440b      	add	r3, r1
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800b1be:	4b20      	ldr	r3, [pc, #128]	@ (800b240 <SYSVIEW_AddTask+0xc4>)
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	4921      	ldr	r1, [pc, #132]	@ (800b248 <SYSVIEW_AddTask+0xcc>)
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4413      	add	r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	440b      	add	r3, r1
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800b1d4:	4b1a      	ldr	r3, [pc, #104]	@ (800b240 <SYSVIEW_AddTask+0xc4>)
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	491b      	ldr	r1, [pc, #108]	@ (800b248 <SYSVIEW_AddTask+0xcc>)
 800b1da:	4613      	mov	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	440b      	add	r3, r1
 800b1e4:	3308      	adds	r3, #8
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800b1ea:	4b15      	ldr	r3, [pc, #84]	@ (800b240 <SYSVIEW_AddTask+0xc4>)
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	4916      	ldr	r1, [pc, #88]	@ (800b248 <SYSVIEW_AddTask+0xcc>)
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4413      	add	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	440b      	add	r3, r1
 800b1fa:	330c      	adds	r3, #12
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800b200:	4b0f      	ldr	r3, [pc, #60]	@ (800b240 <SYSVIEW_AddTask+0xc4>)
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	4910      	ldr	r1, [pc, #64]	@ (800b248 <SYSVIEW_AddTask+0xcc>)
 800b206:	4613      	mov	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	4413      	add	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	440b      	add	r3, r1
 800b210:	3310      	adds	r3, #16
 800b212:	69ba      	ldr	r2, [r7, #24]
 800b214:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800b216:	4b0a      	ldr	r3, [pc, #40]	@ (800b240 <SYSVIEW_AddTask+0xc4>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	3301      	adds	r3, #1
 800b21c:	4a08      	ldr	r2, [pc, #32]	@ (800b240 <SYSVIEW_AddTask+0xc4>)
 800b21e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	9300      	str	r3, [sp, #0]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	68b9      	ldr	r1, [r7, #8]
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	f000 f80e 	bl	800b24c <SYSVIEW_SendTaskInfo>
 800b230:	e000      	b.n	800b234 <SYSVIEW_AddTask+0xb8>
    return;
 800b232:	bf00      	nop

}
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	080101c8 	.word	0x080101c8
 800b240:	20002f64 	.word	0x20002f64
 800b244:	080101d0 	.word	0x080101d0
 800b248:	20002ec4 	.word	0x20002ec4

0800b24c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b08a      	sub	sp, #40	@ 0x28
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
 800b258:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800b25a:	f107 0314 	add.w	r3, r7, #20
 800b25e:	2214      	movs	r2, #20
 800b260:	2100      	movs	r1, #0
 800b262:	4618      	mov	r0, r3
 800b264:	f002 fe5d 	bl	800df22 <memset>
  TaskInfo.TaskID     = TaskID;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800b278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27a:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800b27c:	f107 0314 	add.w	r3, r7, #20
 800b280:	4618      	mov	r0, r3
 800b282:	f001 fc55 	bl	800cb30 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800b286:	bf00      	nop
 800b288:	3728      	adds	r7, #40	@ 0x28
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
	...

0800b290 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800b296:	4b21      	ldr	r3, [pc, #132]	@ (800b31c <_DoInit+0x8c>)
 800b298:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2203      	movs	r2, #3
 800b29e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2203      	movs	r2, #3
 800b2a4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b320 <_DoInit+0x90>)
 800b2aa:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	4a1d      	ldr	r2, [pc, #116]	@ (800b324 <_DoInit+0x94>)
 800b2b0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b2b8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a14      	ldr	r2, [pc, #80]	@ (800b320 <_DoInit+0x90>)
 800b2d0:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a14      	ldr	r2, [pc, #80]	@ (800b328 <_DoInit+0x98>)
 800b2d6:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2210      	movs	r2, #16
 800b2dc:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	3307      	adds	r3, #7
 800b2f4:	4a0d      	ldr	r2, [pc, #52]	@ (800b32c <_DoInit+0x9c>)
 800b2f6:	6810      	ldr	r0, [r2, #0]
 800b2f8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4a0c      	ldr	r2, [pc, #48]	@ (800b330 <_DoInit+0xa0>)
 800b2fe:	6810      	ldr	r0, [r2, #0]
 800b300:	6018      	str	r0, [r3, #0]
 800b302:	8891      	ldrh	r1, [r2, #4]
 800b304:	7992      	ldrb	r2, [r2, #6]
 800b306:	8099      	strh	r1, [r3, #4]
 800b308:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2220      	movs	r2, #32
 800b30e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 800b310:	bf00      	nop
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	bc80      	pop	{r7}
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	20002f68 	.word	0x20002f68
 800b320:	08010220 	.word	0x08010220
 800b324:	20003010 	.word	0x20003010
 800b328:	20003410 	.word	0x20003410
 800b32c:	0801022c 	.word	0x0801022c
 800b330:	08010230 	.word	0x08010230

0800b334 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800b334:	b580      	push	{r7, lr}
 800b336:	b08a      	sub	sp, #40	@ 0x28
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800b340:	2300      	movs	r3, #0
 800b342:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800b350:	69ba      	ldr	r2, [r7, #24]
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	429a      	cmp	r2, r3
 800b356:	d905      	bls.n	800b364 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800b358:	69ba      	ldr	r2, [r7, #24]
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	3b01      	subs	r3, #1
 800b360:	627b      	str	r3, [r7, #36]	@ 0x24
 800b362:	e007      	b.n	800b374 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	689a      	ldr	r2, [r3, #8]
 800b368:	69b9      	ldr	r1, [r7, #24]
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	1acb      	subs	r3, r1, r3
 800b36e:	4413      	add	r3, r2
 800b370:	3b01      	subs	r3, #1
 800b372:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	689a      	ldr	r2, [r3, #8]
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b37e:	4293      	cmp	r3, r2
 800b380:	bf28      	it	cs
 800b382:	4613      	movcs	r3, r2
 800b384:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800b386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4293      	cmp	r3, r2
 800b38c:	bf28      	it	cs
 800b38e:	4613      	movcs	r3, r2
 800b390:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	685a      	ldr	r2, [r3, #4]
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	4413      	add	r3, r2
 800b39a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800b39c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b39e:	68b9      	ldr	r1, [r7, #8]
 800b3a0:	6978      	ldr	r0, [r7, #20]
 800b3a2:	f002 fea0 	bl	800e0e6 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800b3a6:	6a3a      	ldr	r2, [r7, #32]
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3aa:	4413      	add	r3, r2
 800b3ac:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b2:	4413      	add	r3, r2
 800b3b4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ba:	1ad3      	subs	r3, r2, r3
 800b3bc:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800b3be:	69fa      	ldr	r2, [r7, #28]
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c2:	4413      	add	r3, r2
 800b3c4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	69fa      	ldr	r2, [r7, #28]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d101      	bne.n	800b3d4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	69fa      	ldr	r2, [r7, #28]
 800b3d8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1b4      	bne.n	800b34a <_WriteBlocking+0x16>
  return NumBytesWritten;
 800b3e0:	6a3b      	ldr	r3, [r7, #32]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3728      	adds	r7, #40	@ 0x28
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b088      	sub	sp, #32
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	60f8      	str	r0, [r7, #12]
 800b3f2:	60b9      	str	r1, [r7, #8]
 800b3f4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	689a      	ldr	r2, [r3, #8]
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800b406:	69ba      	ldr	r2, [r7, #24]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d90f      	bls.n	800b42e <_WriteNoCheck+0x44>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	685a      	ldr	r2, [r3, #4]
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	4413      	add	r3, r2
 800b416:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	68b9      	ldr	r1, [r7, #8]
 800b41c:	6938      	ldr	r0, [r7, #16]
 800b41e:	f002 fe62 	bl	800e0e6 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 800b422:	69fa      	ldr	r2, [r7, #28]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	441a      	add	r2, r3
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800b42c:	e01d      	b.n	800b46a <_WriteNoCheck+0x80>
    NumBytesAtOnce = Rem;
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	685a      	ldr	r2, [r3, #4]
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	4413      	add	r3, r2
 800b43a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	68b9      	ldr	r1, [r7, #8]
 800b440:	6938      	ldr	r0, [r7, #16]
 800b442:	f002 fe50 	bl	800e0e6 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800b454:	68ba      	ldr	r2, [r7, #8]
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	4413      	add	r3, r2
 800b45a:	697a      	ldr	r2, [r7, #20]
 800b45c:	4619      	mov	r1, r3
 800b45e:	6938      	ldr	r0, [r7, #16]
 800b460:	f002 fe41 	bl	800e0e6 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	60da      	str	r2, [r3, #12]
}
 800b46a:	bf00      	nop
 800b46c:	3720      	adds	r7, #32
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800b472:	b480      	push	{r7}
 800b474:	b087      	sub	sp, #28
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d808      	bhi.n	800b4a0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	689a      	ldr	r2, [r3, #8]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	1ad2      	subs	r2, r2, r3
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	4413      	add	r3, r2
 800b49a:	3b01      	subs	r3, #1
 800b49c:	617b      	str	r3, [r7, #20]
 800b49e:	e004      	b.n	800b4aa <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800b4a0:	693a      	ldr	r2, [r7, #16]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	617b      	str	r3, [r7, #20]
  }
  return r;
 800b4aa:	697b      	ldr	r3, [r7, #20]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	371c      	adds	r7, #28
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bc80      	pop	{r7}
 800b4b4:	4770      	bx	lr
	...

0800b4b8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b08c      	sub	sp, #48	@ 0x30
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800b4c4:	4b3e      	ldr	r3, [pc, #248]	@ (800b5c0 <SEGGER_RTT_ReadNoLock+0x108>)
 800b4c6:	623b      	str	r3, [r7, #32]
 800b4c8:	6a3b      	ldr	r3, [r7, #32]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <SEGGER_RTT_ReadNoLock+0x1e>
 800b4d2:	f7ff fedd 	bl	800b290 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	4613      	mov	r3, r2
 800b4da:	005b      	lsls	r3, r3, #1
 800b4dc:	4413      	add	r3, r2
 800b4de:	00db      	lsls	r3, r3, #3
 800b4e0:	3360      	adds	r3, #96	@ 0x60
 800b4e2:	4a37      	ldr	r2, [pc, #220]	@ (800b5c0 <SEGGER_RTT_ReadNoLock+0x108>)
 800b4e4:	4413      	add	r3, r2
 800b4e6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800b4fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	429a      	cmp	r2, r3
 800b502:	d92b      	bls.n	800b55c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	689a      	ldr	r2, [r3, #8]
 800b508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b50a:	1ad3      	subs	r3, r2, r3
 800b50c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b50e:	697a      	ldr	r2, [r7, #20]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4293      	cmp	r3, r2
 800b514:	bf28      	it	cs
 800b516:	4613      	movcs	r3, r2
 800b518:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	685a      	ldr	r2, [r3, #4]
 800b51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b520:	4413      	add	r3, r2
 800b522:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	6939      	ldr	r1, [r7, #16]
 800b528:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b52a:	f002 fddc 	bl	800e0e6 <memcpy>
    NumBytesRead += NumBytesRem;
 800b52e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	4413      	add	r3, r2
 800b534:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800b536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	4413      	add	r3, r2
 800b53c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	4413      	add	r3, r2
 800b54c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b554:	429a      	cmp	r2, r3
 800b556:	d101      	bne.n	800b55c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800b558:	2300      	movs	r3, #0
 800b55a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800b55c:	69ba      	ldr	r2, [r7, #24]
 800b55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4293      	cmp	r3, r2
 800b56a:	bf28      	it	cs
 800b56c:	4613      	movcs	r3, r2
 800b56e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d019      	beq.n	800b5aa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	685a      	ldr	r2, [r3, #4]
 800b57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57c:	4413      	add	r3, r2
 800b57e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	6939      	ldr	r1, [r7, #16]
 800b584:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b586:	f002 fdae 	bl	800e0e6 <memcpy>
    NumBytesRead += NumBytesRem;
 800b58a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	4413      	add	r3, r2
 800b590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800b592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	4413      	add	r3, r2
 800b598:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b5a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800b5aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5b4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800b5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3730      	adds	r7, #48	@ 0x30
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	20002f68 	.word	0x20002f68

0800b5c4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b088      	sub	sp, #32
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	1c5a      	adds	r2, r3, #1
 800b5d8:	4613      	mov	r3, r2
 800b5da:	005b      	lsls	r3, r3, #1
 800b5dc:	4413      	add	r3, r2
 800b5de:	00db      	lsls	r3, r3, #3
 800b5e0:	4a1f      	ldr	r2, [pc, #124]	@ (800b660 <SEGGER_RTT_WriteNoLock+0x9c>)
 800b5e2:	4413      	add	r3, r2
 800b5e4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	695b      	ldr	r3, [r3, #20]
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d029      	beq.n	800b642 <SEGGER_RTT_WriteNoLock+0x7e>
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d82e      	bhi.n	800b650 <SEGGER_RTT_WriteNoLock+0x8c>
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d002      	beq.n	800b5fc <SEGGER_RTT_WriteNoLock+0x38>
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d013      	beq.n	800b622 <SEGGER_RTT_WriteNoLock+0x5e>
 800b5fa:	e029      	b.n	800b650 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800b5fc:	6978      	ldr	r0, [r7, #20]
 800b5fe:	f7ff ff38 	bl	800b472 <_GetAvailWriteSpace>
 800b602:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800b604:	693a      	ldr	r2, [r7, #16]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d202      	bcs.n	800b612 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800b60c:	2300      	movs	r3, #0
 800b60e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800b610:	e021      	b.n	800b656 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	69b9      	ldr	r1, [r7, #24]
 800b61a:	6978      	ldr	r0, [r7, #20]
 800b61c:	f7ff fee5 	bl	800b3ea <_WriteNoCheck>
    break;
 800b620:	e019      	b.n	800b656 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800b622:	6978      	ldr	r0, [r7, #20]
 800b624:	f7ff ff25 	bl	800b472 <_GetAvailWriteSpace>
 800b628:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	4293      	cmp	r3, r2
 800b630:	bf28      	it	cs
 800b632:	4613      	movcs	r3, r2
 800b634:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800b636:	69fa      	ldr	r2, [r7, #28]
 800b638:	69b9      	ldr	r1, [r7, #24]
 800b63a:	6978      	ldr	r0, [r7, #20]
 800b63c:	f7ff fed5 	bl	800b3ea <_WriteNoCheck>
    break;
 800b640:	e009      	b.n	800b656 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	69b9      	ldr	r1, [r7, #24]
 800b646:	6978      	ldr	r0, [r7, #20]
 800b648:	f7ff fe74 	bl	800b334 <_WriteBlocking>
 800b64c:	61f8      	str	r0, [r7, #28]
    break;
 800b64e:	e002      	b.n	800b656 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800b650:	2300      	movs	r3, #0
 800b652:	61fb      	str	r3, [r7, #28]
    break;
 800b654:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800b656:	69fb      	ldr	r3, [r7, #28]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3720      	adds	r7, #32
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	20002f68 	.word	0x20002f68

0800b664 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800b664:	b580      	push	{r7, lr}
 800b666:	b088      	sub	sp, #32
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800b670:	4b0e      	ldr	r3, [pc, #56]	@ (800b6ac <SEGGER_RTT_Write+0x48>)
 800b672:	61fb      	str	r3, [r7, #28]
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <SEGGER_RTT_Write+0x1e>
 800b67e:	f7ff fe07 	bl	800b290 <_DoInit>
  SEGGER_RTT_LOCK();
 800b682:	f3ef 8311 	mrs	r3, BASEPRI
 800b686:	f04f 0120 	mov.w	r1, #32
 800b68a:	f381 8811 	msr	BASEPRI, r1
 800b68e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	68b9      	ldr	r1, [r7, #8]
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f7ff ff95 	bl	800b5c4 <SEGGER_RTT_WriteNoLock>
 800b69a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800b6a2:	697b      	ldr	r3, [r7, #20]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3720      	adds	r7, #32
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	20002f68 	.word	0x20002f68

0800b6b0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	607a      	str	r2, [r7, #4]
 800b6bc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800b6be:	4b3c      	ldr	r3, [pc, #240]	@ (800b7b0 <SEGGER_RTT_AllocUpBuffer+0x100>)
 800b6c0:	61bb      	str	r3, [r7, #24]
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d101      	bne.n	800b6d0 <SEGGER_RTT_AllocUpBuffer+0x20>
 800b6cc:	f7ff fde0 	bl	800b290 <_DoInit>
  SEGGER_RTT_LOCK();
 800b6d0:	f3ef 8311 	mrs	r3, BASEPRI
 800b6d4:	f04f 0120 	mov.w	r1, #32
 800b6d8:	f381 8811 	msr	BASEPRI, r1
 800b6dc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b6de:	4b34      	ldr	r3, [pc, #208]	@ (800b7b0 <SEGGER_RTT_AllocUpBuffer+0x100>)
 800b6e0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800b6e6:	6939      	ldr	r1, [r7, #16]
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	1c5a      	adds	r2, r3, #1
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	005b      	lsls	r3, r3, #1
 800b6f0:	4413      	add	r3, r2
 800b6f2:	00db      	lsls	r3, r3, #3
 800b6f4:	440b      	add	r3, r1
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d008      	beq.n	800b710 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	3301      	adds	r3, #1
 800b702:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	69fa      	ldr	r2, [r7, #28]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	dbeb      	blt.n	800b6e6 <SEGGER_RTT_AllocUpBuffer+0x36>
 800b70e:	e000      	b.n	800b712 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800b710:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	69fa      	ldr	r2, [r7, #28]
 800b718:	429a      	cmp	r2, r3
 800b71a:	da3d      	bge.n	800b798 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800b71c:	6939      	ldr	r1, [r7, #16]
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	1c5a      	adds	r2, r3, #1
 800b722:	4613      	mov	r3, r2
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	4413      	add	r3, r2
 800b728:	00db      	lsls	r3, r3, #3
 800b72a:	440b      	add	r3, r1
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800b730:	6939      	ldr	r1, [r7, #16]
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	1c5a      	adds	r2, r3, #1
 800b736:	4613      	mov	r3, r2
 800b738:	005b      	lsls	r3, r3, #1
 800b73a:	4413      	add	r3, r2
 800b73c:	00db      	lsls	r3, r3, #3
 800b73e:	440b      	add	r3, r1
 800b740:	3304      	adds	r3, #4
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800b746:	6939      	ldr	r1, [r7, #16]
 800b748:	69fa      	ldr	r2, [r7, #28]
 800b74a:	4613      	mov	r3, r2
 800b74c:	005b      	lsls	r3, r3, #1
 800b74e:	4413      	add	r3, r2
 800b750:	00db      	lsls	r3, r3, #3
 800b752:	440b      	add	r3, r1
 800b754:	3320      	adds	r3, #32
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800b75a:	6939      	ldr	r1, [r7, #16]
 800b75c:	69fa      	ldr	r2, [r7, #28]
 800b75e:	4613      	mov	r3, r2
 800b760:	005b      	lsls	r3, r3, #1
 800b762:	4413      	add	r3, r2
 800b764:	00db      	lsls	r3, r3, #3
 800b766:	440b      	add	r3, r1
 800b768:	3328      	adds	r3, #40	@ 0x28
 800b76a:	2200      	movs	r2, #0
 800b76c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800b76e:	6939      	ldr	r1, [r7, #16]
 800b770:	69fa      	ldr	r2, [r7, #28]
 800b772:	4613      	mov	r3, r2
 800b774:	005b      	lsls	r3, r3, #1
 800b776:	4413      	add	r3, r2
 800b778:	00db      	lsls	r3, r3, #3
 800b77a:	440b      	add	r3, r1
 800b77c:	3324      	adds	r3, #36	@ 0x24
 800b77e:	2200      	movs	r2, #0
 800b780:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800b782:	6939      	ldr	r1, [r7, #16]
 800b784:	69fa      	ldr	r2, [r7, #28]
 800b786:	4613      	mov	r3, r2
 800b788:	005b      	lsls	r3, r3, #1
 800b78a:	4413      	add	r3, r2
 800b78c:	00db      	lsls	r3, r3, #3
 800b78e:	440b      	add	r3, r1
 800b790:	332c      	adds	r3, #44	@ 0x2c
 800b792:	683a      	ldr	r2, [r7, #0]
 800b794:	601a      	str	r2, [r3, #0]
 800b796:	e002      	b.n	800b79e <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 800b798:	f04f 33ff 	mov.w	r3, #4294967295
 800b79c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800b7a4:	69fb      	ldr	r3, [r7, #28]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3720      	adds	r7, #32
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	20002f68 	.word	0x20002f68

0800b7b4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
 800b7c0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800b7c2:	4b32      	ldr	r3, [pc, #200]	@ (800b88c <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 800b7c4:	61bb      	str	r3, [r7, #24]
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d101      	bne.n	800b7d4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800b7d0:	f7ff fd5e 	bl	800b290 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b7d4:	4b2d      	ldr	r3, [pc, #180]	@ (800b88c <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 800b7d6:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d24b      	bcs.n	800b87c <SEGGER_RTT_ConfigDownBuffer+0xc8>
    SEGGER_RTT_LOCK();
 800b7e4:	f3ef 8311 	mrs	r3, BASEPRI
 800b7e8:	f04f 0120 	mov.w	r1, #32
 800b7ec:	f381 8811 	msr	BASEPRI, r1
 800b7f0:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d031      	beq.n	800b85c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800b7f8:	6979      	ldr	r1, [r7, #20]
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	005b      	lsls	r3, r3, #1
 800b800:	4413      	add	r3, r2
 800b802:	00db      	lsls	r3, r3, #3
 800b804:	440b      	add	r3, r1
 800b806:	3360      	adds	r3, #96	@ 0x60
 800b808:	68ba      	ldr	r2, [r7, #8]
 800b80a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800b80c:	6979      	ldr	r1, [r7, #20]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	4613      	mov	r3, r2
 800b812:	005b      	lsls	r3, r3, #1
 800b814:	4413      	add	r3, r2
 800b816:	00db      	lsls	r3, r3, #3
 800b818:	440b      	add	r3, r1
 800b81a:	3364      	adds	r3, #100	@ 0x64
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800b820:	6979      	ldr	r1, [r7, #20]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	4613      	mov	r3, r2
 800b826:	005b      	lsls	r3, r3, #1
 800b828:	4413      	add	r3, r2
 800b82a:	00db      	lsls	r3, r3, #3
 800b82c:	440b      	add	r3, r1
 800b82e:	3368      	adds	r3, #104	@ 0x68
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800b834:	6979      	ldr	r1, [r7, #20]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	4613      	mov	r3, r2
 800b83a:	005b      	lsls	r3, r3, #1
 800b83c:	4413      	add	r3, r2
 800b83e:	00db      	lsls	r3, r3, #3
 800b840:	440b      	add	r3, r1
 800b842:	3370      	adds	r3, #112	@ 0x70
 800b844:	2200      	movs	r2, #0
 800b846:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800b848:	6979      	ldr	r1, [r7, #20]
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	4613      	mov	r3, r2
 800b84e:	005b      	lsls	r3, r3, #1
 800b850:	4413      	add	r3, r2
 800b852:	00db      	lsls	r3, r3, #3
 800b854:	440b      	add	r3, r1
 800b856:	336c      	adds	r3, #108	@ 0x6c
 800b858:	2200      	movs	r2, #0
 800b85a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 800b85c:	6979      	ldr	r1, [r7, #20]
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	4613      	mov	r3, r2
 800b862:	005b      	lsls	r3, r3, #1
 800b864:	4413      	add	r3, r2
 800b866:	00db      	lsls	r3, r3, #3
 800b868:	440b      	add	r3, r1
 800b86a:	3374      	adds	r3, #116	@ 0x74
 800b86c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b86e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800b876:	2300      	movs	r3, #0
 800b878:	61fb      	str	r3, [r7, #28]
 800b87a:	e002      	b.n	800b882 <SEGGER_RTT_ConfigDownBuffer+0xce>
  } else {
    r = -1;
 800b87c:	f04f 33ff 	mov.w	r3, #4294967295
 800b880:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800b882:	69fb      	ldr	r3, [r7, #28]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3720      	adds	r7, #32
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	20002f68 	.word	0x20002f68

0800b890 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800b890:	b480      	push	{r7}
 800b892:	b087      	sub	sp, #28
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800b8a0:	e002      	b.n	800b8a8 <_EncodeStr+0x18>
    Len++;
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1f6      	bne.n	800b8a2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800b8b4:	693a      	ldr	r2, [r7, #16]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d901      	bls.n	800b8c0 <_EncodeStr+0x30>
    Len = Limit;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	2bfe      	cmp	r3, #254	@ 0xfe
 800b8c4:	d806      	bhi.n	800b8d4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	1c5a      	adds	r2, r3, #1
 800b8ca:	60fa      	str	r2, [r7, #12]
 800b8cc:	693a      	ldr	r2, [r7, #16]
 800b8ce:	b2d2      	uxtb	r2, r2
 800b8d0:	701a      	strb	r2, [r3, #0]
 800b8d2:	e011      	b.n	800b8f8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	1c5a      	adds	r2, r3, #1
 800b8d8:	60fa      	str	r2, [r7, #12]
 800b8da:	22ff      	movs	r2, #255	@ 0xff
 800b8dc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	1c5a      	adds	r2, r3, #1
 800b8e2:	60fa      	str	r2, [r7, #12]
 800b8e4:	693a      	ldr	r2, [r7, #16]
 800b8e6:	b2d2      	uxtb	r2, r2
 800b8e8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	0a19      	lsrs	r1, r3, #8
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	1c5a      	adds	r2, r3, #1
 800b8f2:	60fa      	str	r2, [r7, #12]
 800b8f4:	b2ca      	uxtb	r2, r1
 800b8f6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b8fc:	e00a      	b.n	800b914 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	1c53      	adds	r3, r2, #1
 800b902:	60bb      	str	r3, [r7, #8]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	1c59      	adds	r1, r3, #1
 800b908:	60f9      	str	r1, [r7, #12]
 800b90a:	7812      	ldrb	r2, [r2, #0]
 800b90c:	701a      	strb	r2, [r3, #0]
    n++;
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	3301      	adds	r3, #1
 800b912:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d3f0      	bcc.n	800b8fe <_EncodeStr+0x6e>
  }
  return pPayload;
 800b91c:	68fb      	ldr	r3, [r7, #12]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	371c      	adds	r7, #28
 800b922:	46bd      	mov	sp, r7
 800b924:	bc80      	pop	{r7}
 800b926:	4770      	bx	lr

0800b928 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	3304      	adds	r3, #4
}
 800b934:	4618      	mov	r0, r3
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	bc80      	pop	{r7}
 800b93c:	4770      	bx	lr
	...

0800b940 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b946:	4b35      	ldr	r3, [pc, #212]	@ (800ba1c <_HandleIncomingPacket+0xdc>)
 800b948:	7e1b      	ldrb	r3, [r3, #24]
 800b94a:	4618      	mov	r0, r3
 800b94c:	1cfb      	adds	r3, r7, #3
 800b94e:	2201      	movs	r2, #1
 800b950:	4619      	mov	r1, r3
 800b952:	f7ff fdb1 	bl	800b4b8 <SEGGER_RTT_ReadNoLock>
 800b956:	4603      	mov	r3, r0
 800b958:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	dd59      	ble.n	800ba14 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800b960:	78fb      	ldrb	r3, [r7, #3]
 800b962:	2b80      	cmp	r3, #128	@ 0x80
 800b964:	d032      	beq.n	800b9cc <_HandleIncomingPacket+0x8c>
 800b966:	2b80      	cmp	r3, #128	@ 0x80
 800b968:	dc42      	bgt.n	800b9f0 <_HandleIncomingPacket+0xb0>
 800b96a:	2b07      	cmp	r3, #7
 800b96c:	dc16      	bgt.n	800b99c <_HandleIncomingPacket+0x5c>
 800b96e:	2b00      	cmp	r3, #0
 800b970:	dd3e      	ble.n	800b9f0 <_HandleIncomingPacket+0xb0>
 800b972:	3b01      	subs	r3, #1
 800b974:	2b06      	cmp	r3, #6
 800b976:	d83b      	bhi.n	800b9f0 <_HandleIncomingPacket+0xb0>
 800b978:	a201      	add	r2, pc, #4	@ (adr r2, 800b980 <_HandleIncomingPacket+0x40>)
 800b97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b97e:	bf00      	nop
 800b980:	0800b9a3 	.word	0x0800b9a3
 800b984:	0800b9a9 	.word	0x0800b9a9
 800b988:	0800b9af 	.word	0x0800b9af
 800b98c:	0800b9b5 	.word	0x0800b9b5
 800b990:	0800b9bb 	.word	0x0800b9bb
 800b994:	0800b9c1 	.word	0x0800b9c1
 800b998:	0800b9c7 	.word	0x0800b9c7
 800b99c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b99e:	d034      	beq.n	800ba0a <_HandleIncomingPacket+0xca>
 800b9a0:	e026      	b.n	800b9f0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800b9a2:	f000 ff4b 	bl	800c83c <SEGGER_SYSVIEW_Start>
      break;
 800b9a6:	e035      	b.n	800ba14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800b9a8:	f001 f802 	bl	800c9b0 <SEGGER_SYSVIEW_Stop>
      break;
 800b9ac:	e032      	b.n	800ba14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800b9ae:	f001 f9db 	bl	800cd68 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800b9b2:	e02f      	b.n	800ba14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800b9b4:	f001 f9a0 	bl	800ccf8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800b9b8:	e02c      	b.n	800ba14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800b9ba:	f001 f81f 	bl	800c9fc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800b9be:	e029      	b.n	800ba14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800b9c0:	f001 fb94 	bl	800d0ec <SEGGER_SYSVIEW_SendNumModules>
      break;
 800b9c4:	e026      	b.n	800ba14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800b9c6:	f001 fb73 	bl	800d0b0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800b9ca:	e023      	b.n	800ba14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b9cc:	4b13      	ldr	r3, [pc, #76]	@ (800ba1c <_HandleIncomingPacket+0xdc>)
 800b9ce:	7e1b      	ldrb	r3, [r3, #24]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	1cfb      	adds	r3, r7, #3
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	f7ff fd6e 	bl	800b4b8 <SEGGER_RTT_ReadNoLock>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	dd13      	ble.n	800ba0e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800b9e6:	78fb      	ldrb	r3, [r7, #3]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f001 fae1 	bl	800cfb0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800b9ee:	e00e      	b.n	800ba0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800b9f0:	78fb      	ldrb	r3, [r7, #3]
 800b9f2:	b25b      	sxtb	r3, r3
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	da0c      	bge.n	800ba12 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b9f8:	4b08      	ldr	r3, [pc, #32]	@ (800ba1c <_HandleIncomingPacket+0xdc>)
 800b9fa:	7e1b      	ldrb	r3, [r3, #24]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	1cfb      	adds	r3, r7, #3
 800ba00:	2201      	movs	r2, #1
 800ba02:	4619      	mov	r1, r3
 800ba04:	f7ff fd58 	bl	800b4b8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800ba08:	e003      	b.n	800ba12 <_HandleIncomingPacket+0xd2>
      break;
 800ba0a:	bf00      	nop
 800ba0c:	e002      	b.n	800ba14 <_HandleIncomingPacket+0xd4>
      break;
 800ba0e:	bf00      	nop
 800ba10:	e000      	b.n	800ba14 <_HandleIncomingPacket+0xd4>
      break;
 800ba12:	bf00      	nop
    }
  }
}
 800ba14:	bf00      	nop
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	20004428 	.word	0x20004428

0800ba20 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b08c      	sub	sp, #48	@ 0x30
 800ba24:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800ba26:	2301      	movs	r3, #1
 800ba28:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800ba2a:	1d3b      	adds	r3, r7, #4
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba34:	4b34      	ldr	r3, [pc, #208]	@ (800bb08 <_TrySendOverflowPacket+0xe8>)
 800ba36:	695b      	ldr	r3, [r3, #20]
 800ba38:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba3a:	e00b      	b.n	800ba54 <_TrySendOverflowPacket+0x34>
 800ba3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba3e:	b2da      	uxtb	r2, r3
 800ba40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba42:	1c59      	adds	r1, r3, #1
 800ba44:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ba46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ba4a:	b2d2      	uxtb	r2, r2
 800ba4c:	701a      	strb	r2, [r3, #0]
 800ba4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba50:	09db      	lsrs	r3, r3, #7
 800ba52:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba56:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba58:	d8f0      	bhi.n	800ba3c <_TrySendOverflowPacket+0x1c>
 800ba5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba5c:	1c5a      	adds	r2, r3, #1
 800ba5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba62:	b2d2      	uxtb	r2, r2
 800ba64:	701a      	strb	r2, [r3, #0]
 800ba66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba68:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800ba6a:	4b28      	ldr	r3, [pc, #160]	@ (800bb0c <_TrySendOverflowPacket+0xec>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	091b      	lsrs	r3, r3, #4
 800ba70:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800ba72:	4b25      	ldr	r3, [pc, #148]	@ (800bb08 <_TrySendOverflowPacket+0xe8>)
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	69ba      	ldr	r2, [r7, #24]
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	011b      	lsls	r3, r3, #4
 800ba80:	617b      	str	r3, [r7, #20]
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	111b      	asrs	r3, r3, #4
 800ba86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Delta);
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	623b      	str	r3, [r7, #32]
 800ba90:	e00b      	b.n	800baaa <_TrySendOverflowPacket+0x8a>
 800ba92:	6a3b      	ldr	r3, [r7, #32]
 800ba94:	b2da      	uxtb	r2, r3
 800ba96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba98:	1c59      	adds	r1, r3, #1
 800ba9a:	6279      	str	r1, [r7, #36]	@ 0x24
 800ba9c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800baa0:	b2d2      	uxtb	r2, r2
 800baa2:	701a      	strb	r2, [r3, #0]
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	09db      	lsrs	r3, r3, #7
 800baa8:	623b      	str	r3, [r7, #32]
 800baaa:	6a3b      	ldr	r3, [r7, #32]
 800baac:	2b7f      	cmp	r3, #127	@ 0x7f
 800baae:	d8f0      	bhi.n	800ba92 <_TrySendOverflowPacket+0x72>
 800bab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	627a      	str	r2, [r7, #36]	@ 0x24
 800bab6:	6a3a      	ldr	r2, [r7, #32]
 800bab8:	b2d2      	uxtb	r2, r2
 800baba:	701a      	strb	r2, [r3, #0]
 800babc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800babe:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800bac0:	4b11      	ldr	r3, [pc, #68]	@ (800bb08 <_TrySendOverflowPacket+0xe8>)
 800bac2:	785b      	ldrb	r3, [r3, #1]
 800bac4:	4618      	mov	r0, r3
 800bac6:	1d3b      	adds	r3, r7, #4
 800bac8:	69fa      	ldr	r2, [r7, #28]
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	461a      	mov	r2, r3
 800bace:	1d3b      	adds	r3, r7, #4
 800bad0:	4619      	mov	r1, r3
 800bad2:	f7f4 fb3d 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800bad6:	4603      	mov	r3, r0
 800bad8:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d009      	beq.n	800baf4 <_TrySendOverflowPacket+0xd4>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800bae0:	4a09      	ldr	r2, [pc, #36]	@ (800bb08 <_TrySendOverflowPacket+0xe8>)
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800bae6:	4b08      	ldr	r3, [pc, #32]	@ (800bb08 <_TrySendOverflowPacket+0xe8>)
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	3b01      	subs	r3, #1
 800baec:	b2da      	uxtb	r2, r3
 800baee:	4b06      	ldr	r3, [pc, #24]	@ (800bb08 <_TrySendOverflowPacket+0xe8>)
 800baf0:	701a      	strb	r2, [r3, #0]
 800baf2:	e004      	b.n	800bafe <_TrySendOverflowPacket+0xde>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800baf4:	4b04      	ldr	r3, [pc, #16]	@ (800bb08 <_TrySendOverflowPacket+0xe8>)
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	3301      	adds	r3, #1
 800bafa:	4a03      	ldr	r2, [pc, #12]	@ (800bb08 <_TrySendOverflowPacket+0xe8>)
 800bafc:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800bafe:	693b      	ldr	r3, [r7, #16]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3730      	adds	r7, #48	@ 0x30
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	20004428 	.word	0x20004428
 800bb0c:	e0001004 	.word	0xe0001004

0800bb10 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b08a      	sub	sp, #40	@ 0x28
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800bb1c:	4b6f      	ldr	r3, [pc, #444]	@ (800bcdc <_SendPacket+0x1cc>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d010      	beq.n	800bb46 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800bb24:	4b6d      	ldr	r3, [pc, #436]	@ (800bcdc <_SendPacket+0x1cc>)
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f000 80aa 	beq.w	800bc82 <_SendPacket+0x172>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800bb2e:	4b6b      	ldr	r3, [pc, #428]	@ (800bcdc <_SendPacket+0x1cc>)
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	d109      	bne.n	800bb4a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800bb36:	f7ff ff73 	bl	800ba20 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800bb3a:	4b68      	ldr	r3, [pc, #416]	@ (800bcdc <_SendPacket+0x1cc>)
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	f040 80a1 	bne.w	800bc86 <_SendPacket+0x176>
      goto SendDone;
    }
  }
Send:
 800bb44:	e001      	b.n	800bb4a <_SendPacket+0x3a>
    goto Send;
 800bb46:	bf00      	nop
 800bb48:	e000      	b.n	800bb4c <_SendPacket+0x3c>
Send:
 800bb4a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2b1f      	cmp	r3, #31
 800bb50:	d809      	bhi.n	800bb66 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800bb52:	4b62      	ldr	r3, [pc, #392]	@ (800bcdc <_SendPacket+0x1cc>)
 800bb54:	69da      	ldr	r2, [r3, #28]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	fa22 f303 	lsr.w	r3, r2, r3
 800bb5c:	f003 0301 	and.w	r3, r3, #1
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f040 8092 	bne.w	800bc8a <_SendPacket+0x17a>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b17      	cmp	r3, #23
 800bb6a:	d807      	bhi.n	800bb7c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	60fb      	str	r3, [r7, #12]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	b2da      	uxtb	r2, r3
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	701a      	strb	r2, [r3, #0]
 800bb7a:	e03d      	b.n	800bbf8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb88:	d912      	bls.n	800bbb0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	09da      	lsrs	r2, r3, #7
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3b01      	subs	r3, #1
 800bb92:	60fb      	str	r3, [r7, #12]
 800bb94:	b2d2      	uxtb	r2, r2
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	3a01      	subs	r2, #1
 800bba2:	60fa      	str	r2, [r7, #12]
 800bba4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bba8:	b2da      	uxtb	r2, r3
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	701a      	strb	r2, [r3, #0]
 800bbae:	e006      	b.n	800bbbe <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	60fb      	str	r3, [r7, #12]
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2b7f      	cmp	r3, #127	@ 0x7f
 800bbc2:	d912      	bls.n	800bbea <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	09da      	lsrs	r2, r3, #7
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	60fb      	str	r3, [r7, #12]
 800bbce:	b2d2      	uxtb	r2, r2
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	3a01      	subs	r2, #1
 800bbdc:	60fa      	str	r2, [r7, #12]
 800bbde:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bbe2:	b2da      	uxtb	r2, r3
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	701a      	strb	r2, [r3, #0]
 800bbe8:	e006      	b.n	800bbf8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	3b01      	subs	r3, #1
 800bbee:	60fb      	str	r3, [r7, #12]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800bbf8:	4b39      	ldr	r3, [pc, #228]	@ (800bce0 <_SendPacket+0x1d0>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	091b      	lsrs	r3, r3, #4
 800bbfe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800bc00:	4b36      	ldr	r3, [pc, #216]	@ (800bcdc <_SendPacket+0x1cc>)
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	69ba      	ldr	r2, [r7, #24]
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	011b      	lsls	r3, r3, #4
 800bc0e:	617b      	str	r3, [r7, #20]
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	091b      	lsrs	r3, r3, #4
 800bc14:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pEndPacket, Delta);
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	623b      	str	r3, [r7, #32]
 800bc1e:	e00b      	b.n	800bc38 <_SendPacket+0x128>
 800bc20:	6a3b      	ldr	r3, [r7, #32]
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc26:	1c59      	adds	r1, r3, #1
 800bc28:	6279      	str	r1, [r7, #36]	@ 0x24
 800bc2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bc2e:	b2d2      	uxtb	r2, r2
 800bc30:	701a      	strb	r2, [r3, #0]
 800bc32:	6a3b      	ldr	r3, [r7, #32]
 800bc34:	09db      	lsrs	r3, r3, #7
 800bc36:	623b      	str	r3, [r7, #32]
 800bc38:	6a3b      	ldr	r3, [r7, #32]
 800bc3a:	2b7f      	cmp	r3, #127	@ 0x7f
 800bc3c:	d8f0      	bhi.n	800bc20 <_SendPacket+0x110>
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc40:	1c5a      	adds	r2, r3, #1
 800bc42:	627a      	str	r2, [r7, #36]	@ 0x24
 800bc44:	6a3a      	ldr	r2, [r7, #32]
 800bc46:	b2d2      	uxtb	r2, r2
 800bc48:	701a      	strb	r2, [r3, #0]
 800bc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800bc4e:	4b23      	ldr	r3, [pc, #140]	@ (800bcdc <_SendPacket+0x1cc>)
 800bc50:	785b      	ldrb	r3, [r3, #1]
 800bc52:	4618      	mov	r0, r3
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	68f9      	ldr	r1, [r7, #12]
 800bc5e:	f7f4 fa77 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800bc62:	4603      	mov	r3, r0
 800bc64:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d003      	beq.n	800bc74 <_SendPacket+0x164>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800bc6c:	4a1b      	ldr	r2, [pc, #108]	@ (800bcdc <_SendPacket+0x1cc>)
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	60d3      	str	r3, [r2, #12]
 800bc72:	e00b      	b.n	800bc8c <_SendPacket+0x17c>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800bc74:	4b19      	ldr	r3, [pc, #100]	@ (800bcdc <_SendPacket+0x1cc>)
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	4b17      	ldr	r3, [pc, #92]	@ (800bcdc <_SendPacket+0x1cc>)
 800bc7e:	701a      	strb	r2, [r3, #0]
 800bc80:	e004      	b.n	800bc8c <_SendPacket+0x17c>
    goto SendDone;
 800bc82:	bf00      	nop
 800bc84:	e002      	b.n	800bc8c <_SendPacket+0x17c>
      goto SendDone;
 800bc86:	bf00      	nop
 800bc88:	e000      	b.n	800bc8c <_SendPacket+0x17c>
      goto SendDone;
 800bc8a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800bc8c:	4b13      	ldr	r3, [pc, #76]	@ (800bcdc <_SendPacket+0x1cc>)
 800bc8e:	7e1b      	ldrb	r3, [r3, #24]
 800bc90:	4619      	mov	r1, r3
 800bc92:	4a14      	ldr	r2, [pc, #80]	@ (800bce4 <_SendPacket+0x1d4>)
 800bc94:	460b      	mov	r3, r1
 800bc96:	005b      	lsls	r3, r3, #1
 800bc98:	440b      	add	r3, r1
 800bc9a:	00db      	lsls	r3, r3, #3
 800bc9c:	4413      	add	r3, r2
 800bc9e:	336c      	adds	r3, #108	@ 0x6c
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	4b0e      	ldr	r3, [pc, #56]	@ (800bcdc <_SendPacket+0x1cc>)
 800bca4:	7e1b      	ldrb	r3, [r3, #24]
 800bca6:	4618      	mov	r0, r3
 800bca8:	490e      	ldr	r1, [pc, #56]	@ (800bce4 <_SendPacket+0x1d4>)
 800bcaa:	4603      	mov	r3, r0
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	4403      	add	r3, r0
 800bcb0:	00db      	lsls	r3, r3, #3
 800bcb2:	440b      	add	r3, r1
 800bcb4:	3370      	adds	r3, #112	@ 0x70
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d00b      	beq.n	800bcd4 <_SendPacket+0x1c4>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800bcbc:	4b07      	ldr	r3, [pc, #28]	@ (800bcdc <_SendPacket+0x1cc>)
 800bcbe:	789b      	ldrb	r3, [r3, #2]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d107      	bne.n	800bcd4 <_SendPacket+0x1c4>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800bcc4:	4b05      	ldr	r3, [pc, #20]	@ (800bcdc <_SendPacket+0x1cc>)
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800bcca:	f7ff fe39 	bl	800b940 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800bcce:	4b03      	ldr	r3, [pc, #12]	@ (800bcdc <_SendPacket+0x1cc>)
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800bcd4:	bf00      	nop
 800bcd6:	3728      	adds	r7, #40	@ 0x28
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	20004428 	.word	0x20004428
 800bce0:	e0001004 	.word	0xe0001004
 800bce4:	20002f68 	.word	0x20002f68

0800bce8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b08a      	sub	sp, #40	@ 0x28
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	2b80      	cmp	r3, #128	@ 0x80
 800bd00:	d80a      	bhi.n	800bd18 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	1c59      	adds	r1, r3, #1
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	6051      	str	r1, [r2, #4]
 800bd0c:	78fa      	ldrb	r2, [r7, #3]
 800bd0e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	1c5a      	adds	r2, r3, #1
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	691b      	ldr	r3, [r3, #16]
 800bd1c:	2b80      	cmp	r3, #128	@ 0x80
 800bd1e:	d15a      	bne.n	800bdd6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	691a      	ldr	r2, [r3, #16]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	b2d2      	uxtb	r2, r2
 800bd2a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	623b      	str	r3, [r7, #32]
 800bd40:	e00b      	b.n	800bd5a <_StoreChar+0x72>
 800bd42:	6a3b      	ldr	r3, [r7, #32]
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd48:	1c59      	adds	r1, r3, #1
 800bd4a:	6279      	str	r1, [r7, #36]	@ 0x24
 800bd4c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bd50:	b2d2      	uxtb	r2, r2
 800bd52:	701a      	strb	r2, [r3, #0]
 800bd54:	6a3b      	ldr	r3, [r7, #32]
 800bd56:	09db      	lsrs	r3, r3, #7
 800bd58:	623b      	str	r3, [r7, #32]
 800bd5a:	6a3b      	ldr	r3, [r7, #32]
 800bd5c:	2b7f      	cmp	r3, #127	@ 0x7f
 800bd5e:	d8f0      	bhi.n	800bd42 <_StoreChar+0x5a>
 800bd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd62:	1c5a      	adds	r2, r3, #1
 800bd64:	627a      	str	r2, [r7, #36]	@ 0x24
 800bd66:	6a3a      	ldr	r2, [r7, #32]
 800bd68:	b2d2      	uxtb	r2, r2
 800bd6a:	701a      	strb	r2, [r3, #0]
 800bd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	61fb      	str	r3, [r7, #28]
 800bd74:	2300      	movs	r3, #0
 800bd76:	61bb      	str	r3, [r7, #24]
 800bd78:	e00b      	b.n	800bd92 <_StoreChar+0xaa>
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	b2da      	uxtb	r2, r3
 800bd7e:	69fb      	ldr	r3, [r7, #28]
 800bd80:	1c59      	adds	r1, r3, #1
 800bd82:	61f9      	str	r1, [r7, #28]
 800bd84:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bd88:	b2d2      	uxtb	r2, r2
 800bd8a:	701a      	strb	r2, [r3, #0]
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	09db      	lsrs	r3, r3, #7
 800bd90:	61bb      	str	r3, [r7, #24]
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	2b7f      	cmp	r3, #127	@ 0x7f
 800bd96:	d8f0      	bhi.n	800bd7a <_StoreChar+0x92>
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	61fa      	str	r2, [r7, #28]
 800bd9e:	69ba      	ldr	r2, [r7, #24]
 800bda0:	b2d2      	uxtb	r2, r2
 800bda2:	701a      	strb	r2, [r3, #0]
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	221a      	movs	r2, #26
 800bdae:	6939      	ldr	r1, [r7, #16]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7ff fead 	bl	800bb10 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7ff fdb4 	bl	800b928 <_PreparePacket>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	1c5a      	adds	r2, r3, #1
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	611a      	str	r2, [r3, #16]
  }
}
 800bdd6:	bf00      	nop
 800bdd8:	3728      	adds	r7, #40	@ 0x28
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
	...

0800bde0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b08a      	sub	sp, #40	@ 0x28
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]
 800bdec:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800bdfa:	e007      	b.n	800be0c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800bdfc:	6a3a      	ldr	r2, [r7, #32]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	fbb2 f3f3 	udiv	r3, r2, r3
 800be04:	623b      	str	r3, [r7, #32]
    Width++;
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	3301      	adds	r3, #1
 800be0a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800be0c:	6a3a      	ldr	r2, [r7, #32]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	429a      	cmp	r2, r3
 800be12:	d2f3      	bcs.n	800bdfc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d901      	bls.n	800be20 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800be20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be22:	f003 0301 	and.w	r3, r3, #1
 800be26:	2b00      	cmp	r3, #0
 800be28:	d000      	beq.n	800be2c <_PrintUnsigned+0x4c>
 800be2a:	e01f      	b.n	800be6c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 800be2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d01c      	beq.n	800be6c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800be32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be34:	f003 0302 	and.w	r3, r3, #2
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d005      	beq.n	800be48 <_PrintUnsigned+0x68>
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d102      	bne.n	800be48 <_PrintUnsigned+0x68>
        c = '0';
 800be42:	2330      	movs	r3, #48	@ 0x30
 800be44:	76fb      	strb	r3, [r7, #27]
 800be46:	e001      	b.n	800be4c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 800be48:	2320      	movs	r3, #32
 800be4a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800be4c:	e007      	b.n	800be5e <_PrintUnsigned+0x7e>
        FieldWidth--;
 800be4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be50:	3b01      	subs	r3, #1
 800be52:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800be54:	7efb      	ldrb	r3, [r7, #27]
 800be56:	4619      	mov	r1, r3
 800be58:	68f8      	ldr	r0, [r7, #12]
 800be5a:	f7ff ff45 	bl	800bce8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800be5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be60:	2b00      	cmp	r3, #0
 800be62:	d003      	beq.n	800be6c <_PrintUnsigned+0x8c>
 800be64:	69fa      	ldr	r2, [r7, #28]
 800be66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be68:	429a      	cmp	r2, r3
 800be6a:	d3f0      	bcc.n	800be4e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d903      	bls.n	800be7a <_PrintUnsigned+0x9a>
      NumDigits--;
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	3b01      	subs	r3, #1
 800be76:	603b      	str	r3, [r7, #0]
 800be78:	e009      	b.n	800be8e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800be7a:	68ba      	ldr	r2, [r7, #8]
 800be7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be82:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800be84:	697a      	ldr	r2, [r7, #20]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d200      	bcs.n	800be8e <_PrintUnsigned+0xae>
        break;
 800be8c:	e005      	b.n	800be9a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800be8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	fb02 f303 	mul.w	r3, r2, r3
 800be96:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800be98:	e7e8      	b.n	800be6c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bea2:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bea8:	fb02 f303 	mul.w	r3, r2, r3
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800beb2:	4a15      	ldr	r2, [pc, #84]	@ (800bf08 <_PrintUnsigned+0x128>)
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	4413      	add	r3, r2
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	4619      	mov	r1, r3
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f7ff ff13 	bl	800bce8 <_StoreChar>
    Digit /= Base;
 800bec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	fbb2 f3f3 	udiv	r3, r2, r3
 800beca:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 800becc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d1e3      	bne.n	800be9a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800bed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bed4:	f003 0301 	and.w	r3, r3, #1
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d011      	beq.n	800bf00 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 800bedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00e      	beq.n	800bf00 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bee2:	e006      	b.n	800bef2 <_PrintUnsigned+0x112>
        FieldWidth--;
 800bee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee6:	3b01      	subs	r3, #1
 800bee8:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 800beea:	2120      	movs	r1, #32
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f7ff fefb 	bl	800bce8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d003      	beq.n	800bf00 <_PrintUnsigned+0x120>
 800bef8:	69fa      	ldr	r2, [r7, #28]
 800befa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800befc:	429a      	cmp	r2, r3
 800befe:	d3f1      	bcc.n	800bee4 <_PrintUnsigned+0x104>
      }
    }
  }
}
 800bf00:	bf00      	nop
 800bf02:	3728      	adds	r7, #40	@ 0x28
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	08010324 	.word	0x08010324

0800bf0c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b088      	sub	sp, #32
 800bf10:	af02      	add	r7, sp, #8
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
 800bf18:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	bfb8      	it	lt
 800bf20:	425b      	neglt	r3, r3
 800bf22:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800bf24:	2301      	movs	r3, #1
 800bf26:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800bf28:	e007      	b.n	800bf3a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	693a      	ldr	r2, [r7, #16]
 800bf2e:	fb92 f3f3 	sdiv	r3, r2, r3
 800bf32:	613b      	str	r3, [r7, #16]
    Width++;
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	3301      	adds	r3, #1
 800bf38:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	693a      	ldr	r2, [r7, #16]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	daf3      	bge.n	800bf2a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800bf42:	683a      	ldr	r2, [r7, #0]
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d901      	bls.n	800bf4e <_PrintInt+0x42>
    Width = NumDigits;
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800bf4e:	6a3b      	ldr	r3, [r7, #32]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00a      	beq.n	800bf6a <_PrintInt+0x5e>
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	db04      	blt.n	800bf64 <_PrintInt+0x58>
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf5c:	f003 0304 	and.w	r3, r3, #4
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <_PrintInt+0x5e>
    FieldWidth--;
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	3b01      	subs	r3, #1
 800bf68:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6c:	f003 0302 	and.w	r3, r3, #2
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d002      	beq.n	800bf7a <_PrintInt+0x6e>
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d016      	beq.n	800bfa8 <_PrintInt+0x9c>
 800bf7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf7c:	f003 0301 	and.w	r3, r3, #1
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d111      	bne.n	800bfa8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800bf84:	6a3b      	ldr	r3, [r7, #32]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00e      	beq.n	800bfa8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bf8a:	e006      	b.n	800bf9a <_PrintInt+0x8e>
        FieldWidth--;
 800bf8c:	6a3b      	ldr	r3, [r7, #32]
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800bf92:	2120      	movs	r1, #32
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f7ff fea7 	bl	800bce8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bf9a:	6a3b      	ldr	r3, [r7, #32]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d003      	beq.n	800bfa8 <_PrintInt+0x9c>
 800bfa0:	697a      	ldr	r2, [r7, #20]
 800bfa2:	6a3b      	ldr	r3, [r7, #32]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d3f1      	bcc.n	800bf8c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	da07      	bge.n	800bfbe <_PrintInt+0xb2>
    v = -v;
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	425b      	negs	r3, r3
 800bfb2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800bfb4:	212d      	movs	r1, #45	@ 0x2d
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f7ff fe96 	bl	800bce8 <_StoreChar>
 800bfbc:	e008      	b.n	800bfd0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc0:	f003 0304 	and.w	r3, r3, #4
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d003      	beq.n	800bfd0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800bfc8:	212b      	movs	r1, #43	@ 0x2b
 800bfca:	68f8      	ldr	r0, [r7, #12]
 800bfcc:	f7ff fe8c 	bl	800bce8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd2:	f003 0302 	and.w	r3, r3, #2
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d019      	beq.n	800c00e <_PrintInt+0x102>
 800bfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfdc:	f003 0301 	and.w	r3, r3, #1
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d114      	bne.n	800c00e <_PrintInt+0x102>
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d111      	bne.n	800c00e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00e      	beq.n	800c00e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bff0:	e006      	b.n	800c000 <_PrintInt+0xf4>
        FieldWidth--;
 800bff2:	6a3b      	ldr	r3, [r7, #32]
 800bff4:	3b01      	subs	r3, #1
 800bff6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800bff8:	2130      	movs	r1, #48	@ 0x30
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f7ff fe74 	bl	800bce8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800c000:	6a3b      	ldr	r3, [r7, #32]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d003      	beq.n	800c00e <_PrintInt+0x102>
 800c006:	697a      	ldr	r2, [r7, #20]
 800c008:	6a3b      	ldr	r3, [r7, #32]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d3f1      	bcc.n	800bff2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800c00e:	68b9      	ldr	r1, [r7, #8]
 800c010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c012:	9301      	str	r3, [sp, #4]
 800c014:	6a3b      	ldr	r3, [r7, #32]
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f7ff fedf 	bl	800bde0 <_PrintUnsigned>
}
 800c022:	bf00      	nop
 800c024:	3718      	adds	r7, #24
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
	...

0800c02c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b098      	sub	sp, #96	@ 0x60
 800c030:	af02      	add	r7, sp, #8
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c038:	f3ef 8311 	mrs	r3, BASEPRI
 800c03c:	f04f 0120 	mov.w	r1, #32
 800c040:	f381 8811 	msr	BASEPRI, r1
 800c044:	633b      	str	r3, [r7, #48]	@ 0x30
 800c046:	48b7      	ldr	r0, [pc, #732]	@ (800c324 <_VPrintTarget+0x2f8>)
 800c048:	f7ff fc6e 	bl	800b928 <_PreparePacket>
 800c04c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800c04e:	4bb5      	ldr	r3, [pc, #724]	@ (800c324 <_VPrintTarget+0x2f8>)
 800c050:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800c052:	2300      	movs	r3, #0
 800c054:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800c056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c058:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	3301      	adds	r3, #1
 800c05e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	3301      	adds	r3, #1
 800c070:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800c072:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c076:	2b00      	cmp	r3, #0
 800c078:	f000 8183 	beq.w	800c382 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800c07c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c080:	2b25      	cmp	r3, #37	@ 0x25
 800c082:	f040 8170 	bne.w	800c366 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800c086:	2300      	movs	r3, #0
 800c088:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800c08a:	2301      	movs	r3, #1
 800c08c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 800c096:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c09a:	3b23      	subs	r3, #35	@ 0x23
 800c09c:	2b0d      	cmp	r3, #13
 800c09e:	d83f      	bhi.n	800c120 <_VPrintTarget+0xf4>
 800c0a0:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a8 <_VPrintTarget+0x7c>)
 800c0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a6:	bf00      	nop
 800c0a8:	0800c111 	.word	0x0800c111
 800c0ac:	0800c121 	.word	0x0800c121
 800c0b0:	0800c121 	.word	0x0800c121
 800c0b4:	0800c121 	.word	0x0800c121
 800c0b8:	0800c121 	.word	0x0800c121
 800c0bc:	0800c121 	.word	0x0800c121
 800c0c0:	0800c121 	.word	0x0800c121
 800c0c4:	0800c121 	.word	0x0800c121
 800c0c8:	0800c101 	.word	0x0800c101
 800c0cc:	0800c121 	.word	0x0800c121
 800c0d0:	0800c0e1 	.word	0x0800c0e1
 800c0d4:	0800c121 	.word	0x0800c121
 800c0d8:	0800c121 	.word	0x0800c121
 800c0dc:	0800c0f1 	.word	0x0800c0f1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800c0e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0e2:	f043 0301 	orr.w	r3, r3, #1
 800c0e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	60fb      	str	r3, [r7, #12]
 800c0ee:	e01a      	b.n	800c126 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800c0f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0f2:	f043 0302 	orr.w	r3, r3, #2
 800c0f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	60fb      	str	r3, [r7, #12]
 800c0fe:	e012      	b.n	800c126 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800c100:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c102:	f043 0304 	orr.w	r3, r3, #4
 800c106:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	3301      	adds	r3, #1
 800c10c:	60fb      	str	r3, [r7, #12]
 800c10e:	e00a      	b.n	800c126 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800c110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c112:	f043 0308 	orr.w	r3, r3, #8
 800c116:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	3301      	adds	r3, #1
 800c11c:	60fb      	str	r3, [r7, #12]
 800c11e:	e002      	b.n	800c126 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800c120:	2300      	movs	r3, #0
 800c122:	653b      	str	r3, [r7, #80]	@ 0x50
 800c124:	bf00      	nop
        }
      } while (v);
 800c126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1b0      	bne.n	800c08e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800c12c:	2300      	movs	r3, #0
 800c12e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 800c138:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c13c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c13e:	d912      	bls.n	800c166 <_VPrintTarget+0x13a>
 800c140:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c144:	2b39      	cmp	r3, #57	@ 0x39
 800c146:	d80e      	bhi.n	800c166 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	3301      	adds	r3, #1
 800c14c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800c14e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c150:	4613      	mov	r3, r2
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	005b      	lsls	r3, r3, #1
 800c158:	461a      	mov	r2, r3
 800c15a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c15e:	4413      	add	r3, r2
 800c160:	3b30      	subs	r3, #48	@ 0x30
 800c162:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 800c164:	e7e4      	b.n	800c130 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800c166:	2300      	movs	r3, #0
 800c168:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 800c172:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c176:	2b2e      	cmp	r3, #46	@ 0x2e
 800c178:	d11d      	bne.n	800c1b6 <_VPrintTarget+0x18a>
        sFormat++;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3301      	adds	r3, #1
 800c17e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 800c188:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c18c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c18e:	d912      	bls.n	800c1b6 <_VPrintTarget+0x18a>
 800c190:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c194:	2b39      	cmp	r3, #57	@ 0x39
 800c196:	d80e      	bhi.n	800c1b6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	3301      	adds	r3, #1
 800c19c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800c19e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4413      	add	r3, r2
 800c1a6:	005b      	lsls	r3, r3, #1
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c1ae:	4413      	add	r3, r2
 800c1b0:	3b30      	subs	r3, #48	@ 0x30
 800c1b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 800c1b4:	e7e4      	b.n	800c180 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800c1be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c1c2:	2b6c      	cmp	r3, #108	@ 0x6c
 800c1c4:	d003      	beq.n	800c1ce <_VPrintTarget+0x1a2>
 800c1c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c1ca:	2b68      	cmp	r3, #104	@ 0x68
 800c1cc:	d107      	bne.n	800c1de <_VPrintTarget+0x1b2>
          c = *sFormat;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800c1dc:	e7ef      	b.n	800c1be <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800c1de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c1e2:	2b25      	cmp	r3, #37	@ 0x25
 800c1e4:	f000 80b3 	beq.w	800c34e <_VPrintTarget+0x322>
 800c1e8:	2b25      	cmp	r3, #37	@ 0x25
 800c1ea:	f2c0 80b7 	blt.w	800c35c <_VPrintTarget+0x330>
 800c1ee:	2b78      	cmp	r3, #120	@ 0x78
 800c1f0:	f300 80b4 	bgt.w	800c35c <_VPrintTarget+0x330>
 800c1f4:	2b58      	cmp	r3, #88	@ 0x58
 800c1f6:	f2c0 80b1 	blt.w	800c35c <_VPrintTarget+0x330>
 800c1fa:	3b58      	subs	r3, #88	@ 0x58
 800c1fc:	2b20      	cmp	r3, #32
 800c1fe:	f200 80ad 	bhi.w	800c35c <_VPrintTarget+0x330>
 800c202:	a201      	add	r2, pc, #4	@ (adr r2, 800c208 <_VPrintTarget+0x1dc>)
 800c204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c208:	0800c2ff 	.word	0x0800c2ff
 800c20c:	0800c35d 	.word	0x0800c35d
 800c210:	0800c35d 	.word	0x0800c35d
 800c214:	0800c35d 	.word	0x0800c35d
 800c218:	0800c35d 	.word	0x0800c35d
 800c21c:	0800c35d 	.word	0x0800c35d
 800c220:	0800c35d 	.word	0x0800c35d
 800c224:	0800c35d 	.word	0x0800c35d
 800c228:	0800c35d 	.word	0x0800c35d
 800c22c:	0800c35d 	.word	0x0800c35d
 800c230:	0800c35d 	.word	0x0800c35d
 800c234:	0800c28d 	.word	0x0800c28d
 800c238:	0800c2b3 	.word	0x0800c2b3
 800c23c:	0800c35d 	.word	0x0800c35d
 800c240:	0800c35d 	.word	0x0800c35d
 800c244:	0800c35d 	.word	0x0800c35d
 800c248:	0800c35d 	.word	0x0800c35d
 800c24c:	0800c35d 	.word	0x0800c35d
 800c250:	0800c35d 	.word	0x0800c35d
 800c254:	0800c35d 	.word	0x0800c35d
 800c258:	0800c35d 	.word	0x0800c35d
 800c25c:	0800c35d 	.word	0x0800c35d
 800c260:	0800c35d 	.word	0x0800c35d
 800c264:	0800c35d 	.word	0x0800c35d
 800c268:	0800c329 	.word	0x0800c329
 800c26c:	0800c35d 	.word	0x0800c35d
 800c270:	0800c35d 	.word	0x0800c35d
 800c274:	0800c35d 	.word	0x0800c35d
 800c278:	0800c35d 	.word	0x0800c35d
 800c27c:	0800c2d9 	.word	0x0800c2d9
 800c280:	0800c35d 	.word	0x0800c35d
 800c284:	0800c35d 	.word	0x0800c35d
 800c288:	0800c2ff 	.word	0x0800c2ff
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	1d19      	adds	r1, r3, #4
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	6011      	str	r1, [r2, #0]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800c29a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c29c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 800c2a0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800c2a4:	f107 0314 	add.w	r3, r7, #20
 800c2a8:	4611      	mov	r1, r2
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7ff fd1c 	bl	800bce8 <_StoreChar>
        break;
 800c2b0:	e055      	b.n	800c35e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	1d19      	adds	r1, r3, #4
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	6011      	str	r1, [r2, #0]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800c2c0:	f107 0014 	add.w	r0, r7, #20
 800c2c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2ce:	220a      	movs	r2, #10
 800c2d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c2d2:	f7ff fe1b 	bl	800bf0c <_PrintInt>
        break;
 800c2d6:	e042      	b.n	800c35e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	1d19      	adds	r1, r3, #4
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	6011      	str	r1, [r2, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800c2e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c2e8:	f107 0014 	add.w	r0, r7, #20
 800c2ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2ee:	9301      	str	r3, [sp, #4]
 800c2f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2f2:	9300      	str	r3, [sp, #0]
 800c2f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2f6:	220a      	movs	r2, #10
 800c2f8:	f7ff fd72 	bl	800bde0 <_PrintUnsigned>
        break;
 800c2fc:	e02f      	b.n	800c35e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	1d19      	adds	r1, r3, #4
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	6011      	str	r1, [r2, #0]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800c30c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c30e:	f107 0014 	add.w	r0, r7, #20
 800c312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c314:	9301      	str	r3, [sp, #4]
 800c316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c31c:	2210      	movs	r2, #16
 800c31e:	f7ff fd5f 	bl	800bde0 <_PrintUnsigned>
        break;
 800c322:	e01c      	b.n	800c35e <_VPrintTarget+0x332>
 800c324:	20004458 	.word	0x20004458
      case 'p':
        v = va_arg(*pParamList, int);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	1d19      	adds	r1, r3, #4
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	6011      	str	r1, [r2, #0]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800c336:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c338:	f107 0014 	add.w	r0, r7, #20
 800c33c:	2300      	movs	r3, #0
 800c33e:	9301      	str	r3, [sp, #4]
 800c340:	2308      	movs	r3, #8
 800c342:	9300      	str	r3, [sp, #0]
 800c344:	2308      	movs	r3, #8
 800c346:	2210      	movs	r2, #16
 800c348:	f7ff fd4a 	bl	800bde0 <_PrintUnsigned>
        break;
 800c34c:	e007      	b.n	800c35e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800c34e:	f107 0314 	add.w	r3, r7, #20
 800c352:	2125      	movs	r1, #37	@ 0x25
 800c354:	4618      	mov	r0, r3
 800c356:	f7ff fcc7 	bl	800bce8 <_StoreChar>
        break;
 800c35a:	e000      	b.n	800c35e <_VPrintTarget+0x332>
      default:
        break;
 800c35c:	bf00      	nop
      }
      sFormat++;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3301      	adds	r3, #1
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	e007      	b.n	800c376 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800c366:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c36a:	f107 0314 	add.w	r3, r7, #20
 800c36e:	4611      	mov	r1, r2
 800c370:	4618      	mov	r0, r3
 800c372:	f7ff fcb9 	bl	800bce8 <_StoreChar>
    }
  } while (*sFormat);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f47f ae72 	bne.w	800c064 <_VPrintTarget+0x38>
 800c380:	e000      	b.n	800c384 <_VPrintTarget+0x358>
      break;
 800c382:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800c384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c386:	2b00      	cmp	r3, #0
 800c388:	d041      	beq.n	800c40e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800c38a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	b2d2      	uxtb	r2, r2
 800c390:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	643b      	str	r3, [r7, #64]	@ 0x40
 800c396:	6a3b      	ldr	r3, [r7, #32]
 800c398:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c39a:	e00b      	b.n	800c3b4 <_VPrintTarget+0x388>
 800c39c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c39e:	b2da      	uxtb	r2, r3
 800c3a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3a2:	1c59      	adds	r1, r3, #1
 800c3a4:	6439      	str	r1, [r7, #64]	@ 0x40
 800c3a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c3aa:	b2d2      	uxtb	r2, r2
 800c3ac:	701a      	strb	r2, [r3, #0]
 800c3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3b0:	09db      	lsrs	r3, r3, #7
 800c3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3b6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3b8:	d8f0      	bhi.n	800c39c <_VPrintTarget+0x370>
 800c3ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3bc:	1c5a      	adds	r2, r3, #1
 800c3be:	643a      	str	r2, [r7, #64]	@ 0x40
 800c3c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c3c2:	b2d2      	uxtb	r2, r2
 800c3c4:	701a      	strb	r2, [r3, #0]
 800c3c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3c8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3d2:	e00b      	b.n	800c3ec <_VPrintTarget+0x3c0>
 800c3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3d6:	b2da      	uxtb	r2, r3
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3da:	1c59      	adds	r1, r3, #1
 800c3dc:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c3de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c3e2:	b2d2      	uxtb	r2, r2
 800c3e4:	701a      	strb	r2, [r3, #0]
 800c3e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3e8:	09db      	lsrs	r3, r3, #7
 800c3ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3f0:	d8f0      	bhi.n	800c3d4 <_VPrintTarget+0x3a8>
 800c3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3f4:	1c5a      	adds	r2, r3, #1
 800c3f6:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c3f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c3fa:	b2d2      	uxtb	r2, r2
 800c3fc:	701a      	strb	r2, [r3, #0]
 800c3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c400:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	69b9      	ldr	r1, [r7, #24]
 800c406:	221a      	movs	r2, #26
 800c408:	4618      	mov	r0, r3
 800c40a:	f7ff fb81 	bl	800bb10 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800c40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c410:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800c414:	bf00      	nop
 800c416:	3758      	adds	r7, #88	@ 0x58
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b086      	sub	sp, #24
 800c420:	af02      	add	r7, sp, #8
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
 800c428:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c42a:	2300      	movs	r3, #0
 800c42c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c430:	4918      	ldr	r1, [pc, #96]	@ (800c494 <SEGGER_SYSVIEW_Init+0x78>)
 800c432:	4819      	ldr	r0, [pc, #100]	@ (800c498 <SEGGER_SYSVIEW_Init+0x7c>)
 800c434:	f7ff f93c 	bl	800b6b0 <SEGGER_RTT_AllocUpBuffer>
 800c438:	4603      	mov	r3, r0
 800c43a:	b2da      	uxtb	r2, r3
 800c43c:	4b17      	ldr	r3, [pc, #92]	@ (800c49c <SEGGER_SYSVIEW_Init+0x80>)
 800c43e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800c440:	4b16      	ldr	r3, [pc, #88]	@ (800c49c <SEGGER_SYSVIEW_Init+0x80>)
 800c442:	785a      	ldrb	r2, [r3, #1]
 800c444:	4b15      	ldr	r3, [pc, #84]	@ (800c49c <SEGGER_SYSVIEW_Init+0x80>)
 800c446:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c448:	4b14      	ldr	r3, [pc, #80]	@ (800c49c <SEGGER_SYSVIEW_Init+0x80>)
 800c44a:	7e1b      	ldrb	r3, [r3, #24]
 800c44c:	4618      	mov	r0, r3
 800c44e:	2300      	movs	r3, #0
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	2308      	movs	r3, #8
 800c454:	4a12      	ldr	r2, [pc, #72]	@ (800c4a0 <SEGGER_SYSVIEW_Init+0x84>)
 800c456:	4910      	ldr	r1, [pc, #64]	@ (800c498 <SEGGER_SYSVIEW_Init+0x7c>)
 800c458:	f7ff f9ac 	bl	800b7b4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800c45c:	4b0f      	ldr	r3, [pc, #60]	@ (800c49c <SEGGER_SYSVIEW_Init+0x80>)
 800c45e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800c462:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c464:	4b0f      	ldr	r3, [pc, #60]	@ (800c4a4 <SEGGER_SYSVIEW_Init+0x88>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	091b      	lsrs	r3, r3, #4
 800c46a:	4a0c      	ldr	r2, [pc, #48]	@ (800c49c <SEGGER_SYSVIEW_Init+0x80>)
 800c46c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800c46e:	4a0b      	ldr	r2, [pc, #44]	@ (800c49c <SEGGER_SYSVIEW_Init+0x80>)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800c474:	4a09      	ldr	r2, [pc, #36]	@ (800c49c <SEGGER_SYSVIEW_Init+0x80>)
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800c47a:	4a08      	ldr	r2, [pc, #32]	@ (800c49c <SEGGER_SYSVIEW_Init+0x80>)
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800c480:	4a06      	ldr	r2, [pc, #24]	@ (800c49c <SEGGER_SYSVIEW_Init+0x80>)
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800c486:	4b05      	ldr	r3, [pc, #20]	@ (800c49c <SEGGER_SYSVIEW_Init+0x80>)
 800c488:	2200      	movs	r2, #0
 800c48a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800c48c:	bf00      	nop
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	20003420 	.word	0x20003420
 800c498:	08010238 	.word	0x08010238
 800c49c:	20004428 	.word	0x20004428
 800c4a0:	20004420 	.word	0x20004420
 800c4a4:	e0001004 	.word	0xe0001004

0800c4a8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800c4b0:	4a03      	ldr	r2, [pc, #12]	@ (800c4c0 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6113      	str	r3, [r2, #16]
}
 800c4b6:	bf00      	nop
 800c4b8:	370c      	adds	r7, #12
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bc80      	pop	{r7}
 800c4be:	4770      	bx	lr
 800c4c0:	20004428 	.word	0x20004428

0800c4c4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c4cc:	f3ef 8311 	mrs	r3, BASEPRI
 800c4d0:	f04f 0120 	mov.w	r1, #32
 800c4d4:	f381 8811 	msr	BASEPRI, r1
 800c4d8:	60fb      	str	r3, [r7, #12]
 800c4da:	4808      	ldr	r0, [pc, #32]	@ (800c4fc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800c4dc:	f7ff fa24 	bl	800b928 <_PreparePacket>
 800c4e0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	68b9      	ldr	r1, [r7, #8]
 800c4e6:	68b8      	ldr	r0, [r7, #8]
 800c4e8:	f7ff fb12 	bl	800bb10 <_SendPacket>
  RECORD_END();
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f383 8811 	msr	BASEPRI, r3
}
 800c4f2:	bf00      	nop
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	20004458 	.word	0x20004458

0800c500 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800c500:	b580      	push	{r7, lr}
 800c502:	b088      	sub	sp, #32
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c50a:	f3ef 8311 	mrs	r3, BASEPRI
 800c50e:	f04f 0120 	mov.w	r1, #32
 800c512:	f381 8811 	msr	BASEPRI, r1
 800c516:	617b      	str	r3, [r7, #20]
 800c518:	4816      	ldr	r0, [pc, #88]	@ (800c574 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800c51a:	f7ff fa05 	bl	800b928 <_PreparePacket>
 800c51e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	61fb      	str	r3, [r7, #28]
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	61bb      	str	r3, [r7, #24]
 800c52c:	e00b      	b.n	800c546 <SEGGER_SYSVIEW_RecordU32+0x46>
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	b2da      	uxtb	r2, r3
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	1c59      	adds	r1, r3, #1
 800c536:	61f9      	str	r1, [r7, #28]
 800c538:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c53c:	b2d2      	uxtb	r2, r2
 800c53e:	701a      	strb	r2, [r3, #0]
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	09db      	lsrs	r3, r3, #7
 800c544:	61bb      	str	r3, [r7, #24]
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	2b7f      	cmp	r3, #127	@ 0x7f
 800c54a:	d8f0      	bhi.n	800c52e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	1c5a      	adds	r2, r3, #1
 800c550:	61fa      	str	r2, [r7, #28]
 800c552:	69ba      	ldr	r2, [r7, #24]
 800c554:	b2d2      	uxtb	r2, r2
 800c556:	701a      	strb	r2, [r3, #0]
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	68f9      	ldr	r1, [r7, #12]
 800c560:	6938      	ldr	r0, [r7, #16]
 800c562:	f7ff fad5 	bl	800bb10 <_SendPacket>
  RECORD_END();
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	f383 8811 	msr	BASEPRI, r3
}
 800c56c:	bf00      	nop
 800c56e:	3720      	adds	r7, #32
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	20004458 	.word	0x20004458

0800c578 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800c578:	b580      	push	{r7, lr}
 800c57a:	b08c      	sub	sp, #48	@ 0x30
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c584:	f3ef 8311 	mrs	r3, BASEPRI
 800c588:	f04f 0120 	mov.w	r1, #32
 800c58c:	f381 8811 	msr	BASEPRI, r1
 800c590:	61fb      	str	r3, [r7, #28]
 800c592:	4825      	ldr	r0, [pc, #148]	@ (800c628 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800c594:	f7ff f9c8 	bl	800b928 <_PreparePacket>
 800c598:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c5a6:	e00b      	b.n	800c5c0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800c5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5aa:	b2da      	uxtb	r2, r3
 800c5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ae:	1c59      	adds	r1, r3, #1
 800c5b0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c5b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c5b6:	b2d2      	uxtb	r2, r2
 800c5b8:	701a      	strb	r2, [r3, #0]
 800c5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5bc:	09db      	lsrs	r3, r3, #7
 800c5be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5c4:	d8f0      	bhi.n	800c5a8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800c5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c8:	1c5a      	adds	r2, r3, #1
 800c5ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c5cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5ce:	b2d2      	uxtb	r2, r2
 800c5d0:	701a      	strb	r2, [r3, #0]
 800c5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5d4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	623b      	str	r3, [r7, #32]
 800c5de:	e00b      	b.n	800c5f8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800c5e0:	6a3b      	ldr	r3, [r7, #32]
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e6:	1c59      	adds	r1, r3, #1
 800c5e8:	6279      	str	r1, [r7, #36]	@ 0x24
 800c5ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c5ee:	b2d2      	uxtb	r2, r2
 800c5f0:	701a      	strb	r2, [r3, #0]
 800c5f2:	6a3b      	ldr	r3, [r7, #32]
 800c5f4:	09db      	lsrs	r3, r3, #7
 800c5f6:	623b      	str	r3, [r7, #32]
 800c5f8:	6a3b      	ldr	r3, [r7, #32]
 800c5fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5fc:	d8f0      	bhi.n	800c5e0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c600:	1c5a      	adds	r2, r3, #1
 800c602:	627a      	str	r2, [r7, #36]	@ 0x24
 800c604:	6a3a      	ldr	r2, [r7, #32]
 800c606:	b2d2      	uxtb	r2, r2
 800c608:	701a      	strb	r2, [r3, #0]
 800c60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c60e:	68fa      	ldr	r2, [r7, #12]
 800c610:	6979      	ldr	r1, [r7, #20]
 800c612:	69b8      	ldr	r0, [r7, #24]
 800c614:	f7ff fa7c 	bl	800bb10 <_SendPacket>
  RECORD_END();
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	f383 8811 	msr	BASEPRI, r3
}
 800c61e:	bf00      	nop
 800c620:	3730      	adds	r7, #48	@ 0x30
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	20004458 	.word	0x20004458

0800c62c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b08e      	sub	sp, #56	@ 0x38
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
 800c638:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800c63a:	f3ef 8311 	mrs	r3, BASEPRI
 800c63e:	f04f 0120 	mov.w	r1, #32
 800c642:	f381 8811 	msr	BASEPRI, r1
 800c646:	61fb      	str	r3, [r7, #28]
 800c648:	4832      	ldr	r0, [pc, #200]	@ (800c714 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800c64a:	f7ff f96d 	bl	800b928 <_PreparePacket>
 800c64e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	637b      	str	r3, [r7, #52]	@ 0x34
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c65c:	e00b      	b.n	800c676 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800c65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c660:	b2da      	uxtb	r2, r3
 800c662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c664:	1c59      	adds	r1, r3, #1
 800c666:	6379      	str	r1, [r7, #52]	@ 0x34
 800c668:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c66c:	b2d2      	uxtb	r2, r2
 800c66e:	701a      	strb	r2, [r3, #0]
 800c670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c672:	09db      	lsrs	r3, r3, #7
 800c674:	633b      	str	r3, [r7, #48]	@ 0x30
 800c676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c678:	2b7f      	cmp	r3, #127	@ 0x7f
 800c67a:	d8f0      	bhi.n	800c65e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800c67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c67e:	1c5a      	adds	r2, r3, #1
 800c680:	637a      	str	r2, [r7, #52]	@ 0x34
 800c682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c684:	b2d2      	uxtb	r2, r2
 800c686:	701a      	strb	r2, [r3, #0]
 800c688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c68a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c694:	e00b      	b.n	800c6ae <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800c696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c698:	b2da      	uxtb	r2, r3
 800c69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c69c:	1c59      	adds	r1, r3, #1
 800c69e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c6a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c6a4:	b2d2      	uxtb	r2, r2
 800c6a6:	701a      	strb	r2, [r3, #0]
 800c6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6aa:	09db      	lsrs	r3, r3, #7
 800c6ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6b2:	d8f0      	bhi.n	800c696 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800c6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b6:	1c5a      	adds	r2, r3, #1
 800c6b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c6ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6bc:	b2d2      	uxtb	r2, r2
 800c6be:	701a      	strb	r2, [r3, #0]
 800c6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	623b      	str	r3, [r7, #32]
 800c6cc:	e00b      	b.n	800c6e6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800c6ce:	6a3b      	ldr	r3, [r7, #32]
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d4:	1c59      	adds	r1, r3, #1
 800c6d6:	6279      	str	r1, [r7, #36]	@ 0x24
 800c6d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c6dc:	b2d2      	uxtb	r2, r2
 800c6de:	701a      	strb	r2, [r3, #0]
 800c6e0:	6a3b      	ldr	r3, [r7, #32]
 800c6e2:	09db      	lsrs	r3, r3, #7
 800c6e4:	623b      	str	r3, [r7, #32]
 800c6e6:	6a3b      	ldr	r3, [r7, #32]
 800c6e8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6ea:	d8f0      	bhi.n	800c6ce <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ee:	1c5a      	adds	r2, r3, #1
 800c6f0:	627a      	str	r2, [r7, #36]	@ 0x24
 800c6f2:	6a3a      	ldr	r2, [r7, #32]
 800c6f4:	b2d2      	uxtb	r2, r2
 800c6f6:	701a      	strb	r2, [r3, #0]
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	6979      	ldr	r1, [r7, #20]
 800c700:	69b8      	ldr	r0, [r7, #24]
 800c702:	f7ff fa05 	bl	800bb10 <_SendPacket>
  RECORD_END();
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	f383 8811 	msr	BASEPRI, r3
}
 800c70c:	bf00      	nop
 800c70e:	3738      	adds	r7, #56	@ 0x38
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	20004458 	.word	0x20004458

0800c718 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800c718:	b580      	push	{r7, lr}
 800c71a:	b090      	sub	sp, #64	@ 0x40
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
 800c724:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c726:	f3ef 8311 	mrs	r3, BASEPRI
 800c72a:	f04f 0120 	mov.w	r1, #32
 800c72e:	f381 8811 	msr	BASEPRI, r1
 800c732:	61fb      	str	r3, [r7, #28]
 800c734:	4840      	ldr	r0, [pc, #256]	@ (800c838 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800c736:	f7ff f8f7 	bl	800b928 <_PreparePacket>
 800c73a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c748:	e00b      	b.n	800c762 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800c74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74c:	b2da      	uxtb	r2, r3
 800c74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c750:	1c59      	adds	r1, r3, #1
 800c752:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800c754:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c758:	b2d2      	uxtb	r2, r2
 800c75a:	701a      	strb	r2, [r3, #0]
 800c75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75e:	09db      	lsrs	r3, r3, #7
 800c760:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c764:	2b7f      	cmp	r3, #127	@ 0x7f
 800c766:	d8f0      	bhi.n	800c74a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800c768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c76a:	1c5a      	adds	r2, r3, #1
 800c76c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800c76e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c770:	b2d2      	uxtb	r2, r2
 800c772:	701a      	strb	r2, [r3, #0]
 800c774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c776:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c780:	e00b      	b.n	800c79a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800c782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c784:	b2da      	uxtb	r2, r3
 800c786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c788:	1c59      	adds	r1, r3, #1
 800c78a:	6379      	str	r1, [r7, #52]	@ 0x34
 800c78c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c790:	b2d2      	uxtb	r2, r2
 800c792:	701a      	strb	r2, [r3, #0]
 800c794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c796:	09db      	lsrs	r3, r3, #7
 800c798:	633b      	str	r3, [r7, #48]	@ 0x30
 800c79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c79c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c79e:	d8f0      	bhi.n	800c782 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800c7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7a2:	1c5a      	adds	r2, r3, #1
 800c7a4:	637a      	str	r2, [r7, #52]	@ 0x34
 800c7a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7a8:	b2d2      	uxtb	r2, r2
 800c7aa:	701a      	strb	r2, [r3, #0]
 800c7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7b8:	e00b      	b.n	800c7d2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800c7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7bc:	b2da      	uxtb	r2, r3
 800c7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c0:	1c59      	adds	r1, r3, #1
 800c7c2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c7c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c7c8:	b2d2      	uxtb	r2, r2
 800c7ca:	701a      	strb	r2, [r3, #0]
 800c7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ce:	09db      	lsrs	r3, r3, #7
 800c7d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7d4:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7d6:	d8f0      	bhi.n	800c7ba <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800c7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7da:	1c5a      	adds	r2, r3, #1
 800c7dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c7de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c7e0:	b2d2      	uxtb	r2, r2
 800c7e2:	701a      	strb	r2, [r3, #0]
 800c7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7ee:	623b      	str	r3, [r7, #32]
 800c7f0:	e00b      	b.n	800c80a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800c7f2:	6a3b      	ldr	r3, [r7, #32]
 800c7f4:	b2da      	uxtb	r2, r3
 800c7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f8:	1c59      	adds	r1, r3, #1
 800c7fa:	6279      	str	r1, [r7, #36]	@ 0x24
 800c7fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c800:	b2d2      	uxtb	r2, r2
 800c802:	701a      	strb	r2, [r3, #0]
 800c804:	6a3b      	ldr	r3, [r7, #32]
 800c806:	09db      	lsrs	r3, r3, #7
 800c808:	623b      	str	r3, [r7, #32]
 800c80a:	6a3b      	ldr	r3, [r7, #32]
 800c80c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c80e:	d8f0      	bhi.n	800c7f2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800c810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c812:	1c5a      	adds	r2, r3, #1
 800c814:	627a      	str	r2, [r7, #36]	@ 0x24
 800c816:	6a3a      	ldr	r2, [r7, #32]
 800c818:	b2d2      	uxtb	r2, r2
 800c81a:	701a      	strb	r2, [r3, #0]
 800c81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	6979      	ldr	r1, [r7, #20]
 800c824:	69b8      	ldr	r0, [r7, #24]
 800c826:	f7ff f973 	bl	800bb10 <_SendPacket>
  RECORD_END();
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	f383 8811 	msr	BASEPRI, r3
}
 800c830:	bf00      	nop
 800c832:	3740      	adds	r7, #64	@ 0x40
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	20004458 	.word	0x20004458

0800c83c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08c      	sub	sp, #48	@ 0x30
 800c840:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800c842:	4b58      	ldr	r3, [pc, #352]	@ (800c9a4 <SEGGER_SYSVIEW_Start+0x168>)
 800c844:	2201      	movs	r2, #1
 800c846:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800c848:	f3ef 8311 	mrs	r3, BASEPRI
 800c84c:	f04f 0120 	mov.w	r1, #32
 800c850:	f381 8811 	msr	BASEPRI, r1
 800c854:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800c856:	4b53      	ldr	r3, [pc, #332]	@ (800c9a4 <SEGGER_SYSVIEW_Start+0x168>)
 800c858:	785b      	ldrb	r3, [r3, #1]
 800c85a:	220a      	movs	r2, #10
 800c85c:	4952      	ldr	r1, [pc, #328]	@ (800c9a8 <SEGGER_SYSVIEW_Start+0x16c>)
 800c85e:	4618      	mov	r0, r3
 800c860:	f7f3 fc76 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800c86a:	200a      	movs	r0, #10
 800c86c:	f7ff fe2a 	bl	800c4c4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c870:	f3ef 8311 	mrs	r3, BASEPRI
 800c874:	f04f 0120 	mov.w	r1, #32
 800c878:	f381 8811 	msr	BASEPRI, r1
 800c87c:	60bb      	str	r3, [r7, #8]
 800c87e:	484b      	ldr	r0, [pc, #300]	@ (800c9ac <SEGGER_SYSVIEW_Start+0x170>)
 800c880:	f7ff f852 	bl	800b928 <_PreparePacket>
 800c884:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c88e:	4b45      	ldr	r3, [pc, #276]	@ (800c9a4 <SEGGER_SYSVIEW_Start+0x168>)
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c894:	e00b      	b.n	800c8ae <SEGGER_SYSVIEW_Start+0x72>
 800c896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c898:	b2da      	uxtb	r2, r3
 800c89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c89c:	1c59      	adds	r1, r3, #1
 800c89e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c8a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c8a4:	b2d2      	uxtb	r2, r2
 800c8a6:	701a      	strb	r2, [r3, #0]
 800c8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8aa:	09db      	lsrs	r3, r3, #7
 800c8ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8b0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8b2:	d8f0      	bhi.n	800c896 <SEGGER_SYSVIEW_Start+0x5a>
 800c8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c8ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c8bc:	b2d2      	uxtb	r2, r2
 800c8be:	701a      	strb	r2, [r3, #0]
 800c8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8c8:	4b36      	ldr	r3, [pc, #216]	@ (800c9a4 <SEGGER_SYSVIEW_Start+0x168>)
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	623b      	str	r3, [r7, #32]
 800c8ce:	e00b      	b.n	800c8e8 <SEGGER_SYSVIEW_Start+0xac>
 800c8d0:	6a3b      	ldr	r3, [r7, #32]
 800c8d2:	b2da      	uxtb	r2, r3
 800c8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d6:	1c59      	adds	r1, r3, #1
 800c8d8:	6279      	str	r1, [r7, #36]	@ 0x24
 800c8da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c8de:	b2d2      	uxtb	r2, r2
 800c8e0:	701a      	strb	r2, [r3, #0]
 800c8e2:	6a3b      	ldr	r3, [r7, #32]
 800c8e4:	09db      	lsrs	r3, r3, #7
 800c8e6:	623b      	str	r3, [r7, #32]
 800c8e8:	6a3b      	ldr	r3, [r7, #32]
 800c8ea:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8ec:	d8f0      	bhi.n	800c8d0 <SEGGER_SYSVIEW_Start+0x94>
 800c8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f0:	1c5a      	adds	r2, r3, #1
 800c8f2:	627a      	str	r2, [r7, #36]	@ 0x24
 800c8f4:	6a3a      	ldr	r2, [r7, #32]
 800c8f6:	b2d2      	uxtb	r2, r2
 800c8f8:	701a      	strb	r2, [r3, #0]
 800c8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	61fb      	str	r3, [r7, #28]
 800c902:	4b28      	ldr	r3, [pc, #160]	@ (800c9a4 <SEGGER_SYSVIEW_Start+0x168>)
 800c904:	691b      	ldr	r3, [r3, #16]
 800c906:	61bb      	str	r3, [r7, #24]
 800c908:	e00b      	b.n	800c922 <SEGGER_SYSVIEW_Start+0xe6>
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	1c59      	adds	r1, r3, #1
 800c912:	61f9      	str	r1, [r7, #28]
 800c914:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c918:	b2d2      	uxtb	r2, r2
 800c91a:	701a      	strb	r2, [r3, #0]
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	09db      	lsrs	r3, r3, #7
 800c920:	61bb      	str	r3, [r7, #24]
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	2b7f      	cmp	r3, #127	@ 0x7f
 800c926:	d8f0      	bhi.n	800c90a <SEGGER_SYSVIEW_Start+0xce>
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	1c5a      	adds	r2, r3, #1
 800c92c:	61fa      	str	r2, [r7, #28]
 800c92e:	69ba      	ldr	r2, [r7, #24]
 800c930:	b2d2      	uxtb	r2, r2
 800c932:	701a      	strb	r2, [r3, #0]
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	617b      	str	r3, [r7, #20]
 800c93c:	2300      	movs	r3, #0
 800c93e:	613b      	str	r3, [r7, #16]
 800c940:	e00b      	b.n	800c95a <SEGGER_SYSVIEW_Start+0x11e>
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	b2da      	uxtb	r2, r3
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	1c59      	adds	r1, r3, #1
 800c94a:	6179      	str	r1, [r7, #20]
 800c94c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c950:	b2d2      	uxtb	r2, r2
 800c952:	701a      	strb	r2, [r3, #0]
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	09db      	lsrs	r3, r3, #7
 800c958:	613b      	str	r3, [r7, #16]
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c95e:	d8f0      	bhi.n	800c942 <SEGGER_SYSVIEW_Start+0x106>
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	1c5a      	adds	r2, r3, #1
 800c964:	617a      	str	r2, [r7, #20]
 800c966:	693a      	ldr	r2, [r7, #16]
 800c968:	b2d2      	uxtb	r2, r2
 800c96a:	701a      	strb	r2, [r3, #0]
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c970:	2218      	movs	r2, #24
 800c972:	6839      	ldr	r1, [r7, #0]
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7ff f8cb 	bl	800bb10 <_SendPacket>
      RECORD_END();
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c980:	4b08      	ldr	r3, [pc, #32]	@ (800c9a4 <SEGGER_SYSVIEW_Start+0x168>)
 800c982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c984:	2b00      	cmp	r3, #0
 800c986:	d002      	beq.n	800c98e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800c988:	4b06      	ldr	r3, [pc, #24]	@ (800c9a4 <SEGGER_SYSVIEW_Start+0x168>)
 800c98a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c98c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800c98e:	f000 f9eb 	bl	800cd68 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800c992:	f000 f9b1 	bl	800ccf8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800c996:	f000 fba9 	bl	800d0ec <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800c99a:	bf00      	nop
 800c99c:	3730      	adds	r7, #48	@ 0x30
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	20004428 	.word	0x20004428
 800c9a8:	08010318 	.word	0x08010318
 800c9ac:	20004458 	.word	0x20004458

0800c9b0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c9b6:	f3ef 8311 	mrs	r3, BASEPRI
 800c9ba:	f04f 0120 	mov.w	r1, #32
 800c9be:	f381 8811 	msr	BASEPRI, r1
 800c9c2:	607b      	str	r3, [r7, #4]
 800c9c4:	480b      	ldr	r0, [pc, #44]	@ (800c9f4 <SEGGER_SYSVIEW_Stop+0x44>)
 800c9c6:	f7fe ffaf 	bl	800b928 <_PreparePacket>
 800c9ca:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800c9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c9f8 <SEGGER_SYSVIEW_Stop+0x48>)
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d007      	beq.n	800c9e4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800c9d4:	220b      	movs	r2, #11
 800c9d6:	6839      	ldr	r1, [r7, #0]
 800c9d8:	6838      	ldr	r0, [r7, #0]
 800c9da:	f7ff f899 	bl	800bb10 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800c9de:	4b06      	ldr	r3, [pc, #24]	@ (800c9f8 <SEGGER_SYSVIEW_Stop+0x48>)
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f383 8811 	msr	BASEPRI, r3
}
 800c9ea:	bf00      	nop
 800c9ec:	3708      	adds	r7, #8
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	20004458 	.word	0x20004458
 800c9f8:	20004428 	.word	0x20004428

0800c9fc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b08c      	sub	sp, #48	@ 0x30
 800ca00:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ca02:	f3ef 8311 	mrs	r3, BASEPRI
 800ca06:	f04f 0120 	mov.w	r1, #32
 800ca0a:	f381 8811 	msr	BASEPRI, r1
 800ca0e:	60fb      	str	r3, [r7, #12]
 800ca10:	4845      	ldr	r0, [pc, #276]	@ (800cb28 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800ca12:	f7fe ff89 	bl	800b928 <_PreparePacket>
 800ca16:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca20:	4b42      	ldr	r3, [pc, #264]	@ (800cb2c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca26:	e00b      	b.n	800ca40 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800ca28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2e:	1c59      	adds	r1, r3, #1
 800ca30:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ca32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ca36:	b2d2      	uxtb	r2, r2
 800ca38:	701a      	strb	r2, [r3, #0]
 800ca3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca3c:	09db      	lsrs	r3, r3, #7
 800ca3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca42:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca44:	d8f0      	bhi.n	800ca28 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800ca46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca48:	1c5a      	adds	r2, r3, #1
 800ca4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca4e:	b2d2      	uxtb	r2, r2
 800ca50:	701a      	strb	r2, [r3, #0]
 800ca52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca54:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca5a:	4b34      	ldr	r3, [pc, #208]	@ (800cb2c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	623b      	str	r3, [r7, #32]
 800ca60:	e00b      	b.n	800ca7a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800ca62:	6a3b      	ldr	r3, [r7, #32]
 800ca64:	b2da      	uxtb	r2, r3
 800ca66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca68:	1c59      	adds	r1, r3, #1
 800ca6a:	6279      	str	r1, [r7, #36]	@ 0x24
 800ca6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ca70:	b2d2      	uxtb	r2, r2
 800ca72:	701a      	strb	r2, [r3, #0]
 800ca74:	6a3b      	ldr	r3, [r7, #32]
 800ca76:	09db      	lsrs	r3, r3, #7
 800ca78:	623b      	str	r3, [r7, #32]
 800ca7a:	6a3b      	ldr	r3, [r7, #32]
 800ca7c:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca7e:	d8f0      	bhi.n	800ca62 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800ca80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca82:	1c5a      	adds	r2, r3, #1
 800ca84:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca86:	6a3a      	ldr	r2, [r7, #32]
 800ca88:	b2d2      	uxtb	r2, r2
 800ca8a:	701a      	strb	r2, [r3, #0]
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	61fb      	str	r3, [r7, #28]
 800ca94:	4b25      	ldr	r3, [pc, #148]	@ (800cb2c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ca96:	691b      	ldr	r3, [r3, #16]
 800ca98:	61bb      	str	r3, [r7, #24]
 800ca9a:	e00b      	b.n	800cab4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	1c59      	adds	r1, r3, #1
 800caa4:	61f9      	str	r1, [r7, #28]
 800caa6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800caaa:	b2d2      	uxtb	r2, r2
 800caac:	701a      	strb	r2, [r3, #0]
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	09db      	lsrs	r3, r3, #7
 800cab2:	61bb      	str	r3, [r7, #24]
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	2b7f      	cmp	r3, #127	@ 0x7f
 800cab8:	d8f0      	bhi.n	800ca9c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	1c5a      	adds	r2, r3, #1
 800cabe:	61fa      	str	r2, [r7, #28]
 800cac0:	69ba      	ldr	r2, [r7, #24]
 800cac2:	b2d2      	uxtb	r2, r2
 800cac4:	701a      	strb	r2, [r3, #0]
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	617b      	str	r3, [r7, #20]
 800cace:	2300      	movs	r3, #0
 800cad0:	613b      	str	r3, [r7, #16]
 800cad2:	e00b      	b.n	800caec <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	b2da      	uxtb	r2, r3
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	1c59      	adds	r1, r3, #1
 800cadc:	6179      	str	r1, [r7, #20]
 800cade:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cae2:	b2d2      	uxtb	r2, r2
 800cae4:	701a      	strb	r2, [r3, #0]
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	09db      	lsrs	r3, r3, #7
 800caea:	613b      	str	r3, [r7, #16]
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	2b7f      	cmp	r3, #127	@ 0x7f
 800caf0:	d8f0      	bhi.n	800cad4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	1c5a      	adds	r2, r3, #1
 800caf6:	617a      	str	r2, [r7, #20]
 800caf8:	693a      	ldr	r2, [r7, #16]
 800cafa:	b2d2      	uxtb	r2, r2
 800cafc:	701a      	strb	r2, [r3, #0]
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800cb02:	2218      	movs	r2, #24
 800cb04:	6879      	ldr	r1, [r7, #4]
 800cb06:	68b8      	ldr	r0, [r7, #8]
 800cb08:	f7ff f802 	bl	800bb10 <_SendPacket>
  RECORD_END();
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800cb12:	4b06      	ldr	r3, [pc, #24]	@ (800cb2c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cb14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d002      	beq.n	800cb20 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800cb1a:	4b04      	ldr	r3, [pc, #16]	@ (800cb2c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cb1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb1e:	4798      	blx	r3
  }
}
 800cb20:	bf00      	nop
 800cb22:	3730      	adds	r7, #48	@ 0x30
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	20004458 	.word	0x20004458
 800cb2c:	20004428 	.word	0x20004428

0800cb30 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b092      	sub	sp, #72	@ 0x48
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800cb38:	f3ef 8311 	mrs	r3, BASEPRI
 800cb3c:	f04f 0120 	mov.w	r1, #32
 800cb40:	f381 8811 	msr	BASEPRI, r1
 800cb44:	617b      	str	r3, [r7, #20]
 800cb46:	486a      	ldr	r0, [pc, #424]	@ (800ccf0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800cb48:	f7fe feee 	bl	800b928 <_PreparePacket>
 800cb4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	4b66      	ldr	r3, [pc, #408]	@ (800ccf4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800cb5c:	691b      	ldr	r3, [r3, #16]
 800cb5e:	1ad3      	subs	r3, r2, r3
 800cb60:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb62:	e00b      	b.n	800cb7c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800cb64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb66:	b2da      	uxtb	r2, r3
 800cb68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb6a:	1c59      	adds	r1, r3, #1
 800cb6c:	6479      	str	r1, [r7, #68]	@ 0x44
 800cb6e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cb72:	b2d2      	uxtb	r2, r2
 800cb74:	701a      	strb	r2, [r3, #0]
 800cb76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb78:	09db      	lsrs	r3, r3, #7
 800cb7a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb7e:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb80:	d8f0      	bhi.n	800cb64 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800cb82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb84:	1c5a      	adds	r2, r3, #1
 800cb86:	647a      	str	r2, [r7, #68]	@ 0x44
 800cb88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb8a:	b2d2      	uxtb	r2, r2
 800cb8c:	701a      	strb	r2, [r3, #0]
 800cb8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	689b      	ldr	r3, [r3, #8]
 800cb9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb9c:	e00b      	b.n	800cbb6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800cb9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba0:	b2da      	uxtb	r2, r3
 800cba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cba4:	1c59      	adds	r1, r3, #1
 800cba6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800cba8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cbac:	b2d2      	uxtb	r2, r2
 800cbae:	701a      	strb	r2, [r3, #0]
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb2:	09db      	lsrs	r3, r3, #7
 800cbb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb8:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbba:	d8f0      	bhi.n	800cb9e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800cbbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbbe:	1c5a      	adds	r2, r3, #1
 800cbc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800cbc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbc4:	b2d2      	uxtb	r2, r2
 800cbc6:	701a      	strb	r2, [r3, #0]
 800cbc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbca:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	2220      	movs	r2, #32
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f7fe fe5b 	bl	800b890 <_EncodeStr>
 800cbda:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800cbdc:	2209      	movs	r2, #9
 800cbde:	68f9      	ldr	r1, [r7, #12]
 800cbe0:	6938      	ldr	r0, [r7, #16]
 800cbe2:	f7fe ff95 	bl	800bb10 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	4b40      	ldr	r3, [pc, #256]	@ (800ccf4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800cbf4:	691b      	ldr	r3, [r3, #16]
 800cbf6:	1ad3      	subs	r3, r2, r3
 800cbf8:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbfa:	e00b      	b.n	800cc14 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800cbfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfe:	b2da      	uxtb	r2, r3
 800cc00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc02:	1c59      	adds	r1, r3, #1
 800cc04:	6379      	str	r1, [r7, #52]	@ 0x34
 800cc06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cc0a:	b2d2      	uxtb	r2, r2
 800cc0c:	701a      	strb	r2, [r3, #0]
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc10:	09db      	lsrs	r3, r3, #7
 800cc12:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc16:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc18:	d8f0      	bhi.n	800cbfc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800cc1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc1c:	1c5a      	adds	r2, r3, #1
 800cc1e:	637a      	str	r2, [r7, #52]	@ 0x34
 800cc20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc22:	b2d2      	uxtb	r2, r2
 800cc24:	701a      	strb	r2, [r3, #0]
 800cc26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc34:	e00b      	b.n	800cc4e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800cc36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc38:	b2da      	uxtb	r2, r3
 800cc3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc3c:	1c59      	adds	r1, r3, #1
 800cc3e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800cc40:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cc44:	b2d2      	uxtb	r2, r2
 800cc46:	701a      	strb	r2, [r3, #0]
 800cc48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc4a:	09db      	lsrs	r3, r3, #7
 800cc4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc50:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc52:	d8f0      	bhi.n	800cc36 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800cc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc56:	1c5a      	adds	r2, r3, #1
 800cc58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc5c:	b2d2      	uxtb	r2, r2
 800cc5e:	701a      	strb	r2, [r3, #0]
 800cc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc62:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	691b      	ldr	r3, [r3, #16]
 800cc6c:	623b      	str	r3, [r7, #32]
 800cc6e:	e00b      	b.n	800cc88 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800cc70:	6a3b      	ldr	r3, [r7, #32]
 800cc72:	b2da      	uxtb	r2, r3
 800cc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc76:	1c59      	adds	r1, r3, #1
 800cc78:	6279      	str	r1, [r7, #36]	@ 0x24
 800cc7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cc7e:	b2d2      	uxtb	r2, r2
 800cc80:	701a      	strb	r2, [r3, #0]
 800cc82:	6a3b      	ldr	r3, [r7, #32]
 800cc84:	09db      	lsrs	r3, r3, #7
 800cc86:	623b      	str	r3, [r7, #32]
 800cc88:	6a3b      	ldr	r3, [r7, #32]
 800cc8a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc8c:	d8f0      	bhi.n	800cc70 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800cc8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc90:	1c5a      	adds	r2, r3, #1
 800cc92:	627a      	str	r2, [r7, #36]	@ 0x24
 800cc94:	6a3a      	ldr	r2, [r7, #32]
 800cc96:	b2d2      	uxtb	r2, r2
 800cc98:	701a      	strb	r2, [r3, #0]
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	61fb      	str	r3, [r7, #28]
 800cca2:	2300      	movs	r3, #0
 800cca4:	61bb      	str	r3, [r7, #24]
 800cca6:	e00b      	b.n	800ccc0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	b2da      	uxtb	r2, r3
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	1c59      	adds	r1, r3, #1
 800ccb0:	61f9      	str	r1, [r7, #28]
 800ccb2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ccb6:	b2d2      	uxtb	r2, r2
 800ccb8:	701a      	strb	r2, [r3, #0]
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	09db      	lsrs	r3, r3, #7
 800ccbe:	61bb      	str	r3, [r7, #24]
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	2b7f      	cmp	r3, #127	@ 0x7f
 800ccc4:	d8f0      	bhi.n	800cca8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	1c5a      	adds	r2, r3, #1
 800ccca:	61fa      	str	r2, [r7, #28]
 800cccc:	69ba      	ldr	r2, [r7, #24]
 800ccce:	b2d2      	uxtb	r2, r2
 800ccd0:	701a      	strb	r2, [r3, #0]
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800ccd6:	2215      	movs	r2, #21
 800ccd8:	68f9      	ldr	r1, [r7, #12]
 800ccda:	6938      	ldr	r0, [r7, #16]
 800ccdc:	f7fe ff18 	bl	800bb10 <_SendPacket>
  RECORD_END();
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	f383 8811 	msr	BASEPRI, r3
}
 800cce6:	bf00      	nop
 800cce8:	3748      	adds	r7, #72	@ 0x48
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	20004458 	.word	0x20004458
 800ccf4:	20004428 	.word	0x20004428

0800ccf8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800ccfc:	4b07      	ldr	r3, [pc, #28]	@ (800cd1c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ccfe:	6a1b      	ldr	r3, [r3, #32]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d008      	beq.n	800cd16 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800cd04:	4b05      	ldr	r3, [pc, #20]	@ (800cd1c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cd06:	6a1b      	ldr	r3, [r3, #32]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d003      	beq.n	800cd16 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800cd0e:	4b03      	ldr	r3, [pc, #12]	@ (800cd1c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cd10:	6a1b      	ldr	r3, [r3, #32]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	4798      	blx	r3
  }
}
 800cd16:	bf00      	nop
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	20004428 	.word	0x20004428

0800cd20 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b086      	sub	sp, #24
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cd28:	f3ef 8311 	mrs	r3, BASEPRI
 800cd2c:	f04f 0120 	mov.w	r1, #32
 800cd30:	f381 8811 	msr	BASEPRI, r1
 800cd34:	617b      	str	r3, [r7, #20]
 800cd36:	480b      	ldr	r0, [pc, #44]	@ (800cd64 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800cd38:	f7fe fdf6 	bl	800b928 <_PreparePacket>
 800cd3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cd3e:	2280      	movs	r2, #128	@ 0x80
 800cd40:	6879      	ldr	r1, [r7, #4]
 800cd42:	6938      	ldr	r0, [r7, #16]
 800cd44:	f7fe fda4 	bl	800b890 <_EncodeStr>
 800cd48:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800cd4a:	220e      	movs	r2, #14
 800cd4c:	68f9      	ldr	r1, [r7, #12]
 800cd4e:	6938      	ldr	r0, [r7, #16]
 800cd50:	f7fe fede 	bl	800bb10 <_SendPacket>
  RECORD_END();
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	f383 8811 	msr	BASEPRI, r3
}
 800cd5a:	bf00      	nop
 800cd5c:	3718      	adds	r7, #24
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	20004458 	.word	0x20004458

0800cd68 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800cd68:	b590      	push	{r4, r7, lr}
 800cd6a:	b083      	sub	sp, #12
 800cd6c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800cd6e:	4b15      	ldr	r3, [pc, #84]	@ (800cdc4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cd70:	6a1b      	ldr	r3, [r3, #32]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d01a      	beq.n	800cdac <SEGGER_SYSVIEW_RecordSystime+0x44>
 800cd76:	4b13      	ldr	r3, [pc, #76]	@ (800cdc4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cd78:	6a1b      	ldr	r3, [r3, #32]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d015      	beq.n	800cdac <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800cd80:	4b10      	ldr	r3, [pc, #64]	@ (800cdc4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cd82:	6a1b      	ldr	r3, [r3, #32]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4798      	blx	r3
 800cd88:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800cd8c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800cd8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cd92:	f04f 0200 	mov.w	r2, #0
 800cd96:	f04f 0300 	mov.w	r3, #0
 800cd9a:	000a      	movs	r2, r1
 800cd9c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800cd9e:	4613      	mov	r3, r2
 800cda0:	461a      	mov	r2, r3
 800cda2:	4621      	mov	r1, r4
 800cda4:	200d      	movs	r0, #13
 800cda6:	f7ff fbe7 	bl	800c578 <SEGGER_SYSVIEW_RecordU32x2>
 800cdaa:	e007      	b.n	800cdbc <SEGGER_SYSVIEW_RecordSystime+0x54>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800cdac:	4b06      	ldr	r3, [pc, #24]	@ (800cdc8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	091b      	lsrs	r3, r3, #4
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	200c      	movs	r0, #12
 800cdb6:	f7ff fba3 	bl	800c500 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800cdba:	bf00      	nop
 800cdbc:	bf00      	nop
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd90      	pop	{r4, r7, pc}
 800cdc4:	20004428 	.word	0x20004428
 800cdc8:	e0001004 	.word	0xe0001004

0800cdcc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cdd2:	f3ef 8311 	mrs	r3, BASEPRI
 800cdd6:	f04f 0120 	mov.w	r1, #32
 800cdda:	f381 8811 	msr	BASEPRI, r1
 800cdde:	607b      	str	r3, [r7, #4]
 800cde0:	4807      	ldr	r0, [pc, #28]	@ (800ce00 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800cde2:	f7fe fda1 	bl	800b928 <_PreparePacket>
 800cde6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800cde8:	2211      	movs	r2, #17
 800cdea:	6839      	ldr	r1, [r7, #0]
 800cdec:	6838      	ldr	r0, [r7, #0]
 800cdee:	f7fe fe8f 	bl	800bb10 <_SendPacket>
  RECORD_END();
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f383 8811 	msr	BASEPRI, r3
}
 800cdf8:	bf00      	nop
 800cdfa:	3708      	adds	r7, #8
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	20004458 	.word	0x20004458

0800ce04 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b088      	sub	sp, #32
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ce0c:	f3ef 8311 	mrs	r3, BASEPRI
 800ce10:	f04f 0120 	mov.w	r1, #32
 800ce14:	f381 8811 	msr	BASEPRI, r1
 800ce18:	617b      	str	r3, [r7, #20]
 800ce1a:	4819      	ldr	r0, [pc, #100]	@ (800ce80 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800ce1c:	f7fe fd84 	bl	800b928 <_PreparePacket>
 800ce20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ce26:	4b17      	ldr	r3, [pc, #92]	@ (800ce84 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	1ad3      	subs	r3, r2, r3
 800ce2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	61fb      	str	r3, [r7, #28]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	61bb      	str	r3, [r7, #24]
 800ce38:	e00b      	b.n	800ce52 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	b2da      	uxtb	r2, r3
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	1c59      	adds	r1, r3, #1
 800ce42:	61f9      	str	r1, [r7, #28]
 800ce44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ce48:	b2d2      	uxtb	r2, r2
 800ce4a:	701a      	strb	r2, [r3, #0]
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	09db      	lsrs	r3, r3, #7
 800ce50:	61bb      	str	r3, [r7, #24]
 800ce52:	69bb      	ldr	r3, [r7, #24]
 800ce54:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce56:	d8f0      	bhi.n	800ce3a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	1c5a      	adds	r2, r3, #1
 800ce5c:	61fa      	str	r2, [r7, #28]
 800ce5e:	69ba      	ldr	r2, [r7, #24]
 800ce60:	b2d2      	uxtb	r2, r2
 800ce62:	701a      	strb	r2, [r3, #0]
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800ce68:	2208      	movs	r2, #8
 800ce6a:	68f9      	ldr	r1, [r7, #12]
 800ce6c:	6938      	ldr	r0, [r7, #16]
 800ce6e:	f7fe fe4f 	bl	800bb10 <_SendPacket>
  RECORD_END();
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	f383 8811 	msr	BASEPRI, r3
}
 800ce78:	bf00      	nop
 800ce7a:	3720      	adds	r7, #32
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	20004458 	.word	0x20004458
 800ce84:	20004428 	.word	0x20004428

0800ce88 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b088      	sub	sp, #32
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ce90:	f3ef 8311 	mrs	r3, BASEPRI
 800ce94:	f04f 0120 	mov.w	r1, #32
 800ce98:	f381 8811 	msr	BASEPRI, r1
 800ce9c:	617b      	str	r3, [r7, #20]
 800ce9e:	4819      	ldr	r0, [pc, #100]	@ (800cf04 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800cea0:	f7fe fd42 	bl	800b928 <_PreparePacket>
 800cea4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ceaa:	4b17      	ldr	r3, [pc, #92]	@ (800cf08 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800ceac:	691b      	ldr	r3, [r3, #16]
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	1ad3      	subs	r3, r2, r3
 800ceb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	61fb      	str	r3, [r7, #28]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	61bb      	str	r3, [r7, #24]
 800cebc:	e00b      	b.n	800ced6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800cebe:	69bb      	ldr	r3, [r7, #24]
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	69fb      	ldr	r3, [r7, #28]
 800cec4:	1c59      	adds	r1, r3, #1
 800cec6:	61f9      	str	r1, [r7, #28]
 800cec8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cecc:	b2d2      	uxtb	r2, r2
 800cece:	701a      	strb	r2, [r3, #0]
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	09db      	lsrs	r3, r3, #7
 800ced4:	61bb      	str	r3, [r7, #24]
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	2b7f      	cmp	r3, #127	@ 0x7f
 800ceda:	d8f0      	bhi.n	800cebe <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	1c5a      	adds	r2, r3, #1
 800cee0:	61fa      	str	r2, [r7, #28]
 800cee2:	69ba      	ldr	r2, [r7, #24]
 800cee4:	b2d2      	uxtb	r2, r2
 800cee6:	701a      	strb	r2, [r3, #0]
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800ceec:	2204      	movs	r2, #4
 800ceee:	68f9      	ldr	r1, [r7, #12]
 800cef0:	6938      	ldr	r0, [r7, #16]
 800cef2:	f7fe fe0d 	bl	800bb10 <_SendPacket>
  RECORD_END();
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	f383 8811 	msr	BASEPRI, r3
}
 800cefc:	bf00      	nop
 800cefe:	3720      	adds	r7, #32
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	20004458 	.word	0x20004458
 800cf08:	20004428 	.word	0x20004428

0800cf0c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b088      	sub	sp, #32
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cf14:	f3ef 8311 	mrs	r3, BASEPRI
 800cf18:	f04f 0120 	mov.w	r1, #32
 800cf1c:	f381 8811 	msr	BASEPRI, r1
 800cf20:	617b      	str	r3, [r7, #20]
 800cf22:	4819      	ldr	r0, [pc, #100]	@ (800cf88 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800cf24:	f7fe fd00 	bl	800b928 <_PreparePacket>
 800cf28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cf2e:	4b17      	ldr	r3, [pc, #92]	@ (800cf8c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	61fb      	str	r3, [r7, #28]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	61bb      	str	r3, [r7, #24]
 800cf40:	e00b      	b.n	800cf5a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	b2da      	uxtb	r2, r3
 800cf46:	69fb      	ldr	r3, [r7, #28]
 800cf48:	1c59      	adds	r1, r3, #1
 800cf4a:	61f9      	str	r1, [r7, #28]
 800cf4c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cf50:	b2d2      	uxtb	r2, r2
 800cf52:	701a      	strb	r2, [r3, #0]
 800cf54:	69bb      	ldr	r3, [r7, #24]
 800cf56:	09db      	lsrs	r3, r3, #7
 800cf58:	61bb      	str	r3, [r7, #24]
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf5e:	d8f0      	bhi.n	800cf42 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800cf60:	69fb      	ldr	r3, [r7, #28]
 800cf62:	1c5a      	adds	r2, r3, #1
 800cf64:	61fa      	str	r2, [r7, #28]
 800cf66:	69ba      	ldr	r2, [r7, #24]
 800cf68:	b2d2      	uxtb	r2, r2
 800cf6a:	701a      	strb	r2, [r3, #0]
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800cf70:	2206      	movs	r2, #6
 800cf72:	68f9      	ldr	r1, [r7, #12]
 800cf74:	6938      	ldr	r0, [r7, #16]
 800cf76:	f7fe fdcb 	bl	800bb10 <_SendPacket>
  RECORD_END();
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	f383 8811 	msr	BASEPRI, r3
}
 800cf80:	bf00      	nop
 800cf82:	3720      	adds	r7, #32
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	20004458 	.word	0x20004458
 800cf8c:	20004428 	.word	0x20004428

0800cf90 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800cf98:	4b04      	ldr	r3, [pc, #16]	@ (800cfac <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800cf9a:	691b      	ldr	r3, [r3, #16]
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	1ad3      	subs	r3, r2, r3
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	370c      	adds	r7, #12
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bc80      	pop	{r7}
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop
 800cfac:	20004428 	.word	0x20004428

0800cfb0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b08c      	sub	sp, #48	@ 0x30
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800cfba:	4b3b      	ldr	r3, [pc, #236]	@ (800d0a8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d06d      	beq.n	800d09e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800cfc2:	4b39      	ldr	r3, [pc, #228]	@ (800d0a8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800cfc8:	2300      	movs	r3, #0
 800cfca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cfcc:	e008      	b.n	800cfe0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800cfce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800cfd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d007      	beq.n	800cfea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800cfda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfdc:	3301      	adds	r3, #1
 800cfde:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cfe0:	79fb      	ldrb	r3, [r7, #7]
 800cfe2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d3f2      	bcc.n	800cfce <SEGGER_SYSVIEW_SendModule+0x1e>
 800cfe8:	e000      	b.n	800cfec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800cfea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800cfec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d055      	beq.n	800d09e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cff2:	f3ef 8311 	mrs	r3, BASEPRI
 800cff6:	f04f 0120 	mov.w	r1, #32
 800cffa:	f381 8811 	msr	BASEPRI, r1
 800cffe:	617b      	str	r3, [r7, #20]
 800d000:	482a      	ldr	r0, [pc, #168]	@ (800d0ac <SEGGER_SYSVIEW_SendModule+0xfc>)
 800d002:	f7fe fc91 	bl	800b928 <_PreparePacket>
 800d006:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d010:	79fb      	ldrb	r3, [r7, #7]
 800d012:	623b      	str	r3, [r7, #32]
 800d014:	e00b      	b.n	800d02e <SEGGER_SYSVIEW_SendModule+0x7e>
 800d016:	6a3b      	ldr	r3, [r7, #32]
 800d018:	b2da      	uxtb	r2, r3
 800d01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01c:	1c59      	adds	r1, r3, #1
 800d01e:	6279      	str	r1, [r7, #36]	@ 0x24
 800d020:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d024:	b2d2      	uxtb	r2, r2
 800d026:	701a      	strb	r2, [r3, #0]
 800d028:	6a3b      	ldr	r3, [r7, #32]
 800d02a:	09db      	lsrs	r3, r3, #7
 800d02c:	623b      	str	r3, [r7, #32]
 800d02e:	6a3b      	ldr	r3, [r7, #32]
 800d030:	2b7f      	cmp	r3, #127	@ 0x7f
 800d032:	d8f0      	bhi.n	800d016 <SEGGER_SYSVIEW_SendModule+0x66>
 800d034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d036:	1c5a      	adds	r2, r3, #1
 800d038:	627a      	str	r2, [r7, #36]	@ 0x24
 800d03a:	6a3a      	ldr	r2, [r7, #32]
 800d03c:	b2d2      	uxtb	r2, r2
 800d03e:	701a      	strb	r2, [r3, #0]
 800d040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d042:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	61fb      	str	r3, [r7, #28]
 800d048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	61bb      	str	r3, [r7, #24]
 800d04e:	e00b      	b.n	800d068 <SEGGER_SYSVIEW_SendModule+0xb8>
 800d050:	69bb      	ldr	r3, [r7, #24]
 800d052:	b2da      	uxtb	r2, r3
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	1c59      	adds	r1, r3, #1
 800d058:	61f9      	str	r1, [r7, #28]
 800d05a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d05e:	b2d2      	uxtb	r2, r2
 800d060:	701a      	strb	r2, [r3, #0]
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	09db      	lsrs	r3, r3, #7
 800d066:	61bb      	str	r3, [r7, #24]
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d06c:	d8f0      	bhi.n	800d050 <SEGGER_SYSVIEW_SendModule+0xa0>
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	1c5a      	adds	r2, r3, #1
 800d072:	61fa      	str	r2, [r7, #28]
 800d074:	69ba      	ldr	r2, [r7, #24]
 800d076:	b2d2      	uxtb	r2, r2
 800d078:	701a      	strb	r2, [r3, #0]
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2280      	movs	r2, #128	@ 0x80
 800d084:	4619      	mov	r1, r3
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f7fe fc02 	bl	800b890 <_EncodeStr>
 800d08c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800d08e:	2216      	movs	r2, #22
 800d090:	68f9      	ldr	r1, [r7, #12]
 800d092:	6938      	ldr	r0, [r7, #16]
 800d094:	f7fe fd3c 	bl	800bb10 <_SendPacket>
      RECORD_END();
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800d09e:	bf00      	nop
 800d0a0:	3730      	adds	r7, #48	@ 0x30
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	20004450 	.word	0x20004450
 800d0ac:	20004458 	.word	0x20004458

0800d0b0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800d0b6:	4b0c      	ldr	r3, [pc, #48]	@ (800d0e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00f      	beq.n	800d0de <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800d0be:	4b0a      	ldr	r3, [pc, #40]	@ (800d0e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d002      	beq.n	800d0d2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	691b      	ldr	r3, [r3, #16]
 800d0d6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d1f2      	bne.n	800d0c4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800d0de:	bf00      	nop
 800d0e0:	3708      	adds	r7, #8
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	20004450 	.word	0x20004450

0800d0ec <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b086      	sub	sp, #24
 800d0f0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800d0f2:	f3ef 8311 	mrs	r3, BASEPRI
 800d0f6:	f04f 0120 	mov.w	r1, #32
 800d0fa:	f381 8811 	msr	BASEPRI, r1
 800d0fe:	60fb      	str	r3, [r7, #12]
 800d100:	4817      	ldr	r0, [pc, #92]	@ (800d160 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800d102:	f7fe fc11 	bl	800b928 <_PreparePacket>
 800d106:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	617b      	str	r3, [r7, #20]
 800d110:	4b14      	ldr	r3, [pc, #80]	@ (800d164 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	613b      	str	r3, [r7, #16]
 800d116:	e00b      	b.n	800d130 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	1c59      	adds	r1, r3, #1
 800d120:	6179      	str	r1, [r7, #20]
 800d122:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d126:	b2d2      	uxtb	r2, r2
 800d128:	701a      	strb	r2, [r3, #0]
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	09db      	lsrs	r3, r3, #7
 800d12e:	613b      	str	r3, [r7, #16]
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	2b7f      	cmp	r3, #127	@ 0x7f
 800d134:	d8f0      	bhi.n	800d118 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	1c5a      	adds	r2, r3, #1
 800d13a:	617a      	str	r2, [r7, #20]
 800d13c:	693a      	ldr	r2, [r7, #16]
 800d13e:	b2d2      	uxtb	r2, r2
 800d140:	701a      	strb	r2, [r3, #0]
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800d146:	221b      	movs	r2, #27
 800d148:	6879      	ldr	r1, [r7, #4]
 800d14a:	68b8      	ldr	r0, [r7, #8]
 800d14c:	f7fe fce0 	bl	800bb10 <_SendPacket>
  RECORD_END();
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f383 8811 	msr	BASEPRI, r3
}
 800d156:	bf00      	nop
 800d158:	3718      	adds	r7, #24
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	20004458 	.word	0x20004458
 800d164:	20004454 	.word	0x20004454

0800d168 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800d168:	b40f      	push	{r0, r1, r2, r3}
 800d16a:	b580      	push	{r7, lr}
 800d16c:	b082      	sub	sp, #8
 800d16e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800d170:	f107 0314 	add.w	r3, r7, #20
 800d174:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800d176:	1d3b      	adds	r3, r7, #4
 800d178:	461a      	mov	r2, r3
 800d17a:	2100      	movs	r1, #0
 800d17c:	6938      	ldr	r0, [r7, #16]
 800d17e:	f7fe ff55 	bl	800c02c <_VPrintTarget>
  va_end(ParamList);
}
 800d182:	bf00      	nop
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d18c:	b004      	add	sp, #16
 800d18e:	4770      	bx	lr

0800d190 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800d190:	b580      	push	{r7, lr}
 800d192:	b08a      	sub	sp, #40	@ 0x28
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d198:	f3ef 8311 	mrs	r3, BASEPRI
 800d19c:	f04f 0120 	mov.w	r1, #32
 800d1a0:	f381 8811 	msr	BASEPRI, r1
 800d1a4:	617b      	str	r3, [r7, #20]
 800d1a6:	4827      	ldr	r0, [pc, #156]	@ (800d244 <SEGGER_SYSVIEW_Warn+0xb4>)
 800d1a8:	f7fe fbbe 	bl	800b928 <_PreparePacket>
 800d1ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d1ae:	2280      	movs	r2, #128	@ 0x80
 800d1b0:	6879      	ldr	r1, [r7, #4]
 800d1b2:	6938      	ldr	r0, [r7, #16]
 800d1b4:	f7fe fb6c 	bl	800b890 <_EncodeStr>
 800d1b8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1be:	2301      	movs	r3, #1
 800d1c0:	623b      	str	r3, [r7, #32]
 800d1c2:	e00b      	b.n	800d1dc <SEGGER_SYSVIEW_Warn+0x4c>
 800d1c4:	6a3b      	ldr	r3, [r7, #32]
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ca:	1c59      	adds	r1, r3, #1
 800d1cc:	6279      	str	r1, [r7, #36]	@ 0x24
 800d1ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d1d2:	b2d2      	uxtb	r2, r2
 800d1d4:	701a      	strb	r2, [r3, #0]
 800d1d6:	6a3b      	ldr	r3, [r7, #32]
 800d1d8:	09db      	lsrs	r3, r3, #7
 800d1da:	623b      	str	r3, [r7, #32]
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	2b7f      	cmp	r3, #127	@ 0x7f
 800d1e0:	d8f0      	bhi.n	800d1c4 <SEGGER_SYSVIEW_Warn+0x34>
 800d1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e4:	1c5a      	adds	r2, r3, #1
 800d1e6:	627a      	str	r2, [r7, #36]	@ 0x24
 800d1e8:	6a3a      	ldr	r2, [r7, #32]
 800d1ea:	b2d2      	uxtb	r2, r2
 800d1ec:	701a      	strb	r2, [r3, #0]
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	61fb      	str	r3, [r7, #28]
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	61bb      	str	r3, [r7, #24]
 800d1fa:	e00b      	b.n	800d214 <SEGGER_SYSVIEW_Warn+0x84>
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	b2da      	uxtb	r2, r3
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	1c59      	adds	r1, r3, #1
 800d204:	61f9      	str	r1, [r7, #28]
 800d206:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d20a:	b2d2      	uxtb	r2, r2
 800d20c:	701a      	strb	r2, [r3, #0]
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	09db      	lsrs	r3, r3, #7
 800d212:	61bb      	str	r3, [r7, #24]
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	2b7f      	cmp	r3, #127	@ 0x7f
 800d218:	d8f0      	bhi.n	800d1fc <SEGGER_SYSVIEW_Warn+0x6c>
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	1c5a      	adds	r2, r3, #1
 800d21e:	61fa      	str	r2, [r7, #28]
 800d220:	69ba      	ldr	r2, [r7, #24]
 800d222:	b2d2      	uxtb	r2, r2
 800d224:	701a      	strb	r2, [r3, #0]
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800d22a:	221a      	movs	r2, #26
 800d22c:	68f9      	ldr	r1, [r7, #12]
 800d22e:	6938      	ldr	r0, [r7, #16]
 800d230:	f7fe fc6e 	bl	800bb10 <_SendPacket>
  RECORD_END();
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	f383 8811 	msr	BASEPRI, r3
}
 800d23a:	bf00      	nop
 800d23c:	3728      	adds	r7, #40	@ 0x28
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	20004458 	.word	0x20004458

0800d248 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
 800d254:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	6879      	ldr	r1, [r7, #4]
 800d25a:	2000      	movs	r0, #0
 800d25c:	f7fe fa02 	bl	800b664 <SEGGER_RTT_Write>
  return len;
 800d260:	683b      	ldr	r3, [r7, #0]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
	...

0800d26c <malloc>:
 800d26c:	4b02      	ldr	r3, [pc, #8]	@ (800d278 <malloc+0xc>)
 800d26e:	4601      	mov	r1, r0
 800d270:	6818      	ldr	r0, [r3, #0]
 800d272:	f000 b825 	b.w	800d2c0 <_malloc_r>
 800d276:	bf00      	nop
 800d278:	2000019c 	.word	0x2000019c

0800d27c <sbrk_aligned>:
 800d27c:	b570      	push	{r4, r5, r6, lr}
 800d27e:	4e0f      	ldr	r6, [pc, #60]	@ (800d2bc <sbrk_aligned+0x40>)
 800d280:	460c      	mov	r4, r1
 800d282:	6831      	ldr	r1, [r6, #0]
 800d284:	4605      	mov	r5, r0
 800d286:	b911      	cbnz	r1, 800d28e <sbrk_aligned+0x12>
 800d288:	f000 fee2 	bl	800e050 <_sbrk_r>
 800d28c:	6030      	str	r0, [r6, #0]
 800d28e:	4621      	mov	r1, r4
 800d290:	4628      	mov	r0, r5
 800d292:	f000 fedd 	bl	800e050 <_sbrk_r>
 800d296:	1c43      	adds	r3, r0, #1
 800d298:	d103      	bne.n	800d2a2 <sbrk_aligned+0x26>
 800d29a:	f04f 34ff 	mov.w	r4, #4294967295
 800d29e:	4620      	mov	r0, r4
 800d2a0:	bd70      	pop	{r4, r5, r6, pc}
 800d2a2:	1cc4      	adds	r4, r0, #3
 800d2a4:	f024 0403 	bic.w	r4, r4, #3
 800d2a8:	42a0      	cmp	r0, r4
 800d2aa:	d0f8      	beq.n	800d29e <sbrk_aligned+0x22>
 800d2ac:	1a21      	subs	r1, r4, r0
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	f000 fece 	bl	800e050 <_sbrk_r>
 800d2b4:	3001      	adds	r0, #1
 800d2b6:	d1f2      	bne.n	800d29e <sbrk_aligned+0x22>
 800d2b8:	e7ef      	b.n	800d29a <sbrk_aligned+0x1e>
 800d2ba:	bf00      	nop
 800d2bc:	2000453c 	.word	0x2000453c

0800d2c0 <_malloc_r>:
 800d2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2c4:	1ccd      	adds	r5, r1, #3
 800d2c6:	f025 0503 	bic.w	r5, r5, #3
 800d2ca:	3508      	adds	r5, #8
 800d2cc:	2d0c      	cmp	r5, #12
 800d2ce:	bf38      	it	cc
 800d2d0:	250c      	movcc	r5, #12
 800d2d2:	2d00      	cmp	r5, #0
 800d2d4:	4606      	mov	r6, r0
 800d2d6:	db01      	blt.n	800d2dc <_malloc_r+0x1c>
 800d2d8:	42a9      	cmp	r1, r5
 800d2da:	d904      	bls.n	800d2e6 <_malloc_r+0x26>
 800d2dc:	230c      	movs	r3, #12
 800d2de:	6033      	str	r3, [r6, #0]
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d3bc <_malloc_r+0xfc>
 800d2ea:	f000 f869 	bl	800d3c0 <__malloc_lock>
 800d2ee:	f8d8 3000 	ldr.w	r3, [r8]
 800d2f2:	461c      	mov	r4, r3
 800d2f4:	bb44      	cbnz	r4, 800d348 <_malloc_r+0x88>
 800d2f6:	4629      	mov	r1, r5
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	f7ff ffbf 	bl	800d27c <sbrk_aligned>
 800d2fe:	1c43      	adds	r3, r0, #1
 800d300:	4604      	mov	r4, r0
 800d302:	d158      	bne.n	800d3b6 <_malloc_r+0xf6>
 800d304:	f8d8 4000 	ldr.w	r4, [r8]
 800d308:	4627      	mov	r7, r4
 800d30a:	2f00      	cmp	r7, #0
 800d30c:	d143      	bne.n	800d396 <_malloc_r+0xd6>
 800d30e:	2c00      	cmp	r4, #0
 800d310:	d04b      	beq.n	800d3aa <_malloc_r+0xea>
 800d312:	6823      	ldr	r3, [r4, #0]
 800d314:	4639      	mov	r1, r7
 800d316:	4630      	mov	r0, r6
 800d318:	eb04 0903 	add.w	r9, r4, r3
 800d31c:	f000 fe98 	bl	800e050 <_sbrk_r>
 800d320:	4581      	cmp	r9, r0
 800d322:	d142      	bne.n	800d3aa <_malloc_r+0xea>
 800d324:	6821      	ldr	r1, [r4, #0]
 800d326:	4630      	mov	r0, r6
 800d328:	1a6d      	subs	r5, r5, r1
 800d32a:	4629      	mov	r1, r5
 800d32c:	f7ff ffa6 	bl	800d27c <sbrk_aligned>
 800d330:	3001      	adds	r0, #1
 800d332:	d03a      	beq.n	800d3aa <_malloc_r+0xea>
 800d334:	6823      	ldr	r3, [r4, #0]
 800d336:	442b      	add	r3, r5
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	f8d8 3000 	ldr.w	r3, [r8]
 800d33e:	685a      	ldr	r2, [r3, #4]
 800d340:	bb62      	cbnz	r2, 800d39c <_malloc_r+0xdc>
 800d342:	f8c8 7000 	str.w	r7, [r8]
 800d346:	e00f      	b.n	800d368 <_malloc_r+0xa8>
 800d348:	6822      	ldr	r2, [r4, #0]
 800d34a:	1b52      	subs	r2, r2, r5
 800d34c:	d420      	bmi.n	800d390 <_malloc_r+0xd0>
 800d34e:	2a0b      	cmp	r2, #11
 800d350:	d917      	bls.n	800d382 <_malloc_r+0xc2>
 800d352:	1961      	adds	r1, r4, r5
 800d354:	42a3      	cmp	r3, r4
 800d356:	6025      	str	r5, [r4, #0]
 800d358:	bf18      	it	ne
 800d35a:	6059      	strne	r1, [r3, #4]
 800d35c:	6863      	ldr	r3, [r4, #4]
 800d35e:	bf08      	it	eq
 800d360:	f8c8 1000 	streq.w	r1, [r8]
 800d364:	5162      	str	r2, [r4, r5]
 800d366:	604b      	str	r3, [r1, #4]
 800d368:	4630      	mov	r0, r6
 800d36a:	f000 f82f 	bl	800d3cc <__malloc_unlock>
 800d36e:	f104 000b 	add.w	r0, r4, #11
 800d372:	1d23      	adds	r3, r4, #4
 800d374:	f020 0007 	bic.w	r0, r0, #7
 800d378:	1ac2      	subs	r2, r0, r3
 800d37a:	bf1c      	itt	ne
 800d37c:	1a1b      	subne	r3, r3, r0
 800d37e:	50a3      	strne	r3, [r4, r2]
 800d380:	e7af      	b.n	800d2e2 <_malloc_r+0x22>
 800d382:	6862      	ldr	r2, [r4, #4]
 800d384:	42a3      	cmp	r3, r4
 800d386:	bf0c      	ite	eq
 800d388:	f8c8 2000 	streq.w	r2, [r8]
 800d38c:	605a      	strne	r2, [r3, #4]
 800d38e:	e7eb      	b.n	800d368 <_malloc_r+0xa8>
 800d390:	4623      	mov	r3, r4
 800d392:	6864      	ldr	r4, [r4, #4]
 800d394:	e7ae      	b.n	800d2f4 <_malloc_r+0x34>
 800d396:	463c      	mov	r4, r7
 800d398:	687f      	ldr	r7, [r7, #4]
 800d39a:	e7b6      	b.n	800d30a <_malloc_r+0x4a>
 800d39c:	461a      	mov	r2, r3
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	42a3      	cmp	r3, r4
 800d3a2:	d1fb      	bne.n	800d39c <_malloc_r+0xdc>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	6053      	str	r3, [r2, #4]
 800d3a8:	e7de      	b.n	800d368 <_malloc_r+0xa8>
 800d3aa:	230c      	movs	r3, #12
 800d3ac:	4630      	mov	r0, r6
 800d3ae:	6033      	str	r3, [r6, #0]
 800d3b0:	f000 f80c 	bl	800d3cc <__malloc_unlock>
 800d3b4:	e794      	b.n	800d2e0 <_malloc_r+0x20>
 800d3b6:	6005      	str	r5, [r0, #0]
 800d3b8:	e7d6      	b.n	800d368 <_malloc_r+0xa8>
 800d3ba:	bf00      	nop
 800d3bc:	20004540 	.word	0x20004540

0800d3c0 <__malloc_lock>:
 800d3c0:	4801      	ldr	r0, [pc, #4]	@ (800d3c8 <__malloc_lock+0x8>)
 800d3c2:	f000 be80 	b.w	800e0c6 <__retarget_lock_acquire_recursive>
 800d3c6:	bf00      	nop
 800d3c8:	20004684 	.word	0x20004684

0800d3cc <__malloc_unlock>:
 800d3cc:	4801      	ldr	r0, [pc, #4]	@ (800d3d4 <__malloc_unlock+0x8>)
 800d3ce:	f000 be7b 	b.w	800e0c8 <__retarget_lock_release_recursive>
 800d3d2:	bf00      	nop
 800d3d4:	20004684 	.word	0x20004684

0800d3d8 <__cvt>:
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3de:	461d      	mov	r5, r3
 800d3e0:	bfbb      	ittet	lt
 800d3e2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800d3e6:	461d      	movlt	r5, r3
 800d3e8:	2300      	movge	r3, #0
 800d3ea:	232d      	movlt	r3, #45	@ 0x2d
 800d3ec:	b088      	sub	sp, #32
 800d3ee:	4614      	mov	r4, r2
 800d3f0:	bfb8      	it	lt
 800d3f2:	4614      	movlt	r4, r2
 800d3f4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d3f6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800d3f8:	7013      	strb	r3, [r2, #0]
 800d3fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d3fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800d400:	f023 0820 	bic.w	r8, r3, #32
 800d404:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d408:	d005      	beq.n	800d416 <__cvt+0x3e>
 800d40a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d40e:	d100      	bne.n	800d412 <__cvt+0x3a>
 800d410:	3601      	adds	r6, #1
 800d412:	2302      	movs	r3, #2
 800d414:	e000      	b.n	800d418 <__cvt+0x40>
 800d416:	2303      	movs	r3, #3
 800d418:	aa07      	add	r2, sp, #28
 800d41a:	9204      	str	r2, [sp, #16]
 800d41c:	aa06      	add	r2, sp, #24
 800d41e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d422:	e9cd 3600 	strd	r3, r6, [sp]
 800d426:	4622      	mov	r2, r4
 800d428:	462b      	mov	r3, r5
 800d42a:	f000 ff11 	bl	800e250 <_dtoa_r>
 800d42e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d432:	4607      	mov	r7, r0
 800d434:	d119      	bne.n	800d46a <__cvt+0x92>
 800d436:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d438:	07db      	lsls	r3, r3, #31
 800d43a:	d50e      	bpl.n	800d45a <__cvt+0x82>
 800d43c:	eb00 0906 	add.w	r9, r0, r6
 800d440:	2200      	movs	r2, #0
 800d442:	2300      	movs	r3, #0
 800d444:	4620      	mov	r0, r4
 800d446:	4629      	mov	r1, r5
 800d448:	f7f3 faf4 	bl	8000a34 <__aeabi_dcmpeq>
 800d44c:	b108      	cbz	r0, 800d452 <__cvt+0x7a>
 800d44e:	f8cd 901c 	str.w	r9, [sp, #28]
 800d452:	2230      	movs	r2, #48	@ 0x30
 800d454:	9b07      	ldr	r3, [sp, #28]
 800d456:	454b      	cmp	r3, r9
 800d458:	d31e      	bcc.n	800d498 <__cvt+0xc0>
 800d45a:	4638      	mov	r0, r7
 800d45c:	9b07      	ldr	r3, [sp, #28]
 800d45e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d460:	1bdb      	subs	r3, r3, r7
 800d462:	6013      	str	r3, [r2, #0]
 800d464:	b008      	add	sp, #32
 800d466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d46a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d46e:	eb00 0906 	add.w	r9, r0, r6
 800d472:	d1e5      	bne.n	800d440 <__cvt+0x68>
 800d474:	7803      	ldrb	r3, [r0, #0]
 800d476:	2b30      	cmp	r3, #48	@ 0x30
 800d478:	d10a      	bne.n	800d490 <__cvt+0xb8>
 800d47a:	2200      	movs	r2, #0
 800d47c:	2300      	movs	r3, #0
 800d47e:	4620      	mov	r0, r4
 800d480:	4629      	mov	r1, r5
 800d482:	f7f3 fad7 	bl	8000a34 <__aeabi_dcmpeq>
 800d486:	b918      	cbnz	r0, 800d490 <__cvt+0xb8>
 800d488:	f1c6 0601 	rsb	r6, r6, #1
 800d48c:	f8ca 6000 	str.w	r6, [sl]
 800d490:	f8da 3000 	ldr.w	r3, [sl]
 800d494:	4499      	add	r9, r3
 800d496:	e7d3      	b.n	800d440 <__cvt+0x68>
 800d498:	1c59      	adds	r1, r3, #1
 800d49a:	9107      	str	r1, [sp, #28]
 800d49c:	701a      	strb	r2, [r3, #0]
 800d49e:	e7d9      	b.n	800d454 <__cvt+0x7c>

0800d4a0 <__exponent>:
 800d4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4a2:	2900      	cmp	r1, #0
 800d4a4:	bfb6      	itet	lt
 800d4a6:	232d      	movlt	r3, #45	@ 0x2d
 800d4a8:	232b      	movge	r3, #43	@ 0x2b
 800d4aa:	4249      	neglt	r1, r1
 800d4ac:	2909      	cmp	r1, #9
 800d4ae:	7002      	strb	r2, [r0, #0]
 800d4b0:	7043      	strb	r3, [r0, #1]
 800d4b2:	dd29      	ble.n	800d508 <__exponent+0x68>
 800d4b4:	f10d 0307 	add.w	r3, sp, #7
 800d4b8:	461d      	mov	r5, r3
 800d4ba:	270a      	movs	r7, #10
 800d4bc:	fbb1 f6f7 	udiv	r6, r1, r7
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	fb07 1416 	mls	r4, r7, r6, r1
 800d4c6:	3430      	adds	r4, #48	@ 0x30
 800d4c8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d4cc:	460c      	mov	r4, r1
 800d4ce:	2c63      	cmp	r4, #99	@ 0x63
 800d4d0:	4631      	mov	r1, r6
 800d4d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d4d6:	dcf1      	bgt.n	800d4bc <__exponent+0x1c>
 800d4d8:	3130      	adds	r1, #48	@ 0x30
 800d4da:	1e94      	subs	r4, r2, #2
 800d4dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d4e0:	4623      	mov	r3, r4
 800d4e2:	1c41      	adds	r1, r0, #1
 800d4e4:	42ab      	cmp	r3, r5
 800d4e6:	d30a      	bcc.n	800d4fe <__exponent+0x5e>
 800d4e8:	f10d 0309 	add.w	r3, sp, #9
 800d4ec:	1a9b      	subs	r3, r3, r2
 800d4ee:	42ac      	cmp	r4, r5
 800d4f0:	bf88      	it	hi
 800d4f2:	2300      	movhi	r3, #0
 800d4f4:	3302      	adds	r3, #2
 800d4f6:	4403      	add	r3, r0
 800d4f8:	1a18      	subs	r0, r3, r0
 800d4fa:	b003      	add	sp, #12
 800d4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4fe:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d502:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d506:	e7ed      	b.n	800d4e4 <__exponent+0x44>
 800d508:	2330      	movs	r3, #48	@ 0x30
 800d50a:	3130      	adds	r1, #48	@ 0x30
 800d50c:	7083      	strb	r3, [r0, #2]
 800d50e:	70c1      	strb	r1, [r0, #3]
 800d510:	1d03      	adds	r3, r0, #4
 800d512:	e7f1      	b.n	800d4f8 <__exponent+0x58>

0800d514 <_printf_float>:
 800d514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d518:	b091      	sub	sp, #68	@ 0x44
 800d51a:	460c      	mov	r4, r1
 800d51c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800d520:	4616      	mov	r6, r2
 800d522:	461f      	mov	r7, r3
 800d524:	4605      	mov	r5, r0
 800d526:	f000 fd05 	bl	800df34 <_localeconv_r>
 800d52a:	6803      	ldr	r3, [r0, #0]
 800d52c:	4618      	mov	r0, r3
 800d52e:	9308      	str	r3, [sp, #32]
 800d530:	f7f2 fe54 	bl	80001dc <strlen>
 800d534:	2300      	movs	r3, #0
 800d536:	930e      	str	r3, [sp, #56]	@ 0x38
 800d538:	f8d8 3000 	ldr.w	r3, [r8]
 800d53c:	9009      	str	r0, [sp, #36]	@ 0x24
 800d53e:	3307      	adds	r3, #7
 800d540:	f023 0307 	bic.w	r3, r3, #7
 800d544:	f103 0208 	add.w	r2, r3, #8
 800d548:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d54c:	f8d4 b000 	ldr.w	fp, [r4]
 800d550:	f8c8 2000 	str.w	r2, [r8]
 800d554:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d558:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d55c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d55e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d562:	f04f 32ff 	mov.w	r2, #4294967295
 800d566:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d56a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d56e:	4b9c      	ldr	r3, [pc, #624]	@ (800d7e0 <_printf_float+0x2cc>)
 800d570:	f7f3 fa92 	bl	8000a98 <__aeabi_dcmpun>
 800d574:	bb70      	cbnz	r0, 800d5d4 <_printf_float+0xc0>
 800d576:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d57a:	f04f 32ff 	mov.w	r2, #4294967295
 800d57e:	4b98      	ldr	r3, [pc, #608]	@ (800d7e0 <_printf_float+0x2cc>)
 800d580:	f7f3 fa6c 	bl	8000a5c <__aeabi_dcmple>
 800d584:	bb30      	cbnz	r0, 800d5d4 <_printf_float+0xc0>
 800d586:	2200      	movs	r2, #0
 800d588:	2300      	movs	r3, #0
 800d58a:	4640      	mov	r0, r8
 800d58c:	4649      	mov	r1, r9
 800d58e:	f7f3 fa5b 	bl	8000a48 <__aeabi_dcmplt>
 800d592:	b110      	cbz	r0, 800d59a <_printf_float+0x86>
 800d594:	232d      	movs	r3, #45	@ 0x2d
 800d596:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d59a:	4a92      	ldr	r2, [pc, #584]	@ (800d7e4 <_printf_float+0x2d0>)
 800d59c:	4b92      	ldr	r3, [pc, #584]	@ (800d7e8 <_printf_float+0x2d4>)
 800d59e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d5a2:	bf94      	ite	ls
 800d5a4:	4690      	movls	r8, r2
 800d5a6:	4698      	movhi	r8, r3
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	f04f 0900 	mov.w	r9, #0
 800d5ae:	6123      	str	r3, [r4, #16]
 800d5b0:	f02b 0304 	bic.w	r3, fp, #4
 800d5b4:	6023      	str	r3, [r4, #0]
 800d5b6:	4633      	mov	r3, r6
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	9700      	str	r7, [sp, #0]
 800d5be:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d5c0:	f000 f9d4 	bl	800d96c <_printf_common>
 800d5c4:	3001      	adds	r0, #1
 800d5c6:	f040 8090 	bne.w	800d6ea <_printf_float+0x1d6>
 800d5ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ce:	b011      	add	sp, #68	@ 0x44
 800d5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5d4:	4642      	mov	r2, r8
 800d5d6:	464b      	mov	r3, r9
 800d5d8:	4640      	mov	r0, r8
 800d5da:	4649      	mov	r1, r9
 800d5dc:	f7f3 fa5c 	bl	8000a98 <__aeabi_dcmpun>
 800d5e0:	b148      	cbz	r0, 800d5f6 <_printf_float+0xe2>
 800d5e2:	464b      	mov	r3, r9
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	bfb8      	it	lt
 800d5e8:	232d      	movlt	r3, #45	@ 0x2d
 800d5ea:	4a80      	ldr	r2, [pc, #512]	@ (800d7ec <_printf_float+0x2d8>)
 800d5ec:	bfb8      	it	lt
 800d5ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d5f2:	4b7f      	ldr	r3, [pc, #508]	@ (800d7f0 <_printf_float+0x2dc>)
 800d5f4:	e7d3      	b.n	800d59e <_printf_float+0x8a>
 800d5f6:	6863      	ldr	r3, [r4, #4]
 800d5f8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800d5fc:	1c5a      	adds	r2, r3, #1
 800d5fe:	d13f      	bne.n	800d680 <_printf_float+0x16c>
 800d600:	2306      	movs	r3, #6
 800d602:	6063      	str	r3, [r4, #4]
 800d604:	2200      	movs	r2, #0
 800d606:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800d60a:	6023      	str	r3, [r4, #0]
 800d60c:	9206      	str	r2, [sp, #24]
 800d60e:	aa0e      	add	r2, sp, #56	@ 0x38
 800d610:	e9cd a204 	strd	sl, r2, [sp, #16]
 800d614:	aa0d      	add	r2, sp, #52	@ 0x34
 800d616:	9203      	str	r2, [sp, #12]
 800d618:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800d61c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d620:	6863      	ldr	r3, [r4, #4]
 800d622:	4642      	mov	r2, r8
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	4628      	mov	r0, r5
 800d628:	464b      	mov	r3, r9
 800d62a:	910a      	str	r1, [sp, #40]	@ 0x28
 800d62c:	f7ff fed4 	bl	800d3d8 <__cvt>
 800d630:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d632:	4680      	mov	r8, r0
 800d634:	2947      	cmp	r1, #71	@ 0x47
 800d636:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d638:	d128      	bne.n	800d68c <_printf_float+0x178>
 800d63a:	1cc8      	adds	r0, r1, #3
 800d63c:	db02      	blt.n	800d644 <_printf_float+0x130>
 800d63e:	6863      	ldr	r3, [r4, #4]
 800d640:	4299      	cmp	r1, r3
 800d642:	dd40      	ble.n	800d6c6 <_printf_float+0x1b2>
 800d644:	f1aa 0a02 	sub.w	sl, sl, #2
 800d648:	fa5f fa8a 	uxtb.w	sl, sl
 800d64c:	4652      	mov	r2, sl
 800d64e:	3901      	subs	r1, #1
 800d650:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d654:	910d      	str	r1, [sp, #52]	@ 0x34
 800d656:	f7ff ff23 	bl	800d4a0 <__exponent>
 800d65a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d65c:	4681      	mov	r9, r0
 800d65e:	1813      	adds	r3, r2, r0
 800d660:	2a01      	cmp	r2, #1
 800d662:	6123      	str	r3, [r4, #16]
 800d664:	dc02      	bgt.n	800d66c <_printf_float+0x158>
 800d666:	6822      	ldr	r2, [r4, #0]
 800d668:	07d2      	lsls	r2, r2, #31
 800d66a:	d501      	bpl.n	800d670 <_printf_float+0x15c>
 800d66c:	3301      	adds	r3, #1
 800d66e:	6123      	str	r3, [r4, #16]
 800d670:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800d674:	2b00      	cmp	r3, #0
 800d676:	d09e      	beq.n	800d5b6 <_printf_float+0xa2>
 800d678:	232d      	movs	r3, #45	@ 0x2d
 800d67a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d67e:	e79a      	b.n	800d5b6 <_printf_float+0xa2>
 800d680:	2947      	cmp	r1, #71	@ 0x47
 800d682:	d1bf      	bne.n	800d604 <_printf_float+0xf0>
 800d684:	2b00      	cmp	r3, #0
 800d686:	d1bd      	bne.n	800d604 <_printf_float+0xf0>
 800d688:	2301      	movs	r3, #1
 800d68a:	e7ba      	b.n	800d602 <_printf_float+0xee>
 800d68c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d690:	d9dc      	bls.n	800d64c <_printf_float+0x138>
 800d692:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d696:	d118      	bne.n	800d6ca <_printf_float+0x1b6>
 800d698:	2900      	cmp	r1, #0
 800d69a:	6863      	ldr	r3, [r4, #4]
 800d69c:	dd0b      	ble.n	800d6b6 <_printf_float+0x1a2>
 800d69e:	6121      	str	r1, [r4, #16]
 800d6a0:	b913      	cbnz	r3, 800d6a8 <_printf_float+0x194>
 800d6a2:	6822      	ldr	r2, [r4, #0]
 800d6a4:	07d0      	lsls	r0, r2, #31
 800d6a6:	d502      	bpl.n	800d6ae <_printf_float+0x19a>
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	440b      	add	r3, r1
 800d6ac:	6123      	str	r3, [r4, #16]
 800d6ae:	f04f 0900 	mov.w	r9, #0
 800d6b2:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d6b4:	e7dc      	b.n	800d670 <_printf_float+0x15c>
 800d6b6:	b913      	cbnz	r3, 800d6be <_printf_float+0x1aa>
 800d6b8:	6822      	ldr	r2, [r4, #0]
 800d6ba:	07d2      	lsls	r2, r2, #31
 800d6bc:	d501      	bpl.n	800d6c2 <_printf_float+0x1ae>
 800d6be:	3302      	adds	r3, #2
 800d6c0:	e7f4      	b.n	800d6ac <_printf_float+0x198>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e7f2      	b.n	800d6ac <_printf_float+0x198>
 800d6c6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d6ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6cc:	4299      	cmp	r1, r3
 800d6ce:	db05      	blt.n	800d6dc <_printf_float+0x1c8>
 800d6d0:	6823      	ldr	r3, [r4, #0]
 800d6d2:	6121      	str	r1, [r4, #16]
 800d6d4:	07d8      	lsls	r0, r3, #31
 800d6d6:	d5ea      	bpl.n	800d6ae <_printf_float+0x19a>
 800d6d8:	1c4b      	adds	r3, r1, #1
 800d6da:	e7e7      	b.n	800d6ac <_printf_float+0x198>
 800d6dc:	2900      	cmp	r1, #0
 800d6de:	bfcc      	ite	gt
 800d6e0:	2201      	movgt	r2, #1
 800d6e2:	f1c1 0202 	rsble	r2, r1, #2
 800d6e6:	4413      	add	r3, r2
 800d6e8:	e7e0      	b.n	800d6ac <_printf_float+0x198>
 800d6ea:	6823      	ldr	r3, [r4, #0]
 800d6ec:	055a      	lsls	r2, r3, #21
 800d6ee:	d407      	bmi.n	800d700 <_printf_float+0x1ec>
 800d6f0:	6923      	ldr	r3, [r4, #16]
 800d6f2:	4642      	mov	r2, r8
 800d6f4:	4631      	mov	r1, r6
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	47b8      	blx	r7
 800d6fa:	3001      	adds	r0, #1
 800d6fc:	d12b      	bne.n	800d756 <_printf_float+0x242>
 800d6fe:	e764      	b.n	800d5ca <_printf_float+0xb6>
 800d700:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d704:	f240 80dc 	bls.w	800d8c0 <_printf_float+0x3ac>
 800d708:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d70c:	2200      	movs	r2, #0
 800d70e:	2300      	movs	r3, #0
 800d710:	f7f3 f990 	bl	8000a34 <__aeabi_dcmpeq>
 800d714:	2800      	cmp	r0, #0
 800d716:	d033      	beq.n	800d780 <_printf_float+0x26c>
 800d718:	2301      	movs	r3, #1
 800d71a:	4631      	mov	r1, r6
 800d71c:	4628      	mov	r0, r5
 800d71e:	4a35      	ldr	r2, [pc, #212]	@ (800d7f4 <_printf_float+0x2e0>)
 800d720:	47b8      	blx	r7
 800d722:	3001      	adds	r0, #1
 800d724:	f43f af51 	beq.w	800d5ca <_printf_float+0xb6>
 800d728:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800d72c:	4543      	cmp	r3, r8
 800d72e:	db02      	blt.n	800d736 <_printf_float+0x222>
 800d730:	6823      	ldr	r3, [r4, #0]
 800d732:	07d8      	lsls	r0, r3, #31
 800d734:	d50f      	bpl.n	800d756 <_printf_float+0x242>
 800d736:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d73a:	4631      	mov	r1, r6
 800d73c:	4628      	mov	r0, r5
 800d73e:	47b8      	blx	r7
 800d740:	3001      	adds	r0, #1
 800d742:	f43f af42 	beq.w	800d5ca <_printf_float+0xb6>
 800d746:	f04f 0900 	mov.w	r9, #0
 800d74a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d74e:	f104 0a1a 	add.w	sl, r4, #26
 800d752:	45c8      	cmp	r8, r9
 800d754:	dc09      	bgt.n	800d76a <_printf_float+0x256>
 800d756:	6823      	ldr	r3, [r4, #0]
 800d758:	079b      	lsls	r3, r3, #30
 800d75a:	f100 8102 	bmi.w	800d962 <_printf_float+0x44e>
 800d75e:	68e0      	ldr	r0, [r4, #12]
 800d760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d762:	4298      	cmp	r0, r3
 800d764:	bfb8      	it	lt
 800d766:	4618      	movlt	r0, r3
 800d768:	e731      	b.n	800d5ce <_printf_float+0xba>
 800d76a:	2301      	movs	r3, #1
 800d76c:	4652      	mov	r2, sl
 800d76e:	4631      	mov	r1, r6
 800d770:	4628      	mov	r0, r5
 800d772:	47b8      	blx	r7
 800d774:	3001      	adds	r0, #1
 800d776:	f43f af28 	beq.w	800d5ca <_printf_float+0xb6>
 800d77a:	f109 0901 	add.w	r9, r9, #1
 800d77e:	e7e8      	b.n	800d752 <_printf_float+0x23e>
 800d780:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d782:	2b00      	cmp	r3, #0
 800d784:	dc38      	bgt.n	800d7f8 <_printf_float+0x2e4>
 800d786:	2301      	movs	r3, #1
 800d788:	4631      	mov	r1, r6
 800d78a:	4628      	mov	r0, r5
 800d78c:	4a19      	ldr	r2, [pc, #100]	@ (800d7f4 <_printf_float+0x2e0>)
 800d78e:	47b8      	blx	r7
 800d790:	3001      	adds	r0, #1
 800d792:	f43f af1a 	beq.w	800d5ca <_printf_float+0xb6>
 800d796:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800d79a:	ea59 0303 	orrs.w	r3, r9, r3
 800d79e:	d102      	bne.n	800d7a6 <_printf_float+0x292>
 800d7a0:	6823      	ldr	r3, [r4, #0]
 800d7a2:	07d9      	lsls	r1, r3, #31
 800d7a4:	d5d7      	bpl.n	800d756 <_printf_float+0x242>
 800d7a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d7aa:	4631      	mov	r1, r6
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	47b8      	blx	r7
 800d7b0:	3001      	adds	r0, #1
 800d7b2:	f43f af0a 	beq.w	800d5ca <_printf_float+0xb6>
 800d7b6:	f04f 0a00 	mov.w	sl, #0
 800d7ba:	f104 0b1a 	add.w	fp, r4, #26
 800d7be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7c0:	425b      	negs	r3, r3
 800d7c2:	4553      	cmp	r3, sl
 800d7c4:	dc01      	bgt.n	800d7ca <_printf_float+0x2b6>
 800d7c6:	464b      	mov	r3, r9
 800d7c8:	e793      	b.n	800d6f2 <_printf_float+0x1de>
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	465a      	mov	r2, fp
 800d7ce:	4631      	mov	r1, r6
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	47b8      	blx	r7
 800d7d4:	3001      	adds	r0, #1
 800d7d6:	f43f aef8 	beq.w	800d5ca <_printf_float+0xb6>
 800d7da:	f10a 0a01 	add.w	sl, sl, #1
 800d7de:	e7ee      	b.n	800d7be <_printf_float+0x2aa>
 800d7e0:	7fefffff 	.word	0x7fefffff
 800d7e4:	08010334 	.word	0x08010334
 800d7e8:	08010338 	.word	0x08010338
 800d7ec:	0801033c 	.word	0x0801033c
 800d7f0:	08010340 	.word	0x08010340
 800d7f4:	08010344 	.word	0x08010344
 800d7f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d7fa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800d7fe:	4553      	cmp	r3, sl
 800d800:	bfa8      	it	ge
 800d802:	4653      	movge	r3, sl
 800d804:	2b00      	cmp	r3, #0
 800d806:	4699      	mov	r9, r3
 800d808:	dc36      	bgt.n	800d878 <_printf_float+0x364>
 800d80a:	f04f 0b00 	mov.w	fp, #0
 800d80e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d812:	f104 021a 	add.w	r2, r4, #26
 800d816:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d818:	930a      	str	r3, [sp, #40]	@ 0x28
 800d81a:	eba3 0309 	sub.w	r3, r3, r9
 800d81e:	455b      	cmp	r3, fp
 800d820:	dc31      	bgt.n	800d886 <_printf_float+0x372>
 800d822:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d824:	459a      	cmp	sl, r3
 800d826:	dc3a      	bgt.n	800d89e <_printf_float+0x38a>
 800d828:	6823      	ldr	r3, [r4, #0]
 800d82a:	07da      	lsls	r2, r3, #31
 800d82c:	d437      	bmi.n	800d89e <_printf_float+0x38a>
 800d82e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d830:	ebaa 0903 	sub.w	r9, sl, r3
 800d834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d836:	ebaa 0303 	sub.w	r3, sl, r3
 800d83a:	4599      	cmp	r9, r3
 800d83c:	bfa8      	it	ge
 800d83e:	4699      	movge	r9, r3
 800d840:	f1b9 0f00 	cmp.w	r9, #0
 800d844:	dc33      	bgt.n	800d8ae <_printf_float+0x39a>
 800d846:	f04f 0800 	mov.w	r8, #0
 800d84a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d84e:	f104 0b1a 	add.w	fp, r4, #26
 800d852:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d854:	ebaa 0303 	sub.w	r3, sl, r3
 800d858:	eba3 0309 	sub.w	r3, r3, r9
 800d85c:	4543      	cmp	r3, r8
 800d85e:	f77f af7a 	ble.w	800d756 <_printf_float+0x242>
 800d862:	2301      	movs	r3, #1
 800d864:	465a      	mov	r2, fp
 800d866:	4631      	mov	r1, r6
 800d868:	4628      	mov	r0, r5
 800d86a:	47b8      	blx	r7
 800d86c:	3001      	adds	r0, #1
 800d86e:	f43f aeac 	beq.w	800d5ca <_printf_float+0xb6>
 800d872:	f108 0801 	add.w	r8, r8, #1
 800d876:	e7ec      	b.n	800d852 <_printf_float+0x33e>
 800d878:	4642      	mov	r2, r8
 800d87a:	4631      	mov	r1, r6
 800d87c:	4628      	mov	r0, r5
 800d87e:	47b8      	blx	r7
 800d880:	3001      	adds	r0, #1
 800d882:	d1c2      	bne.n	800d80a <_printf_float+0x2f6>
 800d884:	e6a1      	b.n	800d5ca <_printf_float+0xb6>
 800d886:	2301      	movs	r3, #1
 800d888:	4631      	mov	r1, r6
 800d88a:	4628      	mov	r0, r5
 800d88c:	920a      	str	r2, [sp, #40]	@ 0x28
 800d88e:	47b8      	blx	r7
 800d890:	3001      	adds	r0, #1
 800d892:	f43f ae9a 	beq.w	800d5ca <_printf_float+0xb6>
 800d896:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d898:	f10b 0b01 	add.w	fp, fp, #1
 800d89c:	e7bb      	b.n	800d816 <_printf_float+0x302>
 800d89e:	4631      	mov	r1, r6
 800d8a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	47b8      	blx	r7
 800d8a8:	3001      	adds	r0, #1
 800d8aa:	d1c0      	bne.n	800d82e <_printf_float+0x31a>
 800d8ac:	e68d      	b.n	800d5ca <_printf_float+0xb6>
 800d8ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d8b0:	464b      	mov	r3, r9
 800d8b2:	4631      	mov	r1, r6
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	4442      	add	r2, r8
 800d8b8:	47b8      	blx	r7
 800d8ba:	3001      	adds	r0, #1
 800d8bc:	d1c3      	bne.n	800d846 <_printf_float+0x332>
 800d8be:	e684      	b.n	800d5ca <_printf_float+0xb6>
 800d8c0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800d8c4:	f1ba 0f01 	cmp.w	sl, #1
 800d8c8:	dc01      	bgt.n	800d8ce <_printf_float+0x3ba>
 800d8ca:	07db      	lsls	r3, r3, #31
 800d8cc:	d536      	bpl.n	800d93c <_printf_float+0x428>
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	4642      	mov	r2, r8
 800d8d2:	4631      	mov	r1, r6
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	47b8      	blx	r7
 800d8d8:	3001      	adds	r0, #1
 800d8da:	f43f ae76 	beq.w	800d5ca <_printf_float+0xb6>
 800d8de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d8e2:	4631      	mov	r1, r6
 800d8e4:	4628      	mov	r0, r5
 800d8e6:	47b8      	blx	r7
 800d8e8:	3001      	adds	r0, #1
 800d8ea:	f43f ae6e 	beq.w	800d5ca <_printf_float+0xb6>
 800d8ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d8fa:	f7f3 f89b 	bl	8000a34 <__aeabi_dcmpeq>
 800d8fe:	b9c0      	cbnz	r0, 800d932 <_printf_float+0x41e>
 800d900:	4653      	mov	r3, sl
 800d902:	f108 0201 	add.w	r2, r8, #1
 800d906:	4631      	mov	r1, r6
 800d908:	4628      	mov	r0, r5
 800d90a:	47b8      	blx	r7
 800d90c:	3001      	adds	r0, #1
 800d90e:	d10c      	bne.n	800d92a <_printf_float+0x416>
 800d910:	e65b      	b.n	800d5ca <_printf_float+0xb6>
 800d912:	2301      	movs	r3, #1
 800d914:	465a      	mov	r2, fp
 800d916:	4631      	mov	r1, r6
 800d918:	4628      	mov	r0, r5
 800d91a:	47b8      	blx	r7
 800d91c:	3001      	adds	r0, #1
 800d91e:	f43f ae54 	beq.w	800d5ca <_printf_float+0xb6>
 800d922:	f108 0801 	add.w	r8, r8, #1
 800d926:	45d0      	cmp	r8, sl
 800d928:	dbf3      	blt.n	800d912 <_printf_float+0x3fe>
 800d92a:	464b      	mov	r3, r9
 800d92c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d930:	e6e0      	b.n	800d6f4 <_printf_float+0x1e0>
 800d932:	f04f 0800 	mov.w	r8, #0
 800d936:	f104 0b1a 	add.w	fp, r4, #26
 800d93a:	e7f4      	b.n	800d926 <_printf_float+0x412>
 800d93c:	2301      	movs	r3, #1
 800d93e:	4642      	mov	r2, r8
 800d940:	e7e1      	b.n	800d906 <_printf_float+0x3f2>
 800d942:	2301      	movs	r3, #1
 800d944:	464a      	mov	r2, r9
 800d946:	4631      	mov	r1, r6
 800d948:	4628      	mov	r0, r5
 800d94a:	47b8      	blx	r7
 800d94c:	3001      	adds	r0, #1
 800d94e:	f43f ae3c 	beq.w	800d5ca <_printf_float+0xb6>
 800d952:	f108 0801 	add.w	r8, r8, #1
 800d956:	68e3      	ldr	r3, [r4, #12]
 800d958:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d95a:	1a5b      	subs	r3, r3, r1
 800d95c:	4543      	cmp	r3, r8
 800d95e:	dcf0      	bgt.n	800d942 <_printf_float+0x42e>
 800d960:	e6fd      	b.n	800d75e <_printf_float+0x24a>
 800d962:	f04f 0800 	mov.w	r8, #0
 800d966:	f104 0919 	add.w	r9, r4, #25
 800d96a:	e7f4      	b.n	800d956 <_printf_float+0x442>

0800d96c <_printf_common>:
 800d96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d970:	4616      	mov	r6, r2
 800d972:	4698      	mov	r8, r3
 800d974:	688a      	ldr	r2, [r1, #8]
 800d976:	690b      	ldr	r3, [r1, #16]
 800d978:	4607      	mov	r7, r0
 800d97a:	4293      	cmp	r3, r2
 800d97c:	bfb8      	it	lt
 800d97e:	4613      	movlt	r3, r2
 800d980:	6033      	str	r3, [r6, #0]
 800d982:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d986:	460c      	mov	r4, r1
 800d988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d98c:	b10a      	cbz	r2, 800d992 <_printf_common+0x26>
 800d98e:	3301      	adds	r3, #1
 800d990:	6033      	str	r3, [r6, #0]
 800d992:	6823      	ldr	r3, [r4, #0]
 800d994:	0699      	lsls	r1, r3, #26
 800d996:	bf42      	ittt	mi
 800d998:	6833      	ldrmi	r3, [r6, #0]
 800d99a:	3302      	addmi	r3, #2
 800d99c:	6033      	strmi	r3, [r6, #0]
 800d99e:	6825      	ldr	r5, [r4, #0]
 800d9a0:	f015 0506 	ands.w	r5, r5, #6
 800d9a4:	d106      	bne.n	800d9b4 <_printf_common+0x48>
 800d9a6:	f104 0a19 	add.w	sl, r4, #25
 800d9aa:	68e3      	ldr	r3, [r4, #12]
 800d9ac:	6832      	ldr	r2, [r6, #0]
 800d9ae:	1a9b      	subs	r3, r3, r2
 800d9b0:	42ab      	cmp	r3, r5
 800d9b2:	dc2b      	bgt.n	800da0c <_printf_common+0xa0>
 800d9b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d9b8:	6822      	ldr	r2, [r4, #0]
 800d9ba:	3b00      	subs	r3, #0
 800d9bc:	bf18      	it	ne
 800d9be:	2301      	movne	r3, #1
 800d9c0:	0692      	lsls	r2, r2, #26
 800d9c2:	d430      	bmi.n	800da26 <_printf_common+0xba>
 800d9c4:	4641      	mov	r1, r8
 800d9c6:	4638      	mov	r0, r7
 800d9c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d9cc:	47c8      	blx	r9
 800d9ce:	3001      	adds	r0, #1
 800d9d0:	d023      	beq.n	800da1a <_printf_common+0xae>
 800d9d2:	6823      	ldr	r3, [r4, #0]
 800d9d4:	6922      	ldr	r2, [r4, #16]
 800d9d6:	f003 0306 	and.w	r3, r3, #6
 800d9da:	2b04      	cmp	r3, #4
 800d9dc:	bf14      	ite	ne
 800d9de:	2500      	movne	r5, #0
 800d9e0:	6833      	ldreq	r3, [r6, #0]
 800d9e2:	f04f 0600 	mov.w	r6, #0
 800d9e6:	bf08      	it	eq
 800d9e8:	68e5      	ldreq	r5, [r4, #12]
 800d9ea:	f104 041a 	add.w	r4, r4, #26
 800d9ee:	bf08      	it	eq
 800d9f0:	1aed      	subeq	r5, r5, r3
 800d9f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d9f6:	bf08      	it	eq
 800d9f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	bfc4      	itt	gt
 800da00:	1a9b      	subgt	r3, r3, r2
 800da02:	18ed      	addgt	r5, r5, r3
 800da04:	42b5      	cmp	r5, r6
 800da06:	d11a      	bne.n	800da3e <_printf_common+0xd2>
 800da08:	2000      	movs	r0, #0
 800da0a:	e008      	b.n	800da1e <_printf_common+0xb2>
 800da0c:	2301      	movs	r3, #1
 800da0e:	4652      	mov	r2, sl
 800da10:	4641      	mov	r1, r8
 800da12:	4638      	mov	r0, r7
 800da14:	47c8      	blx	r9
 800da16:	3001      	adds	r0, #1
 800da18:	d103      	bne.n	800da22 <_printf_common+0xb6>
 800da1a:	f04f 30ff 	mov.w	r0, #4294967295
 800da1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da22:	3501      	adds	r5, #1
 800da24:	e7c1      	b.n	800d9aa <_printf_common+0x3e>
 800da26:	2030      	movs	r0, #48	@ 0x30
 800da28:	18e1      	adds	r1, r4, r3
 800da2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da2e:	1c5a      	adds	r2, r3, #1
 800da30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da34:	4422      	add	r2, r4
 800da36:	3302      	adds	r3, #2
 800da38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da3c:	e7c2      	b.n	800d9c4 <_printf_common+0x58>
 800da3e:	2301      	movs	r3, #1
 800da40:	4622      	mov	r2, r4
 800da42:	4641      	mov	r1, r8
 800da44:	4638      	mov	r0, r7
 800da46:	47c8      	blx	r9
 800da48:	3001      	adds	r0, #1
 800da4a:	d0e6      	beq.n	800da1a <_printf_common+0xae>
 800da4c:	3601      	adds	r6, #1
 800da4e:	e7d9      	b.n	800da04 <_printf_common+0x98>

0800da50 <_printf_i>:
 800da50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da54:	7e0f      	ldrb	r7, [r1, #24]
 800da56:	4691      	mov	r9, r2
 800da58:	2f78      	cmp	r7, #120	@ 0x78
 800da5a:	4680      	mov	r8, r0
 800da5c:	460c      	mov	r4, r1
 800da5e:	469a      	mov	sl, r3
 800da60:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da66:	d807      	bhi.n	800da78 <_printf_i+0x28>
 800da68:	2f62      	cmp	r7, #98	@ 0x62
 800da6a:	d80a      	bhi.n	800da82 <_printf_i+0x32>
 800da6c:	2f00      	cmp	r7, #0
 800da6e:	f000 80d3 	beq.w	800dc18 <_printf_i+0x1c8>
 800da72:	2f58      	cmp	r7, #88	@ 0x58
 800da74:	f000 80ba 	beq.w	800dbec <_printf_i+0x19c>
 800da78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800da80:	e03a      	b.n	800daf8 <_printf_i+0xa8>
 800da82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800da86:	2b15      	cmp	r3, #21
 800da88:	d8f6      	bhi.n	800da78 <_printf_i+0x28>
 800da8a:	a101      	add	r1, pc, #4	@ (adr r1, 800da90 <_printf_i+0x40>)
 800da8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da90:	0800dae9 	.word	0x0800dae9
 800da94:	0800dafd 	.word	0x0800dafd
 800da98:	0800da79 	.word	0x0800da79
 800da9c:	0800da79 	.word	0x0800da79
 800daa0:	0800da79 	.word	0x0800da79
 800daa4:	0800da79 	.word	0x0800da79
 800daa8:	0800dafd 	.word	0x0800dafd
 800daac:	0800da79 	.word	0x0800da79
 800dab0:	0800da79 	.word	0x0800da79
 800dab4:	0800da79 	.word	0x0800da79
 800dab8:	0800da79 	.word	0x0800da79
 800dabc:	0800dbff 	.word	0x0800dbff
 800dac0:	0800db27 	.word	0x0800db27
 800dac4:	0800dbb9 	.word	0x0800dbb9
 800dac8:	0800da79 	.word	0x0800da79
 800dacc:	0800da79 	.word	0x0800da79
 800dad0:	0800dc21 	.word	0x0800dc21
 800dad4:	0800da79 	.word	0x0800da79
 800dad8:	0800db27 	.word	0x0800db27
 800dadc:	0800da79 	.word	0x0800da79
 800dae0:	0800da79 	.word	0x0800da79
 800dae4:	0800dbc1 	.word	0x0800dbc1
 800dae8:	6833      	ldr	r3, [r6, #0]
 800daea:	1d1a      	adds	r2, r3, #4
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	6032      	str	r2, [r6, #0]
 800daf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800daf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800daf8:	2301      	movs	r3, #1
 800dafa:	e09e      	b.n	800dc3a <_printf_i+0x1ea>
 800dafc:	6833      	ldr	r3, [r6, #0]
 800dafe:	6820      	ldr	r0, [r4, #0]
 800db00:	1d19      	adds	r1, r3, #4
 800db02:	6031      	str	r1, [r6, #0]
 800db04:	0606      	lsls	r6, r0, #24
 800db06:	d501      	bpl.n	800db0c <_printf_i+0xbc>
 800db08:	681d      	ldr	r5, [r3, #0]
 800db0a:	e003      	b.n	800db14 <_printf_i+0xc4>
 800db0c:	0645      	lsls	r5, r0, #25
 800db0e:	d5fb      	bpl.n	800db08 <_printf_i+0xb8>
 800db10:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db14:	2d00      	cmp	r5, #0
 800db16:	da03      	bge.n	800db20 <_printf_i+0xd0>
 800db18:	232d      	movs	r3, #45	@ 0x2d
 800db1a:	426d      	negs	r5, r5
 800db1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db20:	230a      	movs	r3, #10
 800db22:	4859      	ldr	r0, [pc, #356]	@ (800dc88 <_printf_i+0x238>)
 800db24:	e011      	b.n	800db4a <_printf_i+0xfa>
 800db26:	6821      	ldr	r1, [r4, #0]
 800db28:	6833      	ldr	r3, [r6, #0]
 800db2a:	0608      	lsls	r0, r1, #24
 800db2c:	f853 5b04 	ldr.w	r5, [r3], #4
 800db30:	d402      	bmi.n	800db38 <_printf_i+0xe8>
 800db32:	0649      	lsls	r1, r1, #25
 800db34:	bf48      	it	mi
 800db36:	b2ad      	uxthmi	r5, r5
 800db38:	2f6f      	cmp	r7, #111	@ 0x6f
 800db3a:	6033      	str	r3, [r6, #0]
 800db3c:	bf14      	ite	ne
 800db3e:	230a      	movne	r3, #10
 800db40:	2308      	moveq	r3, #8
 800db42:	4851      	ldr	r0, [pc, #324]	@ (800dc88 <_printf_i+0x238>)
 800db44:	2100      	movs	r1, #0
 800db46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db4a:	6866      	ldr	r6, [r4, #4]
 800db4c:	2e00      	cmp	r6, #0
 800db4e:	bfa8      	it	ge
 800db50:	6821      	ldrge	r1, [r4, #0]
 800db52:	60a6      	str	r6, [r4, #8]
 800db54:	bfa4      	itt	ge
 800db56:	f021 0104 	bicge.w	r1, r1, #4
 800db5a:	6021      	strge	r1, [r4, #0]
 800db5c:	b90d      	cbnz	r5, 800db62 <_printf_i+0x112>
 800db5e:	2e00      	cmp	r6, #0
 800db60:	d04b      	beq.n	800dbfa <_printf_i+0x1aa>
 800db62:	4616      	mov	r6, r2
 800db64:	fbb5 f1f3 	udiv	r1, r5, r3
 800db68:	fb03 5711 	mls	r7, r3, r1, r5
 800db6c:	5dc7      	ldrb	r7, [r0, r7]
 800db6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db72:	462f      	mov	r7, r5
 800db74:	42bb      	cmp	r3, r7
 800db76:	460d      	mov	r5, r1
 800db78:	d9f4      	bls.n	800db64 <_printf_i+0x114>
 800db7a:	2b08      	cmp	r3, #8
 800db7c:	d10b      	bne.n	800db96 <_printf_i+0x146>
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	07df      	lsls	r7, r3, #31
 800db82:	d508      	bpl.n	800db96 <_printf_i+0x146>
 800db84:	6923      	ldr	r3, [r4, #16]
 800db86:	6861      	ldr	r1, [r4, #4]
 800db88:	4299      	cmp	r1, r3
 800db8a:	bfde      	ittt	le
 800db8c:	2330      	movle	r3, #48	@ 0x30
 800db8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db92:	f106 36ff 	addle.w	r6, r6, #4294967295
 800db96:	1b92      	subs	r2, r2, r6
 800db98:	6122      	str	r2, [r4, #16]
 800db9a:	464b      	mov	r3, r9
 800db9c:	4621      	mov	r1, r4
 800db9e:	4640      	mov	r0, r8
 800dba0:	f8cd a000 	str.w	sl, [sp]
 800dba4:	aa03      	add	r2, sp, #12
 800dba6:	f7ff fee1 	bl	800d96c <_printf_common>
 800dbaa:	3001      	adds	r0, #1
 800dbac:	d14a      	bne.n	800dc44 <_printf_i+0x1f4>
 800dbae:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb2:	b004      	add	sp, #16
 800dbb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbb8:	6823      	ldr	r3, [r4, #0]
 800dbba:	f043 0320 	orr.w	r3, r3, #32
 800dbbe:	6023      	str	r3, [r4, #0]
 800dbc0:	2778      	movs	r7, #120	@ 0x78
 800dbc2:	4832      	ldr	r0, [pc, #200]	@ (800dc8c <_printf_i+0x23c>)
 800dbc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dbc8:	6823      	ldr	r3, [r4, #0]
 800dbca:	6831      	ldr	r1, [r6, #0]
 800dbcc:	061f      	lsls	r7, r3, #24
 800dbce:	f851 5b04 	ldr.w	r5, [r1], #4
 800dbd2:	d402      	bmi.n	800dbda <_printf_i+0x18a>
 800dbd4:	065f      	lsls	r7, r3, #25
 800dbd6:	bf48      	it	mi
 800dbd8:	b2ad      	uxthmi	r5, r5
 800dbda:	6031      	str	r1, [r6, #0]
 800dbdc:	07d9      	lsls	r1, r3, #31
 800dbde:	bf44      	itt	mi
 800dbe0:	f043 0320 	orrmi.w	r3, r3, #32
 800dbe4:	6023      	strmi	r3, [r4, #0]
 800dbe6:	b11d      	cbz	r5, 800dbf0 <_printf_i+0x1a0>
 800dbe8:	2310      	movs	r3, #16
 800dbea:	e7ab      	b.n	800db44 <_printf_i+0xf4>
 800dbec:	4826      	ldr	r0, [pc, #152]	@ (800dc88 <_printf_i+0x238>)
 800dbee:	e7e9      	b.n	800dbc4 <_printf_i+0x174>
 800dbf0:	6823      	ldr	r3, [r4, #0]
 800dbf2:	f023 0320 	bic.w	r3, r3, #32
 800dbf6:	6023      	str	r3, [r4, #0]
 800dbf8:	e7f6      	b.n	800dbe8 <_printf_i+0x198>
 800dbfa:	4616      	mov	r6, r2
 800dbfc:	e7bd      	b.n	800db7a <_printf_i+0x12a>
 800dbfe:	6833      	ldr	r3, [r6, #0]
 800dc00:	6825      	ldr	r5, [r4, #0]
 800dc02:	1d18      	adds	r0, r3, #4
 800dc04:	6961      	ldr	r1, [r4, #20]
 800dc06:	6030      	str	r0, [r6, #0]
 800dc08:	062e      	lsls	r6, r5, #24
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	d501      	bpl.n	800dc12 <_printf_i+0x1c2>
 800dc0e:	6019      	str	r1, [r3, #0]
 800dc10:	e002      	b.n	800dc18 <_printf_i+0x1c8>
 800dc12:	0668      	lsls	r0, r5, #25
 800dc14:	d5fb      	bpl.n	800dc0e <_printf_i+0x1be>
 800dc16:	8019      	strh	r1, [r3, #0]
 800dc18:	2300      	movs	r3, #0
 800dc1a:	4616      	mov	r6, r2
 800dc1c:	6123      	str	r3, [r4, #16]
 800dc1e:	e7bc      	b.n	800db9a <_printf_i+0x14a>
 800dc20:	6833      	ldr	r3, [r6, #0]
 800dc22:	2100      	movs	r1, #0
 800dc24:	1d1a      	adds	r2, r3, #4
 800dc26:	6032      	str	r2, [r6, #0]
 800dc28:	681e      	ldr	r6, [r3, #0]
 800dc2a:	6862      	ldr	r2, [r4, #4]
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	f000 fa4c 	bl	800e0ca <memchr>
 800dc32:	b108      	cbz	r0, 800dc38 <_printf_i+0x1e8>
 800dc34:	1b80      	subs	r0, r0, r6
 800dc36:	6060      	str	r0, [r4, #4]
 800dc38:	6863      	ldr	r3, [r4, #4]
 800dc3a:	6123      	str	r3, [r4, #16]
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc42:	e7aa      	b.n	800db9a <_printf_i+0x14a>
 800dc44:	4632      	mov	r2, r6
 800dc46:	4649      	mov	r1, r9
 800dc48:	4640      	mov	r0, r8
 800dc4a:	6923      	ldr	r3, [r4, #16]
 800dc4c:	47d0      	blx	sl
 800dc4e:	3001      	adds	r0, #1
 800dc50:	d0ad      	beq.n	800dbae <_printf_i+0x15e>
 800dc52:	6823      	ldr	r3, [r4, #0]
 800dc54:	079b      	lsls	r3, r3, #30
 800dc56:	d413      	bmi.n	800dc80 <_printf_i+0x230>
 800dc58:	68e0      	ldr	r0, [r4, #12]
 800dc5a:	9b03      	ldr	r3, [sp, #12]
 800dc5c:	4298      	cmp	r0, r3
 800dc5e:	bfb8      	it	lt
 800dc60:	4618      	movlt	r0, r3
 800dc62:	e7a6      	b.n	800dbb2 <_printf_i+0x162>
 800dc64:	2301      	movs	r3, #1
 800dc66:	4632      	mov	r2, r6
 800dc68:	4649      	mov	r1, r9
 800dc6a:	4640      	mov	r0, r8
 800dc6c:	47d0      	blx	sl
 800dc6e:	3001      	adds	r0, #1
 800dc70:	d09d      	beq.n	800dbae <_printf_i+0x15e>
 800dc72:	3501      	adds	r5, #1
 800dc74:	68e3      	ldr	r3, [r4, #12]
 800dc76:	9903      	ldr	r1, [sp, #12]
 800dc78:	1a5b      	subs	r3, r3, r1
 800dc7a:	42ab      	cmp	r3, r5
 800dc7c:	dcf2      	bgt.n	800dc64 <_printf_i+0x214>
 800dc7e:	e7eb      	b.n	800dc58 <_printf_i+0x208>
 800dc80:	2500      	movs	r5, #0
 800dc82:	f104 0619 	add.w	r6, r4, #25
 800dc86:	e7f5      	b.n	800dc74 <_printf_i+0x224>
 800dc88:	08010346 	.word	0x08010346
 800dc8c:	08010357 	.word	0x08010357

0800dc90 <std>:
 800dc90:	2300      	movs	r3, #0
 800dc92:	b510      	push	{r4, lr}
 800dc94:	4604      	mov	r4, r0
 800dc96:	e9c0 3300 	strd	r3, r3, [r0]
 800dc9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc9e:	6083      	str	r3, [r0, #8]
 800dca0:	8181      	strh	r1, [r0, #12]
 800dca2:	6643      	str	r3, [r0, #100]	@ 0x64
 800dca4:	81c2      	strh	r2, [r0, #14]
 800dca6:	6183      	str	r3, [r0, #24]
 800dca8:	4619      	mov	r1, r3
 800dcaa:	2208      	movs	r2, #8
 800dcac:	305c      	adds	r0, #92	@ 0x5c
 800dcae:	f000 f938 	bl	800df22 <memset>
 800dcb2:	4b0d      	ldr	r3, [pc, #52]	@ (800dce8 <std+0x58>)
 800dcb4:	6224      	str	r4, [r4, #32]
 800dcb6:	6263      	str	r3, [r4, #36]	@ 0x24
 800dcb8:	4b0c      	ldr	r3, [pc, #48]	@ (800dcec <std+0x5c>)
 800dcba:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dcbc:	4b0c      	ldr	r3, [pc, #48]	@ (800dcf0 <std+0x60>)
 800dcbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dcc0:	4b0c      	ldr	r3, [pc, #48]	@ (800dcf4 <std+0x64>)
 800dcc2:	6323      	str	r3, [r4, #48]	@ 0x30
 800dcc4:	4b0c      	ldr	r3, [pc, #48]	@ (800dcf8 <std+0x68>)
 800dcc6:	429c      	cmp	r4, r3
 800dcc8:	d006      	beq.n	800dcd8 <std+0x48>
 800dcca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dcce:	4294      	cmp	r4, r2
 800dcd0:	d002      	beq.n	800dcd8 <std+0x48>
 800dcd2:	33d0      	adds	r3, #208	@ 0xd0
 800dcd4:	429c      	cmp	r4, r3
 800dcd6:	d105      	bne.n	800dce4 <std+0x54>
 800dcd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dcdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dce0:	f000 b9f0 	b.w	800e0c4 <__retarget_lock_init_recursive>
 800dce4:	bd10      	pop	{r4, pc}
 800dce6:	bf00      	nop
 800dce8:	0800de7d 	.word	0x0800de7d
 800dcec:	0800de9f 	.word	0x0800de9f
 800dcf0:	0800ded7 	.word	0x0800ded7
 800dcf4:	0800defb 	.word	0x0800defb
 800dcf8:	20004544 	.word	0x20004544

0800dcfc <stdio_exit_handler>:
 800dcfc:	4a02      	ldr	r2, [pc, #8]	@ (800dd08 <stdio_exit_handler+0xc>)
 800dcfe:	4903      	ldr	r1, [pc, #12]	@ (800dd0c <stdio_exit_handler+0x10>)
 800dd00:	4803      	ldr	r0, [pc, #12]	@ (800dd10 <stdio_exit_handler+0x14>)
 800dd02:	f000 b869 	b.w	800ddd8 <_fwalk_sglue>
 800dd06:	bf00      	nop
 800dd08:	20000024 	.word	0x20000024
 800dd0c:	0800f95d 	.word	0x0800f95d
 800dd10:	200001a0 	.word	0x200001a0

0800dd14 <cleanup_stdio>:
 800dd14:	6841      	ldr	r1, [r0, #4]
 800dd16:	4b0c      	ldr	r3, [pc, #48]	@ (800dd48 <cleanup_stdio+0x34>)
 800dd18:	b510      	push	{r4, lr}
 800dd1a:	4299      	cmp	r1, r3
 800dd1c:	4604      	mov	r4, r0
 800dd1e:	d001      	beq.n	800dd24 <cleanup_stdio+0x10>
 800dd20:	f001 fe1c 	bl	800f95c <_fflush_r>
 800dd24:	68a1      	ldr	r1, [r4, #8]
 800dd26:	4b09      	ldr	r3, [pc, #36]	@ (800dd4c <cleanup_stdio+0x38>)
 800dd28:	4299      	cmp	r1, r3
 800dd2a:	d002      	beq.n	800dd32 <cleanup_stdio+0x1e>
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	f001 fe15 	bl	800f95c <_fflush_r>
 800dd32:	68e1      	ldr	r1, [r4, #12]
 800dd34:	4b06      	ldr	r3, [pc, #24]	@ (800dd50 <cleanup_stdio+0x3c>)
 800dd36:	4299      	cmp	r1, r3
 800dd38:	d004      	beq.n	800dd44 <cleanup_stdio+0x30>
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd40:	f001 be0c 	b.w	800f95c <_fflush_r>
 800dd44:	bd10      	pop	{r4, pc}
 800dd46:	bf00      	nop
 800dd48:	20004544 	.word	0x20004544
 800dd4c:	200045ac 	.word	0x200045ac
 800dd50:	20004614 	.word	0x20004614

0800dd54 <global_stdio_init.part.0>:
 800dd54:	b510      	push	{r4, lr}
 800dd56:	4b0b      	ldr	r3, [pc, #44]	@ (800dd84 <global_stdio_init.part.0+0x30>)
 800dd58:	4c0b      	ldr	r4, [pc, #44]	@ (800dd88 <global_stdio_init.part.0+0x34>)
 800dd5a:	4a0c      	ldr	r2, [pc, #48]	@ (800dd8c <global_stdio_init.part.0+0x38>)
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	601a      	str	r2, [r3, #0]
 800dd60:	2104      	movs	r1, #4
 800dd62:	2200      	movs	r2, #0
 800dd64:	f7ff ff94 	bl	800dc90 <std>
 800dd68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	2109      	movs	r1, #9
 800dd70:	f7ff ff8e 	bl	800dc90 <std>
 800dd74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dd78:	2202      	movs	r2, #2
 800dd7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd7e:	2112      	movs	r1, #18
 800dd80:	f7ff bf86 	b.w	800dc90 <std>
 800dd84:	2000467c 	.word	0x2000467c
 800dd88:	20004544 	.word	0x20004544
 800dd8c:	0800dcfd 	.word	0x0800dcfd

0800dd90 <__sfp_lock_acquire>:
 800dd90:	4801      	ldr	r0, [pc, #4]	@ (800dd98 <__sfp_lock_acquire+0x8>)
 800dd92:	f000 b998 	b.w	800e0c6 <__retarget_lock_acquire_recursive>
 800dd96:	bf00      	nop
 800dd98:	20004685 	.word	0x20004685

0800dd9c <__sfp_lock_release>:
 800dd9c:	4801      	ldr	r0, [pc, #4]	@ (800dda4 <__sfp_lock_release+0x8>)
 800dd9e:	f000 b993 	b.w	800e0c8 <__retarget_lock_release_recursive>
 800dda2:	bf00      	nop
 800dda4:	20004685 	.word	0x20004685

0800dda8 <__sinit>:
 800dda8:	b510      	push	{r4, lr}
 800ddaa:	4604      	mov	r4, r0
 800ddac:	f7ff fff0 	bl	800dd90 <__sfp_lock_acquire>
 800ddb0:	6a23      	ldr	r3, [r4, #32]
 800ddb2:	b11b      	cbz	r3, 800ddbc <__sinit+0x14>
 800ddb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddb8:	f7ff bff0 	b.w	800dd9c <__sfp_lock_release>
 800ddbc:	4b04      	ldr	r3, [pc, #16]	@ (800ddd0 <__sinit+0x28>)
 800ddbe:	6223      	str	r3, [r4, #32]
 800ddc0:	4b04      	ldr	r3, [pc, #16]	@ (800ddd4 <__sinit+0x2c>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d1f5      	bne.n	800ddb4 <__sinit+0xc>
 800ddc8:	f7ff ffc4 	bl	800dd54 <global_stdio_init.part.0>
 800ddcc:	e7f2      	b.n	800ddb4 <__sinit+0xc>
 800ddce:	bf00      	nop
 800ddd0:	0800dd15 	.word	0x0800dd15
 800ddd4:	2000467c 	.word	0x2000467c

0800ddd8 <_fwalk_sglue>:
 800ddd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dddc:	4607      	mov	r7, r0
 800ddde:	4688      	mov	r8, r1
 800dde0:	4614      	mov	r4, r2
 800dde2:	2600      	movs	r6, #0
 800dde4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dde8:	f1b9 0901 	subs.w	r9, r9, #1
 800ddec:	d505      	bpl.n	800ddfa <_fwalk_sglue+0x22>
 800ddee:	6824      	ldr	r4, [r4, #0]
 800ddf0:	2c00      	cmp	r4, #0
 800ddf2:	d1f7      	bne.n	800dde4 <_fwalk_sglue+0xc>
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddfa:	89ab      	ldrh	r3, [r5, #12]
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d907      	bls.n	800de10 <_fwalk_sglue+0x38>
 800de00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de04:	3301      	adds	r3, #1
 800de06:	d003      	beq.n	800de10 <_fwalk_sglue+0x38>
 800de08:	4629      	mov	r1, r5
 800de0a:	4638      	mov	r0, r7
 800de0c:	47c0      	blx	r8
 800de0e:	4306      	orrs	r6, r0
 800de10:	3568      	adds	r5, #104	@ 0x68
 800de12:	e7e9      	b.n	800dde8 <_fwalk_sglue+0x10>

0800de14 <sniprintf>:
 800de14:	b40c      	push	{r2, r3}
 800de16:	b530      	push	{r4, r5, lr}
 800de18:	4b17      	ldr	r3, [pc, #92]	@ (800de78 <sniprintf+0x64>)
 800de1a:	1e0c      	subs	r4, r1, #0
 800de1c:	681d      	ldr	r5, [r3, #0]
 800de1e:	b09d      	sub	sp, #116	@ 0x74
 800de20:	da08      	bge.n	800de34 <sniprintf+0x20>
 800de22:	238b      	movs	r3, #139	@ 0x8b
 800de24:	f04f 30ff 	mov.w	r0, #4294967295
 800de28:	602b      	str	r3, [r5, #0]
 800de2a:	b01d      	add	sp, #116	@ 0x74
 800de2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de30:	b002      	add	sp, #8
 800de32:	4770      	bx	lr
 800de34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800de38:	f8ad 3014 	strh.w	r3, [sp, #20]
 800de3c:	bf0c      	ite	eq
 800de3e:	4623      	moveq	r3, r4
 800de40:	f104 33ff 	addne.w	r3, r4, #4294967295
 800de44:	9304      	str	r3, [sp, #16]
 800de46:	9307      	str	r3, [sp, #28]
 800de48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de4c:	9002      	str	r0, [sp, #8]
 800de4e:	9006      	str	r0, [sp, #24]
 800de50:	f8ad 3016 	strh.w	r3, [sp, #22]
 800de54:	4628      	mov	r0, r5
 800de56:	ab21      	add	r3, sp, #132	@ 0x84
 800de58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800de5a:	a902      	add	r1, sp, #8
 800de5c:	9301      	str	r3, [sp, #4]
 800de5e:	f001 fc01 	bl	800f664 <_svfiprintf_r>
 800de62:	1c43      	adds	r3, r0, #1
 800de64:	bfbc      	itt	lt
 800de66:	238b      	movlt	r3, #139	@ 0x8b
 800de68:	602b      	strlt	r3, [r5, #0]
 800de6a:	2c00      	cmp	r4, #0
 800de6c:	d0dd      	beq.n	800de2a <sniprintf+0x16>
 800de6e:	2200      	movs	r2, #0
 800de70:	9b02      	ldr	r3, [sp, #8]
 800de72:	701a      	strb	r2, [r3, #0]
 800de74:	e7d9      	b.n	800de2a <sniprintf+0x16>
 800de76:	bf00      	nop
 800de78:	2000019c 	.word	0x2000019c

0800de7c <__sread>:
 800de7c:	b510      	push	{r4, lr}
 800de7e:	460c      	mov	r4, r1
 800de80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de84:	f000 f8d2 	bl	800e02c <_read_r>
 800de88:	2800      	cmp	r0, #0
 800de8a:	bfab      	itete	ge
 800de8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800de8e:	89a3      	ldrhlt	r3, [r4, #12]
 800de90:	181b      	addge	r3, r3, r0
 800de92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800de96:	bfac      	ite	ge
 800de98:	6563      	strge	r3, [r4, #84]	@ 0x54
 800de9a:	81a3      	strhlt	r3, [r4, #12]
 800de9c:	bd10      	pop	{r4, pc}

0800de9e <__swrite>:
 800de9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dea2:	461f      	mov	r7, r3
 800dea4:	898b      	ldrh	r3, [r1, #12]
 800dea6:	4605      	mov	r5, r0
 800dea8:	05db      	lsls	r3, r3, #23
 800deaa:	460c      	mov	r4, r1
 800deac:	4616      	mov	r6, r2
 800deae:	d505      	bpl.n	800debc <__swrite+0x1e>
 800deb0:	2302      	movs	r3, #2
 800deb2:	2200      	movs	r2, #0
 800deb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deb8:	f000 f8a6 	bl	800e008 <_lseek_r>
 800debc:	89a3      	ldrh	r3, [r4, #12]
 800debe:	4632      	mov	r2, r6
 800dec0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dec4:	81a3      	strh	r3, [r4, #12]
 800dec6:	4628      	mov	r0, r5
 800dec8:	463b      	mov	r3, r7
 800deca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ded2:	f7ff b9b9 	b.w	800d248 <_write_r>

0800ded6 <__sseek>:
 800ded6:	b510      	push	{r4, lr}
 800ded8:	460c      	mov	r4, r1
 800deda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dede:	f000 f893 	bl	800e008 <_lseek_r>
 800dee2:	1c43      	adds	r3, r0, #1
 800dee4:	89a3      	ldrh	r3, [r4, #12]
 800dee6:	bf15      	itete	ne
 800dee8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800deea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800deee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800def2:	81a3      	strheq	r3, [r4, #12]
 800def4:	bf18      	it	ne
 800def6:	81a3      	strhne	r3, [r4, #12]
 800def8:	bd10      	pop	{r4, pc}

0800defa <__sclose>:
 800defa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800defe:	f000 b81d 	b.w	800df3c <_close_r>

0800df02 <memcmp>:
 800df02:	b510      	push	{r4, lr}
 800df04:	3901      	subs	r1, #1
 800df06:	4402      	add	r2, r0
 800df08:	4290      	cmp	r0, r2
 800df0a:	d101      	bne.n	800df10 <memcmp+0xe>
 800df0c:	2000      	movs	r0, #0
 800df0e:	e005      	b.n	800df1c <memcmp+0x1a>
 800df10:	7803      	ldrb	r3, [r0, #0]
 800df12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800df16:	42a3      	cmp	r3, r4
 800df18:	d001      	beq.n	800df1e <memcmp+0x1c>
 800df1a:	1b18      	subs	r0, r3, r4
 800df1c:	bd10      	pop	{r4, pc}
 800df1e:	3001      	adds	r0, #1
 800df20:	e7f2      	b.n	800df08 <memcmp+0x6>

0800df22 <memset>:
 800df22:	4603      	mov	r3, r0
 800df24:	4402      	add	r2, r0
 800df26:	4293      	cmp	r3, r2
 800df28:	d100      	bne.n	800df2c <memset+0xa>
 800df2a:	4770      	bx	lr
 800df2c:	f803 1b01 	strb.w	r1, [r3], #1
 800df30:	e7f9      	b.n	800df26 <memset+0x4>
	...

0800df34 <_localeconv_r>:
 800df34:	4800      	ldr	r0, [pc, #0]	@ (800df38 <_localeconv_r+0x4>)
 800df36:	4770      	bx	lr
 800df38:	20000120 	.word	0x20000120

0800df3c <_close_r>:
 800df3c:	b538      	push	{r3, r4, r5, lr}
 800df3e:	2300      	movs	r3, #0
 800df40:	4d05      	ldr	r5, [pc, #20]	@ (800df58 <_close_r+0x1c>)
 800df42:	4604      	mov	r4, r0
 800df44:	4608      	mov	r0, r1
 800df46:	602b      	str	r3, [r5, #0]
 800df48:	f7f4 fddf 	bl	8002b0a <_close>
 800df4c:	1c43      	adds	r3, r0, #1
 800df4e:	d102      	bne.n	800df56 <_close_r+0x1a>
 800df50:	682b      	ldr	r3, [r5, #0]
 800df52:	b103      	cbz	r3, 800df56 <_close_r+0x1a>
 800df54:	6023      	str	r3, [r4, #0]
 800df56:	bd38      	pop	{r3, r4, r5, pc}
 800df58:	20004680 	.word	0x20004680

0800df5c <_reclaim_reent>:
 800df5c:	4b29      	ldr	r3, [pc, #164]	@ (800e004 <_reclaim_reent+0xa8>)
 800df5e:	b570      	push	{r4, r5, r6, lr}
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4604      	mov	r4, r0
 800df64:	4283      	cmp	r3, r0
 800df66:	d04b      	beq.n	800e000 <_reclaim_reent+0xa4>
 800df68:	69c3      	ldr	r3, [r0, #28]
 800df6a:	b1ab      	cbz	r3, 800df98 <_reclaim_reent+0x3c>
 800df6c:	68db      	ldr	r3, [r3, #12]
 800df6e:	b16b      	cbz	r3, 800df8c <_reclaim_reent+0x30>
 800df70:	2500      	movs	r5, #0
 800df72:	69e3      	ldr	r3, [r4, #28]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	5959      	ldr	r1, [r3, r5]
 800df78:	2900      	cmp	r1, #0
 800df7a:	d13b      	bne.n	800dff4 <_reclaim_reent+0x98>
 800df7c:	3504      	adds	r5, #4
 800df7e:	2d80      	cmp	r5, #128	@ 0x80
 800df80:	d1f7      	bne.n	800df72 <_reclaim_reent+0x16>
 800df82:	69e3      	ldr	r3, [r4, #28]
 800df84:	4620      	mov	r0, r4
 800df86:	68d9      	ldr	r1, [r3, #12]
 800df88:	f000 ff2a 	bl	800ede0 <_free_r>
 800df8c:	69e3      	ldr	r3, [r4, #28]
 800df8e:	6819      	ldr	r1, [r3, #0]
 800df90:	b111      	cbz	r1, 800df98 <_reclaim_reent+0x3c>
 800df92:	4620      	mov	r0, r4
 800df94:	f000 ff24 	bl	800ede0 <_free_r>
 800df98:	6961      	ldr	r1, [r4, #20]
 800df9a:	b111      	cbz	r1, 800dfa2 <_reclaim_reent+0x46>
 800df9c:	4620      	mov	r0, r4
 800df9e:	f000 ff1f 	bl	800ede0 <_free_r>
 800dfa2:	69e1      	ldr	r1, [r4, #28]
 800dfa4:	b111      	cbz	r1, 800dfac <_reclaim_reent+0x50>
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f000 ff1a 	bl	800ede0 <_free_r>
 800dfac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dfae:	b111      	cbz	r1, 800dfb6 <_reclaim_reent+0x5a>
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f000 ff15 	bl	800ede0 <_free_r>
 800dfb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dfb8:	b111      	cbz	r1, 800dfc0 <_reclaim_reent+0x64>
 800dfba:	4620      	mov	r0, r4
 800dfbc:	f000 ff10 	bl	800ede0 <_free_r>
 800dfc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dfc2:	b111      	cbz	r1, 800dfca <_reclaim_reent+0x6e>
 800dfc4:	4620      	mov	r0, r4
 800dfc6:	f000 ff0b 	bl	800ede0 <_free_r>
 800dfca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dfcc:	b111      	cbz	r1, 800dfd4 <_reclaim_reent+0x78>
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f000 ff06 	bl	800ede0 <_free_r>
 800dfd4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dfd6:	b111      	cbz	r1, 800dfde <_reclaim_reent+0x82>
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f000 ff01 	bl	800ede0 <_free_r>
 800dfde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dfe0:	b111      	cbz	r1, 800dfe8 <_reclaim_reent+0x8c>
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f000 fefc 	bl	800ede0 <_free_r>
 800dfe8:	6a23      	ldr	r3, [r4, #32]
 800dfea:	b14b      	cbz	r3, 800e000 <_reclaim_reent+0xa4>
 800dfec:	4620      	mov	r0, r4
 800dfee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dff2:	4718      	bx	r3
 800dff4:	680e      	ldr	r6, [r1, #0]
 800dff6:	4620      	mov	r0, r4
 800dff8:	f000 fef2 	bl	800ede0 <_free_r>
 800dffc:	4631      	mov	r1, r6
 800dffe:	e7bb      	b.n	800df78 <_reclaim_reent+0x1c>
 800e000:	bd70      	pop	{r4, r5, r6, pc}
 800e002:	bf00      	nop
 800e004:	2000019c 	.word	0x2000019c

0800e008 <_lseek_r>:
 800e008:	b538      	push	{r3, r4, r5, lr}
 800e00a:	4604      	mov	r4, r0
 800e00c:	4608      	mov	r0, r1
 800e00e:	4611      	mov	r1, r2
 800e010:	2200      	movs	r2, #0
 800e012:	4d05      	ldr	r5, [pc, #20]	@ (800e028 <_lseek_r+0x20>)
 800e014:	602a      	str	r2, [r5, #0]
 800e016:	461a      	mov	r2, r3
 800e018:	f7f4 fd9b 	bl	8002b52 <_lseek>
 800e01c:	1c43      	adds	r3, r0, #1
 800e01e:	d102      	bne.n	800e026 <_lseek_r+0x1e>
 800e020:	682b      	ldr	r3, [r5, #0]
 800e022:	b103      	cbz	r3, 800e026 <_lseek_r+0x1e>
 800e024:	6023      	str	r3, [r4, #0]
 800e026:	bd38      	pop	{r3, r4, r5, pc}
 800e028:	20004680 	.word	0x20004680

0800e02c <_read_r>:
 800e02c:	b538      	push	{r3, r4, r5, lr}
 800e02e:	4604      	mov	r4, r0
 800e030:	4608      	mov	r0, r1
 800e032:	4611      	mov	r1, r2
 800e034:	2200      	movs	r2, #0
 800e036:	4d05      	ldr	r5, [pc, #20]	@ (800e04c <_read_r+0x20>)
 800e038:	602a      	str	r2, [r5, #0]
 800e03a:	461a      	mov	r2, r3
 800e03c:	f7f4 fd48 	bl	8002ad0 <_read>
 800e040:	1c43      	adds	r3, r0, #1
 800e042:	d102      	bne.n	800e04a <_read_r+0x1e>
 800e044:	682b      	ldr	r3, [r5, #0]
 800e046:	b103      	cbz	r3, 800e04a <_read_r+0x1e>
 800e048:	6023      	str	r3, [r4, #0]
 800e04a:	bd38      	pop	{r3, r4, r5, pc}
 800e04c:	20004680 	.word	0x20004680

0800e050 <_sbrk_r>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	2300      	movs	r3, #0
 800e054:	4d05      	ldr	r5, [pc, #20]	@ (800e06c <_sbrk_r+0x1c>)
 800e056:	4604      	mov	r4, r0
 800e058:	4608      	mov	r0, r1
 800e05a:	602b      	str	r3, [r5, #0]
 800e05c:	f7f4 fd86 	bl	8002b6c <_sbrk>
 800e060:	1c43      	adds	r3, r0, #1
 800e062:	d102      	bne.n	800e06a <_sbrk_r+0x1a>
 800e064:	682b      	ldr	r3, [r5, #0]
 800e066:	b103      	cbz	r3, 800e06a <_sbrk_r+0x1a>
 800e068:	6023      	str	r3, [r4, #0]
 800e06a:	bd38      	pop	{r3, r4, r5, pc}
 800e06c:	20004680 	.word	0x20004680

0800e070 <__errno>:
 800e070:	4b01      	ldr	r3, [pc, #4]	@ (800e078 <__errno+0x8>)
 800e072:	6818      	ldr	r0, [r3, #0]
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop
 800e078:	2000019c 	.word	0x2000019c

0800e07c <__libc_init_array>:
 800e07c:	b570      	push	{r4, r5, r6, lr}
 800e07e:	2600      	movs	r6, #0
 800e080:	4d0c      	ldr	r5, [pc, #48]	@ (800e0b4 <__libc_init_array+0x38>)
 800e082:	4c0d      	ldr	r4, [pc, #52]	@ (800e0b8 <__libc_init_array+0x3c>)
 800e084:	1b64      	subs	r4, r4, r5
 800e086:	10a4      	asrs	r4, r4, #2
 800e088:	42a6      	cmp	r6, r4
 800e08a:	d109      	bne.n	800e0a0 <__libc_init_array+0x24>
 800e08c:	f001 ffa6 	bl	800ffdc <_init>
 800e090:	2600      	movs	r6, #0
 800e092:	4d0a      	ldr	r5, [pc, #40]	@ (800e0bc <__libc_init_array+0x40>)
 800e094:	4c0a      	ldr	r4, [pc, #40]	@ (800e0c0 <__libc_init_array+0x44>)
 800e096:	1b64      	subs	r4, r4, r5
 800e098:	10a4      	asrs	r4, r4, #2
 800e09a:	42a6      	cmp	r6, r4
 800e09c:	d105      	bne.n	800e0aa <__libc_init_array+0x2e>
 800e09e:	bd70      	pop	{r4, r5, r6, pc}
 800e0a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0a4:	4798      	blx	r3
 800e0a6:	3601      	adds	r6, #1
 800e0a8:	e7ee      	b.n	800e088 <__libc_init_array+0xc>
 800e0aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0ae:	4798      	blx	r3
 800e0b0:	3601      	adds	r6, #1
 800e0b2:	e7f2      	b.n	800e09a <__libc_init_array+0x1e>
 800e0b4:	080106ac 	.word	0x080106ac
 800e0b8:	080106ac 	.word	0x080106ac
 800e0bc:	080106ac 	.word	0x080106ac
 800e0c0:	080106b0 	.word	0x080106b0

0800e0c4 <__retarget_lock_init_recursive>:
 800e0c4:	4770      	bx	lr

0800e0c6 <__retarget_lock_acquire_recursive>:
 800e0c6:	4770      	bx	lr

0800e0c8 <__retarget_lock_release_recursive>:
 800e0c8:	4770      	bx	lr

0800e0ca <memchr>:
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	b510      	push	{r4, lr}
 800e0ce:	b2c9      	uxtb	r1, r1
 800e0d0:	4402      	add	r2, r0
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	d101      	bne.n	800e0dc <memchr+0x12>
 800e0d8:	2000      	movs	r0, #0
 800e0da:	e003      	b.n	800e0e4 <memchr+0x1a>
 800e0dc:	7804      	ldrb	r4, [r0, #0]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	428c      	cmp	r4, r1
 800e0e2:	d1f6      	bne.n	800e0d2 <memchr+0x8>
 800e0e4:	bd10      	pop	{r4, pc}

0800e0e6 <memcpy>:
 800e0e6:	440a      	add	r2, r1
 800e0e8:	4291      	cmp	r1, r2
 800e0ea:	f100 33ff 	add.w	r3, r0, #4294967295
 800e0ee:	d100      	bne.n	800e0f2 <memcpy+0xc>
 800e0f0:	4770      	bx	lr
 800e0f2:	b510      	push	{r4, lr}
 800e0f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0f8:	4291      	cmp	r1, r2
 800e0fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0fe:	d1f9      	bne.n	800e0f4 <memcpy+0xe>
 800e100:	bd10      	pop	{r4, pc}
	...

0800e104 <__assert_func>:
 800e104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e106:	4614      	mov	r4, r2
 800e108:	461a      	mov	r2, r3
 800e10a:	4b09      	ldr	r3, [pc, #36]	@ (800e130 <__assert_func+0x2c>)
 800e10c:	4605      	mov	r5, r0
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	68d8      	ldr	r0, [r3, #12]
 800e112:	b954      	cbnz	r4, 800e12a <__assert_func+0x26>
 800e114:	4b07      	ldr	r3, [pc, #28]	@ (800e134 <__assert_func+0x30>)
 800e116:	461c      	mov	r4, r3
 800e118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e11c:	9100      	str	r1, [sp, #0]
 800e11e:	462b      	mov	r3, r5
 800e120:	4905      	ldr	r1, [pc, #20]	@ (800e138 <__assert_func+0x34>)
 800e122:	f001 fc43 	bl	800f9ac <fiprintf>
 800e126:	f001 fc6d 	bl	800fa04 <abort>
 800e12a:	4b04      	ldr	r3, [pc, #16]	@ (800e13c <__assert_func+0x38>)
 800e12c:	e7f4      	b.n	800e118 <__assert_func+0x14>
 800e12e:	bf00      	nop
 800e130:	2000019c 	.word	0x2000019c
 800e134:	080103ad 	.word	0x080103ad
 800e138:	0801037f 	.word	0x0801037f
 800e13c:	08010372 	.word	0x08010372

0800e140 <quorem>:
 800e140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e144:	6903      	ldr	r3, [r0, #16]
 800e146:	690c      	ldr	r4, [r1, #16]
 800e148:	4607      	mov	r7, r0
 800e14a:	42a3      	cmp	r3, r4
 800e14c:	db7e      	blt.n	800e24c <quorem+0x10c>
 800e14e:	3c01      	subs	r4, #1
 800e150:	00a3      	lsls	r3, r4, #2
 800e152:	f100 0514 	add.w	r5, r0, #20
 800e156:	f101 0814 	add.w	r8, r1, #20
 800e15a:	9300      	str	r3, [sp, #0]
 800e15c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e166:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e16a:	3301      	adds	r3, #1
 800e16c:	429a      	cmp	r2, r3
 800e16e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e172:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e176:	d32e      	bcc.n	800e1d6 <quorem+0x96>
 800e178:	f04f 0a00 	mov.w	sl, #0
 800e17c:	46c4      	mov	ip, r8
 800e17e:	46ae      	mov	lr, r5
 800e180:	46d3      	mov	fp, sl
 800e182:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e186:	b298      	uxth	r0, r3
 800e188:	fb06 a000 	mla	r0, r6, r0, sl
 800e18c:	0c1b      	lsrs	r3, r3, #16
 800e18e:	0c02      	lsrs	r2, r0, #16
 800e190:	fb06 2303 	mla	r3, r6, r3, r2
 800e194:	f8de 2000 	ldr.w	r2, [lr]
 800e198:	b280      	uxth	r0, r0
 800e19a:	b292      	uxth	r2, r2
 800e19c:	1a12      	subs	r2, r2, r0
 800e19e:	445a      	add	r2, fp
 800e1a0:	f8de 0000 	ldr.w	r0, [lr]
 800e1a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e1ae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e1b2:	b292      	uxth	r2, r2
 800e1b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e1b8:	45e1      	cmp	r9, ip
 800e1ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e1be:	f84e 2b04 	str.w	r2, [lr], #4
 800e1c2:	d2de      	bcs.n	800e182 <quorem+0x42>
 800e1c4:	9b00      	ldr	r3, [sp, #0]
 800e1c6:	58eb      	ldr	r3, [r5, r3]
 800e1c8:	b92b      	cbnz	r3, 800e1d6 <quorem+0x96>
 800e1ca:	9b01      	ldr	r3, [sp, #4]
 800e1cc:	3b04      	subs	r3, #4
 800e1ce:	429d      	cmp	r5, r3
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	d32f      	bcc.n	800e234 <quorem+0xf4>
 800e1d4:	613c      	str	r4, [r7, #16]
 800e1d6:	4638      	mov	r0, r7
 800e1d8:	f001 f8d4 	bl	800f384 <__mcmp>
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	db25      	blt.n	800e22c <quorem+0xec>
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	2000      	movs	r0, #0
 800e1e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800e1e8:	f8d1 c000 	ldr.w	ip, [r1]
 800e1ec:	fa1f fe82 	uxth.w	lr, r2
 800e1f0:	fa1f f38c 	uxth.w	r3, ip
 800e1f4:	eba3 030e 	sub.w	r3, r3, lr
 800e1f8:	4403      	add	r3, r0
 800e1fa:	0c12      	lsrs	r2, r2, #16
 800e1fc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e200:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e204:	b29b      	uxth	r3, r3
 800e206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e20a:	45c1      	cmp	r9, r8
 800e20c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e210:	f841 3b04 	str.w	r3, [r1], #4
 800e214:	d2e6      	bcs.n	800e1e4 <quorem+0xa4>
 800e216:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e21a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e21e:	b922      	cbnz	r2, 800e22a <quorem+0xea>
 800e220:	3b04      	subs	r3, #4
 800e222:	429d      	cmp	r5, r3
 800e224:	461a      	mov	r2, r3
 800e226:	d30b      	bcc.n	800e240 <quorem+0x100>
 800e228:	613c      	str	r4, [r7, #16]
 800e22a:	3601      	adds	r6, #1
 800e22c:	4630      	mov	r0, r6
 800e22e:	b003      	add	sp, #12
 800e230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e234:	6812      	ldr	r2, [r2, #0]
 800e236:	3b04      	subs	r3, #4
 800e238:	2a00      	cmp	r2, #0
 800e23a:	d1cb      	bne.n	800e1d4 <quorem+0x94>
 800e23c:	3c01      	subs	r4, #1
 800e23e:	e7c6      	b.n	800e1ce <quorem+0x8e>
 800e240:	6812      	ldr	r2, [r2, #0]
 800e242:	3b04      	subs	r3, #4
 800e244:	2a00      	cmp	r2, #0
 800e246:	d1ef      	bne.n	800e228 <quorem+0xe8>
 800e248:	3c01      	subs	r4, #1
 800e24a:	e7ea      	b.n	800e222 <quorem+0xe2>
 800e24c:	2000      	movs	r0, #0
 800e24e:	e7ee      	b.n	800e22e <quorem+0xee>

0800e250 <_dtoa_r>:
 800e250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e254:	4614      	mov	r4, r2
 800e256:	461d      	mov	r5, r3
 800e258:	69c7      	ldr	r7, [r0, #28]
 800e25a:	b097      	sub	sp, #92	@ 0x5c
 800e25c:	4683      	mov	fp, r0
 800e25e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e262:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800e264:	b97f      	cbnz	r7, 800e286 <_dtoa_r+0x36>
 800e266:	2010      	movs	r0, #16
 800e268:	f7ff f800 	bl	800d26c <malloc>
 800e26c:	4602      	mov	r2, r0
 800e26e:	f8cb 001c 	str.w	r0, [fp, #28]
 800e272:	b920      	cbnz	r0, 800e27e <_dtoa_r+0x2e>
 800e274:	21ef      	movs	r1, #239	@ 0xef
 800e276:	4ba8      	ldr	r3, [pc, #672]	@ (800e518 <_dtoa_r+0x2c8>)
 800e278:	48a8      	ldr	r0, [pc, #672]	@ (800e51c <_dtoa_r+0x2cc>)
 800e27a:	f7ff ff43 	bl	800e104 <__assert_func>
 800e27e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e282:	6007      	str	r7, [r0, #0]
 800e284:	60c7      	str	r7, [r0, #12]
 800e286:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e28a:	6819      	ldr	r1, [r3, #0]
 800e28c:	b159      	cbz	r1, 800e2a6 <_dtoa_r+0x56>
 800e28e:	685a      	ldr	r2, [r3, #4]
 800e290:	2301      	movs	r3, #1
 800e292:	4093      	lsls	r3, r2
 800e294:	604a      	str	r2, [r1, #4]
 800e296:	608b      	str	r3, [r1, #8]
 800e298:	4658      	mov	r0, fp
 800e29a:	f000 fe3b 	bl	800ef14 <_Bfree>
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e2a4:	601a      	str	r2, [r3, #0]
 800e2a6:	1e2b      	subs	r3, r5, #0
 800e2a8:	bfaf      	iteee	ge
 800e2aa:	2300      	movge	r3, #0
 800e2ac:	2201      	movlt	r2, #1
 800e2ae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e2b2:	9303      	strlt	r3, [sp, #12]
 800e2b4:	bfa8      	it	ge
 800e2b6:	6033      	strge	r3, [r6, #0]
 800e2b8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e2bc:	4b98      	ldr	r3, [pc, #608]	@ (800e520 <_dtoa_r+0x2d0>)
 800e2be:	bfb8      	it	lt
 800e2c0:	6032      	strlt	r2, [r6, #0]
 800e2c2:	ea33 0308 	bics.w	r3, r3, r8
 800e2c6:	d112      	bne.n	800e2ee <_dtoa_r+0x9e>
 800e2c8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e2cc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e2ce:	6013      	str	r3, [r2, #0]
 800e2d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e2d4:	4323      	orrs	r3, r4
 800e2d6:	f000 8550 	beq.w	800ed7a <_dtoa_r+0xb2a>
 800e2da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e2dc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800e524 <_dtoa_r+0x2d4>
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 8552 	beq.w	800ed8a <_dtoa_r+0xb3a>
 800e2e6:	f10a 0303 	add.w	r3, sl, #3
 800e2ea:	f000 bd4c 	b.w	800ed86 <_dtoa_r+0xb36>
 800e2ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e2f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	f7f2 fb99 	bl	8000a34 <__aeabi_dcmpeq>
 800e302:	4607      	mov	r7, r0
 800e304:	b158      	cbz	r0, 800e31e <_dtoa_r+0xce>
 800e306:	2301      	movs	r3, #1
 800e308:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e30a:	6013      	str	r3, [r2, #0]
 800e30c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e30e:	b113      	cbz	r3, 800e316 <_dtoa_r+0xc6>
 800e310:	4b85      	ldr	r3, [pc, #532]	@ (800e528 <_dtoa_r+0x2d8>)
 800e312:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e314:	6013      	str	r3, [r2, #0]
 800e316:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800e52c <_dtoa_r+0x2dc>
 800e31a:	f000 bd36 	b.w	800ed8a <_dtoa_r+0xb3a>
 800e31e:	ab14      	add	r3, sp, #80	@ 0x50
 800e320:	9301      	str	r3, [sp, #4]
 800e322:	ab15      	add	r3, sp, #84	@ 0x54
 800e324:	9300      	str	r3, [sp, #0]
 800e326:	4658      	mov	r0, fp
 800e328:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e32c:	f001 f8da 	bl	800f4e4 <__d2b>
 800e330:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800e334:	4681      	mov	r9, r0
 800e336:	2e00      	cmp	r6, #0
 800e338:	d077      	beq.n	800e42a <_dtoa_r+0x1da>
 800e33a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e33e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e340:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e348:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e34c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e350:	9712      	str	r7, [sp, #72]	@ 0x48
 800e352:	4619      	mov	r1, r3
 800e354:	2200      	movs	r2, #0
 800e356:	4b76      	ldr	r3, [pc, #472]	@ (800e530 <_dtoa_r+0x2e0>)
 800e358:	f7f1 ff4c 	bl	80001f4 <__aeabi_dsub>
 800e35c:	a368      	add	r3, pc, #416	@ (adr r3, 800e500 <_dtoa_r+0x2b0>)
 800e35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e362:	f7f2 f8ff 	bl	8000564 <__aeabi_dmul>
 800e366:	a368      	add	r3, pc, #416	@ (adr r3, 800e508 <_dtoa_r+0x2b8>)
 800e368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36c:	f7f1 ff44 	bl	80001f8 <__adddf3>
 800e370:	4604      	mov	r4, r0
 800e372:	4630      	mov	r0, r6
 800e374:	460d      	mov	r5, r1
 800e376:	f7f2 f88b 	bl	8000490 <__aeabi_i2d>
 800e37a:	a365      	add	r3, pc, #404	@ (adr r3, 800e510 <_dtoa_r+0x2c0>)
 800e37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e380:	f7f2 f8f0 	bl	8000564 <__aeabi_dmul>
 800e384:	4602      	mov	r2, r0
 800e386:	460b      	mov	r3, r1
 800e388:	4620      	mov	r0, r4
 800e38a:	4629      	mov	r1, r5
 800e38c:	f7f1 ff34 	bl	80001f8 <__adddf3>
 800e390:	4604      	mov	r4, r0
 800e392:	460d      	mov	r5, r1
 800e394:	f7f2 fb96 	bl	8000ac4 <__aeabi_d2iz>
 800e398:	2200      	movs	r2, #0
 800e39a:	4607      	mov	r7, r0
 800e39c:	2300      	movs	r3, #0
 800e39e:	4620      	mov	r0, r4
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	f7f2 fb51 	bl	8000a48 <__aeabi_dcmplt>
 800e3a6:	b140      	cbz	r0, 800e3ba <_dtoa_r+0x16a>
 800e3a8:	4638      	mov	r0, r7
 800e3aa:	f7f2 f871 	bl	8000490 <__aeabi_i2d>
 800e3ae:	4622      	mov	r2, r4
 800e3b0:	462b      	mov	r3, r5
 800e3b2:	f7f2 fb3f 	bl	8000a34 <__aeabi_dcmpeq>
 800e3b6:	b900      	cbnz	r0, 800e3ba <_dtoa_r+0x16a>
 800e3b8:	3f01      	subs	r7, #1
 800e3ba:	2f16      	cmp	r7, #22
 800e3bc:	d853      	bhi.n	800e466 <_dtoa_r+0x216>
 800e3be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3c2:	4b5c      	ldr	r3, [pc, #368]	@ (800e534 <_dtoa_r+0x2e4>)
 800e3c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3cc:	f7f2 fb3c 	bl	8000a48 <__aeabi_dcmplt>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	d04a      	beq.n	800e46a <_dtoa_r+0x21a>
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	3f01      	subs	r7, #1
 800e3d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e3da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e3dc:	1b9b      	subs	r3, r3, r6
 800e3de:	1e5a      	subs	r2, r3, #1
 800e3e0:	bf46      	itte	mi
 800e3e2:	f1c3 0801 	rsbmi	r8, r3, #1
 800e3e6:	2300      	movmi	r3, #0
 800e3e8:	f04f 0800 	movpl.w	r8, #0
 800e3ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3ee:	bf48      	it	mi
 800e3f0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800e3f2:	2f00      	cmp	r7, #0
 800e3f4:	db3b      	blt.n	800e46e <_dtoa_r+0x21e>
 800e3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3f8:	970e      	str	r7, [sp, #56]	@ 0x38
 800e3fa:	443b      	add	r3, r7
 800e3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3fe:	2300      	movs	r3, #0
 800e400:	930a      	str	r3, [sp, #40]	@ 0x28
 800e402:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e404:	2b09      	cmp	r3, #9
 800e406:	d866      	bhi.n	800e4d6 <_dtoa_r+0x286>
 800e408:	2b05      	cmp	r3, #5
 800e40a:	bfc4      	itt	gt
 800e40c:	3b04      	subgt	r3, #4
 800e40e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800e410:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e412:	bfc8      	it	gt
 800e414:	2400      	movgt	r4, #0
 800e416:	f1a3 0302 	sub.w	r3, r3, #2
 800e41a:	bfd8      	it	le
 800e41c:	2401      	movle	r4, #1
 800e41e:	2b03      	cmp	r3, #3
 800e420:	d864      	bhi.n	800e4ec <_dtoa_r+0x29c>
 800e422:	e8df f003 	tbb	[pc, r3]
 800e426:	382b      	.short	0x382b
 800e428:	5636      	.short	0x5636
 800e42a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e42e:	441e      	add	r6, r3
 800e430:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e434:	2b20      	cmp	r3, #32
 800e436:	bfc1      	itttt	gt
 800e438:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e43c:	fa08 f803 	lslgt.w	r8, r8, r3
 800e440:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e444:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e448:	bfd6      	itet	le
 800e44a:	f1c3 0320 	rsble	r3, r3, #32
 800e44e:	ea48 0003 	orrgt.w	r0, r8, r3
 800e452:	fa04 f003 	lslle.w	r0, r4, r3
 800e456:	f7f2 f80b 	bl	8000470 <__aeabi_ui2d>
 800e45a:	2201      	movs	r2, #1
 800e45c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e460:	3e01      	subs	r6, #1
 800e462:	9212      	str	r2, [sp, #72]	@ 0x48
 800e464:	e775      	b.n	800e352 <_dtoa_r+0x102>
 800e466:	2301      	movs	r3, #1
 800e468:	e7b6      	b.n	800e3d8 <_dtoa_r+0x188>
 800e46a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e46c:	e7b5      	b.n	800e3da <_dtoa_r+0x18a>
 800e46e:	427b      	negs	r3, r7
 800e470:	930a      	str	r3, [sp, #40]	@ 0x28
 800e472:	2300      	movs	r3, #0
 800e474:	eba8 0807 	sub.w	r8, r8, r7
 800e478:	930e      	str	r3, [sp, #56]	@ 0x38
 800e47a:	e7c2      	b.n	800e402 <_dtoa_r+0x1b2>
 800e47c:	2300      	movs	r3, #0
 800e47e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e480:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e482:	2b00      	cmp	r3, #0
 800e484:	dc35      	bgt.n	800e4f2 <_dtoa_r+0x2a2>
 800e486:	2301      	movs	r3, #1
 800e488:	461a      	mov	r2, r3
 800e48a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800e48e:	9221      	str	r2, [sp, #132]	@ 0x84
 800e490:	e00b      	b.n	800e4aa <_dtoa_r+0x25a>
 800e492:	2301      	movs	r3, #1
 800e494:	e7f3      	b.n	800e47e <_dtoa_r+0x22e>
 800e496:	2300      	movs	r3, #0
 800e498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e49a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e49c:	18fb      	adds	r3, r7, r3
 800e49e:	9308      	str	r3, [sp, #32]
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	9307      	str	r3, [sp, #28]
 800e4a6:	bfb8      	it	lt
 800e4a8:	2301      	movlt	r3, #1
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	2204      	movs	r2, #4
 800e4ae:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e4b2:	f102 0514 	add.w	r5, r2, #20
 800e4b6:	429d      	cmp	r5, r3
 800e4b8:	d91f      	bls.n	800e4fa <_dtoa_r+0x2aa>
 800e4ba:	6041      	str	r1, [r0, #4]
 800e4bc:	4658      	mov	r0, fp
 800e4be:	f000 fce9 	bl	800ee94 <_Balloc>
 800e4c2:	4682      	mov	sl, r0
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	d139      	bne.n	800e53c <_dtoa_r+0x2ec>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	f240 11af 	movw	r1, #431	@ 0x1af
 800e4ce:	4b1a      	ldr	r3, [pc, #104]	@ (800e538 <_dtoa_r+0x2e8>)
 800e4d0:	e6d2      	b.n	800e278 <_dtoa_r+0x28>
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	e7e0      	b.n	800e498 <_dtoa_r+0x248>
 800e4d6:	2401      	movs	r4, #1
 800e4d8:	2300      	movs	r3, #0
 800e4da:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e4dc:	9320      	str	r3, [sp, #128]	@ 0x80
 800e4de:	f04f 33ff 	mov.w	r3, #4294967295
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800e4e8:	2312      	movs	r3, #18
 800e4ea:	e7d0      	b.n	800e48e <_dtoa_r+0x23e>
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4f0:	e7f5      	b.n	800e4de <_dtoa_r+0x28e>
 800e4f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e4f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800e4f8:	e7d7      	b.n	800e4aa <_dtoa_r+0x25a>
 800e4fa:	3101      	adds	r1, #1
 800e4fc:	0052      	lsls	r2, r2, #1
 800e4fe:	e7d8      	b.n	800e4b2 <_dtoa_r+0x262>
 800e500:	636f4361 	.word	0x636f4361
 800e504:	3fd287a7 	.word	0x3fd287a7
 800e508:	8b60c8b3 	.word	0x8b60c8b3
 800e50c:	3fc68a28 	.word	0x3fc68a28
 800e510:	509f79fb 	.word	0x509f79fb
 800e514:	3fd34413 	.word	0x3fd34413
 800e518:	080103bb 	.word	0x080103bb
 800e51c:	080103d2 	.word	0x080103d2
 800e520:	7ff00000 	.word	0x7ff00000
 800e524:	080103b7 	.word	0x080103b7
 800e528:	08010345 	.word	0x08010345
 800e52c:	08010344 	.word	0x08010344
 800e530:	3ff80000 	.word	0x3ff80000
 800e534:	080104c8 	.word	0x080104c8
 800e538:	0801042a 	.word	0x0801042a
 800e53c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e540:	6018      	str	r0, [r3, #0]
 800e542:	9b07      	ldr	r3, [sp, #28]
 800e544:	2b0e      	cmp	r3, #14
 800e546:	f200 80a4 	bhi.w	800e692 <_dtoa_r+0x442>
 800e54a:	2c00      	cmp	r4, #0
 800e54c:	f000 80a1 	beq.w	800e692 <_dtoa_r+0x442>
 800e550:	2f00      	cmp	r7, #0
 800e552:	dd33      	ble.n	800e5bc <_dtoa_r+0x36c>
 800e554:	4b86      	ldr	r3, [pc, #536]	@ (800e770 <_dtoa_r+0x520>)
 800e556:	f007 020f 	and.w	r2, r7, #15
 800e55a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e55e:	05f8      	lsls	r0, r7, #23
 800e560:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e564:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e568:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e56c:	d516      	bpl.n	800e59c <_dtoa_r+0x34c>
 800e56e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e572:	4b80      	ldr	r3, [pc, #512]	@ (800e774 <_dtoa_r+0x524>)
 800e574:	2603      	movs	r6, #3
 800e576:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e57a:	f7f2 f91d 	bl	80007b8 <__aeabi_ddiv>
 800e57e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e582:	f004 040f 	and.w	r4, r4, #15
 800e586:	4d7b      	ldr	r5, [pc, #492]	@ (800e774 <_dtoa_r+0x524>)
 800e588:	b954      	cbnz	r4, 800e5a0 <_dtoa_r+0x350>
 800e58a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e592:	f7f2 f911 	bl	80007b8 <__aeabi_ddiv>
 800e596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e59a:	e028      	b.n	800e5ee <_dtoa_r+0x39e>
 800e59c:	2602      	movs	r6, #2
 800e59e:	e7f2      	b.n	800e586 <_dtoa_r+0x336>
 800e5a0:	07e1      	lsls	r1, r4, #31
 800e5a2:	d508      	bpl.n	800e5b6 <_dtoa_r+0x366>
 800e5a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e5ac:	f7f1 ffda 	bl	8000564 <__aeabi_dmul>
 800e5b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5b4:	3601      	adds	r6, #1
 800e5b6:	1064      	asrs	r4, r4, #1
 800e5b8:	3508      	adds	r5, #8
 800e5ba:	e7e5      	b.n	800e588 <_dtoa_r+0x338>
 800e5bc:	f000 80d2 	beq.w	800e764 <_dtoa_r+0x514>
 800e5c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e5c4:	427c      	negs	r4, r7
 800e5c6:	4b6a      	ldr	r3, [pc, #424]	@ (800e770 <_dtoa_r+0x520>)
 800e5c8:	f004 020f 	and.w	r2, r4, #15
 800e5cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d4:	f7f1 ffc6 	bl	8000564 <__aeabi_dmul>
 800e5d8:	2602      	movs	r6, #2
 800e5da:	2300      	movs	r3, #0
 800e5dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5e0:	4d64      	ldr	r5, [pc, #400]	@ (800e774 <_dtoa_r+0x524>)
 800e5e2:	1124      	asrs	r4, r4, #4
 800e5e4:	2c00      	cmp	r4, #0
 800e5e6:	f040 80b2 	bne.w	800e74e <_dtoa_r+0x4fe>
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d1d3      	bne.n	800e596 <_dtoa_r+0x346>
 800e5ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e5f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	f000 80b7 	beq.w	800e768 <_dtoa_r+0x518>
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	4629      	mov	r1, r5
 800e600:	4b5d      	ldr	r3, [pc, #372]	@ (800e778 <_dtoa_r+0x528>)
 800e602:	f7f2 fa21 	bl	8000a48 <__aeabi_dcmplt>
 800e606:	2800      	cmp	r0, #0
 800e608:	f000 80ae 	beq.w	800e768 <_dtoa_r+0x518>
 800e60c:	9b07      	ldr	r3, [sp, #28]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f000 80aa 	beq.w	800e768 <_dtoa_r+0x518>
 800e614:	9b08      	ldr	r3, [sp, #32]
 800e616:	2b00      	cmp	r3, #0
 800e618:	dd37      	ble.n	800e68a <_dtoa_r+0x43a>
 800e61a:	1e7b      	subs	r3, r7, #1
 800e61c:	4620      	mov	r0, r4
 800e61e:	9304      	str	r3, [sp, #16]
 800e620:	2200      	movs	r2, #0
 800e622:	4629      	mov	r1, r5
 800e624:	4b55      	ldr	r3, [pc, #340]	@ (800e77c <_dtoa_r+0x52c>)
 800e626:	f7f1 ff9d 	bl	8000564 <__aeabi_dmul>
 800e62a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e62e:	9c08      	ldr	r4, [sp, #32]
 800e630:	3601      	adds	r6, #1
 800e632:	4630      	mov	r0, r6
 800e634:	f7f1 ff2c 	bl	8000490 <__aeabi_i2d>
 800e638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e63c:	f7f1 ff92 	bl	8000564 <__aeabi_dmul>
 800e640:	2200      	movs	r2, #0
 800e642:	4b4f      	ldr	r3, [pc, #316]	@ (800e780 <_dtoa_r+0x530>)
 800e644:	f7f1 fdd8 	bl	80001f8 <__adddf3>
 800e648:	4605      	mov	r5, r0
 800e64a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e64e:	2c00      	cmp	r4, #0
 800e650:	f040 809a 	bne.w	800e788 <_dtoa_r+0x538>
 800e654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e658:	2200      	movs	r2, #0
 800e65a:	4b4a      	ldr	r3, [pc, #296]	@ (800e784 <_dtoa_r+0x534>)
 800e65c:	f7f1 fdca 	bl	80001f4 <__aeabi_dsub>
 800e660:	4602      	mov	r2, r0
 800e662:	460b      	mov	r3, r1
 800e664:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e668:	462a      	mov	r2, r5
 800e66a:	4633      	mov	r3, r6
 800e66c:	f7f2 fa0a 	bl	8000a84 <__aeabi_dcmpgt>
 800e670:	2800      	cmp	r0, #0
 800e672:	f040 828e 	bne.w	800eb92 <_dtoa_r+0x942>
 800e676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e67a:	462a      	mov	r2, r5
 800e67c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e680:	f7f2 f9e2 	bl	8000a48 <__aeabi_dcmplt>
 800e684:	2800      	cmp	r0, #0
 800e686:	f040 8127 	bne.w	800e8d8 <_dtoa_r+0x688>
 800e68a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e68e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e692:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e694:	2b00      	cmp	r3, #0
 800e696:	f2c0 8163 	blt.w	800e960 <_dtoa_r+0x710>
 800e69a:	2f0e      	cmp	r7, #14
 800e69c:	f300 8160 	bgt.w	800e960 <_dtoa_r+0x710>
 800e6a0:	4b33      	ldr	r3, [pc, #204]	@ (800e770 <_dtoa_r+0x520>)
 800e6a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e6a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e6aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e6ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	da03      	bge.n	800e6bc <_dtoa_r+0x46c>
 800e6b4:	9b07      	ldr	r3, [sp, #28]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	f340 8100 	ble.w	800e8bc <_dtoa_r+0x66c>
 800e6bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e6c0:	4656      	mov	r6, sl
 800e6c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	4629      	mov	r1, r5
 800e6ca:	f7f2 f875 	bl	80007b8 <__aeabi_ddiv>
 800e6ce:	f7f2 f9f9 	bl	8000ac4 <__aeabi_d2iz>
 800e6d2:	4680      	mov	r8, r0
 800e6d4:	f7f1 fedc 	bl	8000490 <__aeabi_i2d>
 800e6d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6dc:	f7f1 ff42 	bl	8000564 <__aeabi_dmul>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	4629      	mov	r1, r5
 800e6e8:	f7f1 fd84 	bl	80001f4 <__aeabi_dsub>
 800e6ec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e6f0:	9d07      	ldr	r5, [sp, #28]
 800e6f2:	f806 4b01 	strb.w	r4, [r6], #1
 800e6f6:	eba6 040a 	sub.w	r4, r6, sl
 800e6fa:	42a5      	cmp	r5, r4
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	f040 8116 	bne.w	800e930 <_dtoa_r+0x6e0>
 800e704:	f7f1 fd78 	bl	80001f8 <__adddf3>
 800e708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e70c:	4604      	mov	r4, r0
 800e70e:	460d      	mov	r5, r1
 800e710:	f7f2 f9b8 	bl	8000a84 <__aeabi_dcmpgt>
 800e714:	2800      	cmp	r0, #0
 800e716:	f040 80f8 	bne.w	800e90a <_dtoa_r+0x6ba>
 800e71a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e71e:	4620      	mov	r0, r4
 800e720:	4629      	mov	r1, r5
 800e722:	f7f2 f987 	bl	8000a34 <__aeabi_dcmpeq>
 800e726:	b118      	cbz	r0, 800e730 <_dtoa_r+0x4e0>
 800e728:	f018 0f01 	tst.w	r8, #1
 800e72c:	f040 80ed 	bne.w	800e90a <_dtoa_r+0x6ba>
 800e730:	4649      	mov	r1, r9
 800e732:	4658      	mov	r0, fp
 800e734:	f000 fbee 	bl	800ef14 <_Bfree>
 800e738:	2300      	movs	r3, #0
 800e73a:	7033      	strb	r3, [r6, #0]
 800e73c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e73e:	3701      	adds	r7, #1
 800e740:	601f      	str	r7, [r3, #0]
 800e742:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e744:	2b00      	cmp	r3, #0
 800e746:	f000 8320 	beq.w	800ed8a <_dtoa_r+0xb3a>
 800e74a:	601e      	str	r6, [r3, #0]
 800e74c:	e31d      	b.n	800ed8a <_dtoa_r+0xb3a>
 800e74e:	07e2      	lsls	r2, r4, #31
 800e750:	d505      	bpl.n	800e75e <_dtoa_r+0x50e>
 800e752:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e756:	f7f1 ff05 	bl	8000564 <__aeabi_dmul>
 800e75a:	2301      	movs	r3, #1
 800e75c:	3601      	adds	r6, #1
 800e75e:	1064      	asrs	r4, r4, #1
 800e760:	3508      	adds	r5, #8
 800e762:	e73f      	b.n	800e5e4 <_dtoa_r+0x394>
 800e764:	2602      	movs	r6, #2
 800e766:	e742      	b.n	800e5ee <_dtoa_r+0x39e>
 800e768:	9c07      	ldr	r4, [sp, #28]
 800e76a:	9704      	str	r7, [sp, #16]
 800e76c:	e761      	b.n	800e632 <_dtoa_r+0x3e2>
 800e76e:	bf00      	nop
 800e770:	080104c8 	.word	0x080104c8
 800e774:	080104a0 	.word	0x080104a0
 800e778:	3ff00000 	.word	0x3ff00000
 800e77c:	40240000 	.word	0x40240000
 800e780:	401c0000 	.word	0x401c0000
 800e784:	40140000 	.word	0x40140000
 800e788:	4b70      	ldr	r3, [pc, #448]	@ (800e94c <_dtoa_r+0x6fc>)
 800e78a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e78c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e790:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e794:	4454      	add	r4, sl
 800e796:	2900      	cmp	r1, #0
 800e798:	d045      	beq.n	800e826 <_dtoa_r+0x5d6>
 800e79a:	2000      	movs	r0, #0
 800e79c:	496c      	ldr	r1, [pc, #432]	@ (800e950 <_dtoa_r+0x700>)
 800e79e:	f7f2 f80b 	bl	80007b8 <__aeabi_ddiv>
 800e7a2:	4633      	mov	r3, r6
 800e7a4:	462a      	mov	r2, r5
 800e7a6:	f7f1 fd25 	bl	80001f4 <__aeabi_dsub>
 800e7aa:	4656      	mov	r6, sl
 800e7ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e7b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7b4:	f7f2 f986 	bl	8000ac4 <__aeabi_d2iz>
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	f7f1 fe69 	bl	8000490 <__aeabi_i2d>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7c6:	f7f1 fd15 	bl	80001f4 <__aeabi_dsub>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	3530      	adds	r5, #48	@ 0x30
 800e7d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e7d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e7d8:	f806 5b01 	strb.w	r5, [r6], #1
 800e7dc:	f7f2 f934 	bl	8000a48 <__aeabi_dcmplt>
 800e7e0:	2800      	cmp	r0, #0
 800e7e2:	d163      	bne.n	800e8ac <_dtoa_r+0x65c>
 800e7e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	495a      	ldr	r1, [pc, #360]	@ (800e954 <_dtoa_r+0x704>)
 800e7ec:	f7f1 fd02 	bl	80001f4 <__aeabi_dsub>
 800e7f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e7f4:	f7f2 f928 	bl	8000a48 <__aeabi_dcmplt>
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	f040 8087 	bne.w	800e90c <_dtoa_r+0x6bc>
 800e7fe:	42a6      	cmp	r6, r4
 800e800:	f43f af43 	beq.w	800e68a <_dtoa_r+0x43a>
 800e804:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e808:	2200      	movs	r2, #0
 800e80a:	4b53      	ldr	r3, [pc, #332]	@ (800e958 <_dtoa_r+0x708>)
 800e80c:	f7f1 feaa 	bl	8000564 <__aeabi_dmul>
 800e810:	2200      	movs	r2, #0
 800e812:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e81a:	4b4f      	ldr	r3, [pc, #316]	@ (800e958 <_dtoa_r+0x708>)
 800e81c:	f7f1 fea2 	bl	8000564 <__aeabi_dmul>
 800e820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e824:	e7c4      	b.n	800e7b0 <_dtoa_r+0x560>
 800e826:	4631      	mov	r1, r6
 800e828:	4628      	mov	r0, r5
 800e82a:	f7f1 fe9b 	bl	8000564 <__aeabi_dmul>
 800e82e:	4656      	mov	r6, sl
 800e830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e834:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e83a:	f7f2 f943 	bl	8000ac4 <__aeabi_d2iz>
 800e83e:	4605      	mov	r5, r0
 800e840:	f7f1 fe26 	bl	8000490 <__aeabi_i2d>
 800e844:	4602      	mov	r2, r0
 800e846:	460b      	mov	r3, r1
 800e848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e84c:	f7f1 fcd2 	bl	80001f4 <__aeabi_dsub>
 800e850:	4602      	mov	r2, r0
 800e852:	460b      	mov	r3, r1
 800e854:	3530      	adds	r5, #48	@ 0x30
 800e856:	f806 5b01 	strb.w	r5, [r6], #1
 800e85a:	42a6      	cmp	r6, r4
 800e85c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e860:	f04f 0200 	mov.w	r2, #0
 800e864:	d124      	bne.n	800e8b0 <_dtoa_r+0x660>
 800e866:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e86a:	4b39      	ldr	r3, [pc, #228]	@ (800e950 <_dtoa_r+0x700>)
 800e86c:	f7f1 fcc4 	bl	80001f8 <__adddf3>
 800e870:	4602      	mov	r2, r0
 800e872:	460b      	mov	r3, r1
 800e874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e878:	f7f2 f904 	bl	8000a84 <__aeabi_dcmpgt>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	d145      	bne.n	800e90c <_dtoa_r+0x6bc>
 800e880:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e884:	2000      	movs	r0, #0
 800e886:	4932      	ldr	r1, [pc, #200]	@ (800e950 <_dtoa_r+0x700>)
 800e888:	f7f1 fcb4 	bl	80001f4 <__aeabi_dsub>
 800e88c:	4602      	mov	r2, r0
 800e88e:	460b      	mov	r3, r1
 800e890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e894:	f7f2 f8d8 	bl	8000a48 <__aeabi_dcmplt>
 800e898:	2800      	cmp	r0, #0
 800e89a:	f43f aef6 	beq.w	800e68a <_dtoa_r+0x43a>
 800e89e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e8a0:	1e73      	subs	r3, r6, #1
 800e8a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e8a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e8a8:	2b30      	cmp	r3, #48	@ 0x30
 800e8aa:	d0f8      	beq.n	800e89e <_dtoa_r+0x64e>
 800e8ac:	9f04      	ldr	r7, [sp, #16]
 800e8ae:	e73f      	b.n	800e730 <_dtoa_r+0x4e0>
 800e8b0:	4b29      	ldr	r3, [pc, #164]	@ (800e958 <_dtoa_r+0x708>)
 800e8b2:	f7f1 fe57 	bl	8000564 <__aeabi_dmul>
 800e8b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8ba:	e7bc      	b.n	800e836 <_dtoa_r+0x5e6>
 800e8bc:	d10c      	bne.n	800e8d8 <_dtoa_r+0x688>
 800e8be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	4b25      	ldr	r3, [pc, #148]	@ (800e95c <_dtoa_r+0x70c>)
 800e8c6:	f7f1 fe4d 	bl	8000564 <__aeabi_dmul>
 800e8ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8ce:	f7f2 f8cf 	bl	8000a70 <__aeabi_dcmpge>
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	f000 815b 	beq.w	800eb8e <_dtoa_r+0x93e>
 800e8d8:	2400      	movs	r4, #0
 800e8da:	4625      	mov	r5, r4
 800e8dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e8de:	4656      	mov	r6, sl
 800e8e0:	43db      	mvns	r3, r3
 800e8e2:	9304      	str	r3, [sp, #16]
 800e8e4:	2700      	movs	r7, #0
 800e8e6:	4621      	mov	r1, r4
 800e8e8:	4658      	mov	r0, fp
 800e8ea:	f000 fb13 	bl	800ef14 <_Bfree>
 800e8ee:	2d00      	cmp	r5, #0
 800e8f0:	d0dc      	beq.n	800e8ac <_dtoa_r+0x65c>
 800e8f2:	b12f      	cbz	r7, 800e900 <_dtoa_r+0x6b0>
 800e8f4:	42af      	cmp	r7, r5
 800e8f6:	d003      	beq.n	800e900 <_dtoa_r+0x6b0>
 800e8f8:	4639      	mov	r1, r7
 800e8fa:	4658      	mov	r0, fp
 800e8fc:	f000 fb0a 	bl	800ef14 <_Bfree>
 800e900:	4629      	mov	r1, r5
 800e902:	4658      	mov	r0, fp
 800e904:	f000 fb06 	bl	800ef14 <_Bfree>
 800e908:	e7d0      	b.n	800e8ac <_dtoa_r+0x65c>
 800e90a:	9704      	str	r7, [sp, #16]
 800e90c:	4633      	mov	r3, r6
 800e90e:	461e      	mov	r6, r3
 800e910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e914:	2a39      	cmp	r2, #57	@ 0x39
 800e916:	d107      	bne.n	800e928 <_dtoa_r+0x6d8>
 800e918:	459a      	cmp	sl, r3
 800e91a:	d1f8      	bne.n	800e90e <_dtoa_r+0x6be>
 800e91c:	9a04      	ldr	r2, [sp, #16]
 800e91e:	3201      	adds	r2, #1
 800e920:	9204      	str	r2, [sp, #16]
 800e922:	2230      	movs	r2, #48	@ 0x30
 800e924:	f88a 2000 	strb.w	r2, [sl]
 800e928:	781a      	ldrb	r2, [r3, #0]
 800e92a:	3201      	adds	r2, #1
 800e92c:	701a      	strb	r2, [r3, #0]
 800e92e:	e7bd      	b.n	800e8ac <_dtoa_r+0x65c>
 800e930:	2200      	movs	r2, #0
 800e932:	4b09      	ldr	r3, [pc, #36]	@ (800e958 <_dtoa_r+0x708>)
 800e934:	f7f1 fe16 	bl	8000564 <__aeabi_dmul>
 800e938:	2200      	movs	r2, #0
 800e93a:	2300      	movs	r3, #0
 800e93c:	4604      	mov	r4, r0
 800e93e:	460d      	mov	r5, r1
 800e940:	f7f2 f878 	bl	8000a34 <__aeabi_dcmpeq>
 800e944:	2800      	cmp	r0, #0
 800e946:	f43f aebc 	beq.w	800e6c2 <_dtoa_r+0x472>
 800e94a:	e6f1      	b.n	800e730 <_dtoa_r+0x4e0>
 800e94c:	080104c8 	.word	0x080104c8
 800e950:	3fe00000 	.word	0x3fe00000
 800e954:	3ff00000 	.word	0x3ff00000
 800e958:	40240000 	.word	0x40240000
 800e95c:	40140000 	.word	0x40140000
 800e960:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e962:	2a00      	cmp	r2, #0
 800e964:	f000 80db 	beq.w	800eb1e <_dtoa_r+0x8ce>
 800e968:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e96a:	2a01      	cmp	r2, #1
 800e96c:	f300 80bf 	bgt.w	800eaee <_dtoa_r+0x89e>
 800e970:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e972:	2a00      	cmp	r2, #0
 800e974:	f000 80b7 	beq.w	800eae6 <_dtoa_r+0x896>
 800e978:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e97c:	4646      	mov	r6, r8
 800e97e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e980:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e982:	2101      	movs	r1, #1
 800e984:	441a      	add	r2, r3
 800e986:	4658      	mov	r0, fp
 800e988:	4498      	add	r8, r3
 800e98a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e98c:	f000 fb76 	bl	800f07c <__i2b>
 800e990:	4605      	mov	r5, r0
 800e992:	b15e      	cbz	r6, 800e9ac <_dtoa_r+0x75c>
 800e994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e996:	2b00      	cmp	r3, #0
 800e998:	dd08      	ble.n	800e9ac <_dtoa_r+0x75c>
 800e99a:	42b3      	cmp	r3, r6
 800e99c:	bfa8      	it	ge
 800e99e:	4633      	movge	r3, r6
 800e9a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9a2:	eba8 0803 	sub.w	r8, r8, r3
 800e9a6:	1af6      	subs	r6, r6, r3
 800e9a8:	1ad3      	subs	r3, r2, r3
 800e9aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9ae:	b1f3      	cbz	r3, 800e9ee <_dtoa_r+0x79e>
 800e9b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f000 80b7 	beq.w	800eb26 <_dtoa_r+0x8d6>
 800e9b8:	b18c      	cbz	r4, 800e9de <_dtoa_r+0x78e>
 800e9ba:	4629      	mov	r1, r5
 800e9bc:	4622      	mov	r2, r4
 800e9be:	4658      	mov	r0, fp
 800e9c0:	f000 fc1a 	bl	800f1f8 <__pow5mult>
 800e9c4:	464a      	mov	r2, r9
 800e9c6:	4601      	mov	r1, r0
 800e9c8:	4605      	mov	r5, r0
 800e9ca:	4658      	mov	r0, fp
 800e9cc:	f000 fb6c 	bl	800f0a8 <__multiply>
 800e9d0:	4649      	mov	r1, r9
 800e9d2:	9004      	str	r0, [sp, #16]
 800e9d4:	4658      	mov	r0, fp
 800e9d6:	f000 fa9d 	bl	800ef14 <_Bfree>
 800e9da:	9b04      	ldr	r3, [sp, #16]
 800e9dc:	4699      	mov	r9, r3
 800e9de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9e0:	1b1a      	subs	r2, r3, r4
 800e9e2:	d004      	beq.n	800e9ee <_dtoa_r+0x79e>
 800e9e4:	4649      	mov	r1, r9
 800e9e6:	4658      	mov	r0, fp
 800e9e8:	f000 fc06 	bl	800f1f8 <__pow5mult>
 800e9ec:	4681      	mov	r9, r0
 800e9ee:	2101      	movs	r1, #1
 800e9f0:	4658      	mov	r0, fp
 800e9f2:	f000 fb43 	bl	800f07c <__i2b>
 800e9f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9f8:	4604      	mov	r4, r0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f000 81c9 	beq.w	800ed92 <_dtoa_r+0xb42>
 800ea00:	461a      	mov	r2, r3
 800ea02:	4601      	mov	r1, r0
 800ea04:	4658      	mov	r0, fp
 800ea06:	f000 fbf7 	bl	800f1f8 <__pow5mult>
 800ea0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	f300 808f 	bgt.w	800eb32 <_dtoa_r+0x8e2>
 800ea14:	9b02      	ldr	r3, [sp, #8]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f040 8087 	bne.w	800eb2a <_dtoa_r+0x8da>
 800ea1c:	9b03      	ldr	r3, [sp, #12]
 800ea1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	f040 8083 	bne.w	800eb2e <_dtoa_r+0x8de>
 800ea28:	9b03      	ldr	r3, [sp, #12]
 800ea2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea2e:	0d1b      	lsrs	r3, r3, #20
 800ea30:	051b      	lsls	r3, r3, #20
 800ea32:	b12b      	cbz	r3, 800ea40 <_dtoa_r+0x7f0>
 800ea34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea36:	f108 0801 	add.w	r8, r8, #1
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea3e:	2301      	movs	r3, #1
 800ea40:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f000 81aa 	beq.w	800ed9e <_dtoa_r+0xb4e>
 800ea4a:	6923      	ldr	r3, [r4, #16]
 800ea4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea50:	6918      	ldr	r0, [r3, #16]
 800ea52:	f000 fac7 	bl	800efe4 <__hi0bits>
 800ea56:	f1c0 0020 	rsb	r0, r0, #32
 800ea5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea5c:	4418      	add	r0, r3
 800ea5e:	f010 001f 	ands.w	r0, r0, #31
 800ea62:	d071      	beq.n	800eb48 <_dtoa_r+0x8f8>
 800ea64:	f1c0 0320 	rsb	r3, r0, #32
 800ea68:	2b04      	cmp	r3, #4
 800ea6a:	dd65      	ble.n	800eb38 <_dtoa_r+0x8e8>
 800ea6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea6e:	f1c0 001c 	rsb	r0, r0, #28
 800ea72:	4403      	add	r3, r0
 800ea74:	4480      	add	r8, r0
 800ea76:	4406      	add	r6, r0
 800ea78:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea7a:	f1b8 0f00 	cmp.w	r8, #0
 800ea7e:	dd05      	ble.n	800ea8c <_dtoa_r+0x83c>
 800ea80:	4649      	mov	r1, r9
 800ea82:	4642      	mov	r2, r8
 800ea84:	4658      	mov	r0, fp
 800ea86:	f000 fc11 	bl	800f2ac <__lshift>
 800ea8a:	4681      	mov	r9, r0
 800ea8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	dd05      	ble.n	800ea9e <_dtoa_r+0x84e>
 800ea92:	4621      	mov	r1, r4
 800ea94:	461a      	mov	r2, r3
 800ea96:	4658      	mov	r0, fp
 800ea98:	f000 fc08 	bl	800f2ac <__lshift>
 800ea9c:	4604      	mov	r4, r0
 800ea9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d053      	beq.n	800eb4c <_dtoa_r+0x8fc>
 800eaa4:	4621      	mov	r1, r4
 800eaa6:	4648      	mov	r0, r9
 800eaa8:	f000 fc6c 	bl	800f384 <__mcmp>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	da4d      	bge.n	800eb4c <_dtoa_r+0x8fc>
 800eab0:	1e7b      	subs	r3, r7, #1
 800eab2:	4649      	mov	r1, r9
 800eab4:	9304      	str	r3, [sp, #16]
 800eab6:	220a      	movs	r2, #10
 800eab8:	2300      	movs	r3, #0
 800eaba:	4658      	mov	r0, fp
 800eabc:	f000 fa4c 	bl	800ef58 <__multadd>
 800eac0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eac2:	4681      	mov	r9, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	f000 816c 	beq.w	800eda2 <_dtoa_r+0xb52>
 800eaca:	2300      	movs	r3, #0
 800eacc:	4629      	mov	r1, r5
 800eace:	220a      	movs	r2, #10
 800ead0:	4658      	mov	r0, fp
 800ead2:	f000 fa41 	bl	800ef58 <__multadd>
 800ead6:	9b08      	ldr	r3, [sp, #32]
 800ead8:	4605      	mov	r5, r0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	dc61      	bgt.n	800eba2 <_dtoa_r+0x952>
 800eade:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800eae0:	2b02      	cmp	r3, #2
 800eae2:	dc3b      	bgt.n	800eb5c <_dtoa_r+0x90c>
 800eae4:	e05d      	b.n	800eba2 <_dtoa_r+0x952>
 800eae6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eae8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800eaec:	e746      	b.n	800e97c <_dtoa_r+0x72c>
 800eaee:	9b07      	ldr	r3, [sp, #28]
 800eaf0:	1e5c      	subs	r4, r3, #1
 800eaf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eaf4:	42a3      	cmp	r3, r4
 800eaf6:	bfbf      	itttt	lt
 800eaf8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800eafa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800eafc:	1ae3      	sublt	r3, r4, r3
 800eafe:	18d2      	addlt	r2, r2, r3
 800eb00:	bfa8      	it	ge
 800eb02:	1b1c      	subge	r4, r3, r4
 800eb04:	9b07      	ldr	r3, [sp, #28]
 800eb06:	bfbe      	ittt	lt
 800eb08:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800eb0a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800eb0c:	2400      	movlt	r4, #0
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	bfb5      	itete	lt
 800eb12:	eba8 0603 	sublt.w	r6, r8, r3
 800eb16:	4646      	movge	r6, r8
 800eb18:	2300      	movlt	r3, #0
 800eb1a:	9b07      	ldrge	r3, [sp, #28]
 800eb1c:	e730      	b.n	800e980 <_dtoa_r+0x730>
 800eb1e:	4646      	mov	r6, r8
 800eb20:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800eb22:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800eb24:	e735      	b.n	800e992 <_dtoa_r+0x742>
 800eb26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb28:	e75c      	b.n	800e9e4 <_dtoa_r+0x794>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	e788      	b.n	800ea40 <_dtoa_r+0x7f0>
 800eb2e:	9b02      	ldr	r3, [sp, #8]
 800eb30:	e786      	b.n	800ea40 <_dtoa_r+0x7f0>
 800eb32:	2300      	movs	r3, #0
 800eb34:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb36:	e788      	b.n	800ea4a <_dtoa_r+0x7fa>
 800eb38:	d09f      	beq.n	800ea7a <_dtoa_r+0x82a>
 800eb3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb3c:	331c      	adds	r3, #28
 800eb3e:	441a      	add	r2, r3
 800eb40:	4498      	add	r8, r3
 800eb42:	441e      	add	r6, r3
 800eb44:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb46:	e798      	b.n	800ea7a <_dtoa_r+0x82a>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	e7f6      	b.n	800eb3a <_dtoa_r+0x8ea>
 800eb4c:	9b07      	ldr	r3, [sp, #28]
 800eb4e:	9704      	str	r7, [sp, #16]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	dc20      	bgt.n	800eb96 <_dtoa_r+0x946>
 800eb54:	9308      	str	r3, [sp, #32]
 800eb56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800eb58:	2b02      	cmp	r3, #2
 800eb5a:	dd1e      	ble.n	800eb9a <_dtoa_r+0x94a>
 800eb5c:	9b08      	ldr	r3, [sp, #32]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	f47f aebc 	bne.w	800e8dc <_dtoa_r+0x68c>
 800eb64:	4621      	mov	r1, r4
 800eb66:	2205      	movs	r2, #5
 800eb68:	4658      	mov	r0, fp
 800eb6a:	f000 f9f5 	bl	800ef58 <__multadd>
 800eb6e:	4601      	mov	r1, r0
 800eb70:	4604      	mov	r4, r0
 800eb72:	4648      	mov	r0, r9
 800eb74:	f000 fc06 	bl	800f384 <__mcmp>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	f77f aeaf 	ble.w	800e8dc <_dtoa_r+0x68c>
 800eb7e:	2331      	movs	r3, #49	@ 0x31
 800eb80:	4656      	mov	r6, sl
 800eb82:	f806 3b01 	strb.w	r3, [r6], #1
 800eb86:	9b04      	ldr	r3, [sp, #16]
 800eb88:	3301      	adds	r3, #1
 800eb8a:	9304      	str	r3, [sp, #16]
 800eb8c:	e6aa      	b.n	800e8e4 <_dtoa_r+0x694>
 800eb8e:	9c07      	ldr	r4, [sp, #28]
 800eb90:	9704      	str	r7, [sp, #16]
 800eb92:	4625      	mov	r5, r4
 800eb94:	e7f3      	b.n	800eb7e <_dtoa_r+0x92e>
 800eb96:	9b07      	ldr	r3, [sp, #28]
 800eb98:	9308      	str	r3, [sp, #32]
 800eb9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	f000 8104 	beq.w	800edaa <_dtoa_r+0xb5a>
 800eba2:	2e00      	cmp	r6, #0
 800eba4:	dd05      	ble.n	800ebb2 <_dtoa_r+0x962>
 800eba6:	4629      	mov	r1, r5
 800eba8:	4632      	mov	r2, r6
 800ebaa:	4658      	mov	r0, fp
 800ebac:	f000 fb7e 	bl	800f2ac <__lshift>
 800ebb0:	4605      	mov	r5, r0
 800ebb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d05a      	beq.n	800ec6e <_dtoa_r+0xa1e>
 800ebb8:	4658      	mov	r0, fp
 800ebba:	6869      	ldr	r1, [r5, #4]
 800ebbc:	f000 f96a 	bl	800ee94 <_Balloc>
 800ebc0:	4606      	mov	r6, r0
 800ebc2:	b928      	cbnz	r0, 800ebd0 <_dtoa_r+0x980>
 800ebc4:	4602      	mov	r2, r0
 800ebc6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ebca:	4b83      	ldr	r3, [pc, #524]	@ (800edd8 <_dtoa_r+0xb88>)
 800ebcc:	f7ff bb54 	b.w	800e278 <_dtoa_r+0x28>
 800ebd0:	692a      	ldr	r2, [r5, #16]
 800ebd2:	f105 010c 	add.w	r1, r5, #12
 800ebd6:	3202      	adds	r2, #2
 800ebd8:	0092      	lsls	r2, r2, #2
 800ebda:	300c      	adds	r0, #12
 800ebdc:	f7ff fa83 	bl	800e0e6 <memcpy>
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	4631      	mov	r1, r6
 800ebe4:	4658      	mov	r0, fp
 800ebe6:	f000 fb61 	bl	800f2ac <__lshift>
 800ebea:	462f      	mov	r7, r5
 800ebec:	4605      	mov	r5, r0
 800ebee:	f10a 0301 	add.w	r3, sl, #1
 800ebf2:	9307      	str	r3, [sp, #28]
 800ebf4:	9b08      	ldr	r3, [sp, #32]
 800ebf6:	4453      	add	r3, sl
 800ebf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebfa:	9b02      	ldr	r3, [sp, #8]
 800ebfc:	f003 0301 	and.w	r3, r3, #1
 800ec00:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec02:	9b07      	ldr	r3, [sp, #28]
 800ec04:	4621      	mov	r1, r4
 800ec06:	3b01      	subs	r3, #1
 800ec08:	4648      	mov	r0, r9
 800ec0a:	9302      	str	r3, [sp, #8]
 800ec0c:	f7ff fa98 	bl	800e140 <quorem>
 800ec10:	4639      	mov	r1, r7
 800ec12:	9008      	str	r0, [sp, #32]
 800ec14:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ec18:	4648      	mov	r0, r9
 800ec1a:	f000 fbb3 	bl	800f384 <__mcmp>
 800ec1e:	462a      	mov	r2, r5
 800ec20:	9009      	str	r0, [sp, #36]	@ 0x24
 800ec22:	4621      	mov	r1, r4
 800ec24:	4658      	mov	r0, fp
 800ec26:	f000 fbc9 	bl	800f3bc <__mdiff>
 800ec2a:	68c2      	ldr	r2, [r0, #12]
 800ec2c:	4606      	mov	r6, r0
 800ec2e:	bb02      	cbnz	r2, 800ec72 <_dtoa_r+0xa22>
 800ec30:	4601      	mov	r1, r0
 800ec32:	4648      	mov	r0, r9
 800ec34:	f000 fba6 	bl	800f384 <__mcmp>
 800ec38:	4602      	mov	r2, r0
 800ec3a:	4631      	mov	r1, r6
 800ec3c:	4658      	mov	r0, fp
 800ec3e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ec40:	f000 f968 	bl	800ef14 <_Bfree>
 800ec44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ec46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ec48:	9e07      	ldr	r6, [sp, #28]
 800ec4a:	ea43 0102 	orr.w	r1, r3, r2
 800ec4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec50:	4319      	orrs	r1, r3
 800ec52:	d110      	bne.n	800ec76 <_dtoa_r+0xa26>
 800ec54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec58:	d029      	beq.n	800ecae <_dtoa_r+0xa5e>
 800ec5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	dd02      	ble.n	800ec66 <_dtoa_r+0xa16>
 800ec60:	9b08      	ldr	r3, [sp, #32]
 800ec62:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ec66:	9b02      	ldr	r3, [sp, #8]
 800ec68:	f883 8000 	strb.w	r8, [r3]
 800ec6c:	e63b      	b.n	800e8e6 <_dtoa_r+0x696>
 800ec6e:	4628      	mov	r0, r5
 800ec70:	e7bb      	b.n	800ebea <_dtoa_r+0x99a>
 800ec72:	2201      	movs	r2, #1
 800ec74:	e7e1      	b.n	800ec3a <_dtoa_r+0x9ea>
 800ec76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	db04      	blt.n	800ec86 <_dtoa_r+0xa36>
 800ec7c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800ec7e:	430b      	orrs	r3, r1
 800ec80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec82:	430b      	orrs	r3, r1
 800ec84:	d120      	bne.n	800ecc8 <_dtoa_r+0xa78>
 800ec86:	2a00      	cmp	r2, #0
 800ec88:	dded      	ble.n	800ec66 <_dtoa_r+0xa16>
 800ec8a:	4649      	mov	r1, r9
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	4658      	mov	r0, fp
 800ec90:	f000 fb0c 	bl	800f2ac <__lshift>
 800ec94:	4621      	mov	r1, r4
 800ec96:	4681      	mov	r9, r0
 800ec98:	f000 fb74 	bl	800f384 <__mcmp>
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	dc03      	bgt.n	800eca8 <_dtoa_r+0xa58>
 800eca0:	d1e1      	bne.n	800ec66 <_dtoa_r+0xa16>
 800eca2:	f018 0f01 	tst.w	r8, #1
 800eca6:	d0de      	beq.n	800ec66 <_dtoa_r+0xa16>
 800eca8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ecac:	d1d8      	bne.n	800ec60 <_dtoa_r+0xa10>
 800ecae:	2339      	movs	r3, #57	@ 0x39
 800ecb0:	9a02      	ldr	r2, [sp, #8]
 800ecb2:	7013      	strb	r3, [r2, #0]
 800ecb4:	4633      	mov	r3, r6
 800ecb6:	461e      	mov	r6, r3
 800ecb8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	2a39      	cmp	r2, #57	@ 0x39
 800ecc0:	d052      	beq.n	800ed68 <_dtoa_r+0xb18>
 800ecc2:	3201      	adds	r2, #1
 800ecc4:	701a      	strb	r2, [r3, #0]
 800ecc6:	e60e      	b.n	800e8e6 <_dtoa_r+0x696>
 800ecc8:	2a00      	cmp	r2, #0
 800ecca:	dd07      	ble.n	800ecdc <_dtoa_r+0xa8c>
 800eccc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ecd0:	d0ed      	beq.n	800ecae <_dtoa_r+0xa5e>
 800ecd2:	9a02      	ldr	r2, [sp, #8]
 800ecd4:	f108 0301 	add.w	r3, r8, #1
 800ecd8:	7013      	strb	r3, [r2, #0]
 800ecda:	e604      	b.n	800e8e6 <_dtoa_r+0x696>
 800ecdc:	9b07      	ldr	r3, [sp, #28]
 800ecde:	9a07      	ldr	r2, [sp, #28]
 800ece0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ece4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ece6:	4293      	cmp	r3, r2
 800ece8:	d028      	beq.n	800ed3c <_dtoa_r+0xaec>
 800ecea:	4649      	mov	r1, r9
 800ecec:	2300      	movs	r3, #0
 800ecee:	220a      	movs	r2, #10
 800ecf0:	4658      	mov	r0, fp
 800ecf2:	f000 f931 	bl	800ef58 <__multadd>
 800ecf6:	42af      	cmp	r7, r5
 800ecf8:	4681      	mov	r9, r0
 800ecfa:	f04f 0300 	mov.w	r3, #0
 800ecfe:	f04f 020a 	mov.w	r2, #10
 800ed02:	4639      	mov	r1, r7
 800ed04:	4658      	mov	r0, fp
 800ed06:	d107      	bne.n	800ed18 <_dtoa_r+0xac8>
 800ed08:	f000 f926 	bl	800ef58 <__multadd>
 800ed0c:	4607      	mov	r7, r0
 800ed0e:	4605      	mov	r5, r0
 800ed10:	9b07      	ldr	r3, [sp, #28]
 800ed12:	3301      	adds	r3, #1
 800ed14:	9307      	str	r3, [sp, #28]
 800ed16:	e774      	b.n	800ec02 <_dtoa_r+0x9b2>
 800ed18:	f000 f91e 	bl	800ef58 <__multadd>
 800ed1c:	4629      	mov	r1, r5
 800ed1e:	4607      	mov	r7, r0
 800ed20:	2300      	movs	r3, #0
 800ed22:	220a      	movs	r2, #10
 800ed24:	4658      	mov	r0, fp
 800ed26:	f000 f917 	bl	800ef58 <__multadd>
 800ed2a:	4605      	mov	r5, r0
 800ed2c:	e7f0      	b.n	800ed10 <_dtoa_r+0xac0>
 800ed2e:	9b08      	ldr	r3, [sp, #32]
 800ed30:	2700      	movs	r7, #0
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	bfcc      	ite	gt
 800ed36:	461e      	movgt	r6, r3
 800ed38:	2601      	movle	r6, #1
 800ed3a:	4456      	add	r6, sl
 800ed3c:	4649      	mov	r1, r9
 800ed3e:	2201      	movs	r2, #1
 800ed40:	4658      	mov	r0, fp
 800ed42:	f000 fab3 	bl	800f2ac <__lshift>
 800ed46:	4621      	mov	r1, r4
 800ed48:	4681      	mov	r9, r0
 800ed4a:	f000 fb1b 	bl	800f384 <__mcmp>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	dcb0      	bgt.n	800ecb4 <_dtoa_r+0xa64>
 800ed52:	d102      	bne.n	800ed5a <_dtoa_r+0xb0a>
 800ed54:	f018 0f01 	tst.w	r8, #1
 800ed58:	d1ac      	bne.n	800ecb4 <_dtoa_r+0xa64>
 800ed5a:	4633      	mov	r3, r6
 800ed5c:	461e      	mov	r6, r3
 800ed5e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed62:	2a30      	cmp	r2, #48	@ 0x30
 800ed64:	d0fa      	beq.n	800ed5c <_dtoa_r+0xb0c>
 800ed66:	e5be      	b.n	800e8e6 <_dtoa_r+0x696>
 800ed68:	459a      	cmp	sl, r3
 800ed6a:	d1a4      	bne.n	800ecb6 <_dtoa_r+0xa66>
 800ed6c:	9b04      	ldr	r3, [sp, #16]
 800ed6e:	3301      	adds	r3, #1
 800ed70:	9304      	str	r3, [sp, #16]
 800ed72:	2331      	movs	r3, #49	@ 0x31
 800ed74:	f88a 3000 	strb.w	r3, [sl]
 800ed78:	e5b5      	b.n	800e8e6 <_dtoa_r+0x696>
 800ed7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ed7c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800eddc <_dtoa_r+0xb8c>
 800ed80:	b11b      	cbz	r3, 800ed8a <_dtoa_r+0xb3a>
 800ed82:	f10a 0308 	add.w	r3, sl, #8
 800ed86:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ed88:	6013      	str	r3, [r2, #0]
 800ed8a:	4650      	mov	r0, sl
 800ed8c:	b017      	add	sp, #92	@ 0x5c
 800ed8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	f77f ae3d 	ble.w	800ea14 <_dtoa_r+0x7c4>
 800ed9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed9c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed9e:	2001      	movs	r0, #1
 800eda0:	e65b      	b.n	800ea5a <_dtoa_r+0x80a>
 800eda2:	9b08      	ldr	r3, [sp, #32]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	f77f aed6 	ble.w	800eb56 <_dtoa_r+0x906>
 800edaa:	4656      	mov	r6, sl
 800edac:	4621      	mov	r1, r4
 800edae:	4648      	mov	r0, r9
 800edb0:	f7ff f9c6 	bl	800e140 <quorem>
 800edb4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800edb8:	9b08      	ldr	r3, [sp, #32]
 800edba:	f806 8b01 	strb.w	r8, [r6], #1
 800edbe:	eba6 020a 	sub.w	r2, r6, sl
 800edc2:	4293      	cmp	r3, r2
 800edc4:	ddb3      	ble.n	800ed2e <_dtoa_r+0xade>
 800edc6:	4649      	mov	r1, r9
 800edc8:	2300      	movs	r3, #0
 800edca:	220a      	movs	r2, #10
 800edcc:	4658      	mov	r0, fp
 800edce:	f000 f8c3 	bl	800ef58 <__multadd>
 800edd2:	4681      	mov	r9, r0
 800edd4:	e7ea      	b.n	800edac <_dtoa_r+0xb5c>
 800edd6:	bf00      	nop
 800edd8:	0801042a 	.word	0x0801042a
 800eddc:	080103ae 	.word	0x080103ae

0800ede0 <_free_r>:
 800ede0:	b538      	push	{r3, r4, r5, lr}
 800ede2:	4605      	mov	r5, r0
 800ede4:	2900      	cmp	r1, #0
 800ede6:	d040      	beq.n	800ee6a <_free_r+0x8a>
 800ede8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edec:	1f0c      	subs	r4, r1, #4
 800edee:	2b00      	cmp	r3, #0
 800edf0:	bfb8      	it	lt
 800edf2:	18e4      	addlt	r4, r4, r3
 800edf4:	f7fe fae4 	bl	800d3c0 <__malloc_lock>
 800edf8:	4a1c      	ldr	r2, [pc, #112]	@ (800ee6c <_free_r+0x8c>)
 800edfa:	6813      	ldr	r3, [r2, #0]
 800edfc:	b933      	cbnz	r3, 800ee0c <_free_r+0x2c>
 800edfe:	6063      	str	r3, [r4, #4]
 800ee00:	6014      	str	r4, [r2, #0]
 800ee02:	4628      	mov	r0, r5
 800ee04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee08:	f7fe bae0 	b.w	800d3cc <__malloc_unlock>
 800ee0c:	42a3      	cmp	r3, r4
 800ee0e:	d908      	bls.n	800ee22 <_free_r+0x42>
 800ee10:	6820      	ldr	r0, [r4, #0]
 800ee12:	1821      	adds	r1, r4, r0
 800ee14:	428b      	cmp	r3, r1
 800ee16:	bf01      	itttt	eq
 800ee18:	6819      	ldreq	r1, [r3, #0]
 800ee1a:	685b      	ldreq	r3, [r3, #4]
 800ee1c:	1809      	addeq	r1, r1, r0
 800ee1e:	6021      	streq	r1, [r4, #0]
 800ee20:	e7ed      	b.n	800edfe <_free_r+0x1e>
 800ee22:	461a      	mov	r2, r3
 800ee24:	685b      	ldr	r3, [r3, #4]
 800ee26:	b10b      	cbz	r3, 800ee2c <_free_r+0x4c>
 800ee28:	42a3      	cmp	r3, r4
 800ee2a:	d9fa      	bls.n	800ee22 <_free_r+0x42>
 800ee2c:	6811      	ldr	r1, [r2, #0]
 800ee2e:	1850      	adds	r0, r2, r1
 800ee30:	42a0      	cmp	r0, r4
 800ee32:	d10b      	bne.n	800ee4c <_free_r+0x6c>
 800ee34:	6820      	ldr	r0, [r4, #0]
 800ee36:	4401      	add	r1, r0
 800ee38:	1850      	adds	r0, r2, r1
 800ee3a:	4283      	cmp	r3, r0
 800ee3c:	6011      	str	r1, [r2, #0]
 800ee3e:	d1e0      	bne.n	800ee02 <_free_r+0x22>
 800ee40:	6818      	ldr	r0, [r3, #0]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	4408      	add	r0, r1
 800ee46:	6010      	str	r0, [r2, #0]
 800ee48:	6053      	str	r3, [r2, #4]
 800ee4a:	e7da      	b.n	800ee02 <_free_r+0x22>
 800ee4c:	d902      	bls.n	800ee54 <_free_r+0x74>
 800ee4e:	230c      	movs	r3, #12
 800ee50:	602b      	str	r3, [r5, #0]
 800ee52:	e7d6      	b.n	800ee02 <_free_r+0x22>
 800ee54:	6820      	ldr	r0, [r4, #0]
 800ee56:	1821      	adds	r1, r4, r0
 800ee58:	428b      	cmp	r3, r1
 800ee5a:	bf01      	itttt	eq
 800ee5c:	6819      	ldreq	r1, [r3, #0]
 800ee5e:	685b      	ldreq	r3, [r3, #4]
 800ee60:	1809      	addeq	r1, r1, r0
 800ee62:	6021      	streq	r1, [r4, #0]
 800ee64:	6063      	str	r3, [r4, #4]
 800ee66:	6054      	str	r4, [r2, #4]
 800ee68:	e7cb      	b.n	800ee02 <_free_r+0x22>
 800ee6a:	bd38      	pop	{r3, r4, r5, pc}
 800ee6c:	20004540 	.word	0x20004540

0800ee70 <__ascii_mbtowc>:
 800ee70:	b082      	sub	sp, #8
 800ee72:	b901      	cbnz	r1, 800ee76 <__ascii_mbtowc+0x6>
 800ee74:	a901      	add	r1, sp, #4
 800ee76:	b142      	cbz	r2, 800ee8a <__ascii_mbtowc+0x1a>
 800ee78:	b14b      	cbz	r3, 800ee8e <__ascii_mbtowc+0x1e>
 800ee7a:	7813      	ldrb	r3, [r2, #0]
 800ee7c:	600b      	str	r3, [r1, #0]
 800ee7e:	7812      	ldrb	r2, [r2, #0]
 800ee80:	1e10      	subs	r0, r2, #0
 800ee82:	bf18      	it	ne
 800ee84:	2001      	movne	r0, #1
 800ee86:	b002      	add	sp, #8
 800ee88:	4770      	bx	lr
 800ee8a:	4610      	mov	r0, r2
 800ee8c:	e7fb      	b.n	800ee86 <__ascii_mbtowc+0x16>
 800ee8e:	f06f 0001 	mvn.w	r0, #1
 800ee92:	e7f8      	b.n	800ee86 <__ascii_mbtowc+0x16>

0800ee94 <_Balloc>:
 800ee94:	b570      	push	{r4, r5, r6, lr}
 800ee96:	69c6      	ldr	r6, [r0, #28]
 800ee98:	4604      	mov	r4, r0
 800ee9a:	460d      	mov	r5, r1
 800ee9c:	b976      	cbnz	r6, 800eebc <_Balloc+0x28>
 800ee9e:	2010      	movs	r0, #16
 800eea0:	f7fe f9e4 	bl	800d26c <malloc>
 800eea4:	4602      	mov	r2, r0
 800eea6:	61e0      	str	r0, [r4, #28]
 800eea8:	b920      	cbnz	r0, 800eeb4 <_Balloc+0x20>
 800eeaa:	216b      	movs	r1, #107	@ 0x6b
 800eeac:	4b17      	ldr	r3, [pc, #92]	@ (800ef0c <_Balloc+0x78>)
 800eeae:	4818      	ldr	r0, [pc, #96]	@ (800ef10 <_Balloc+0x7c>)
 800eeb0:	f7ff f928 	bl	800e104 <__assert_func>
 800eeb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eeb8:	6006      	str	r6, [r0, #0]
 800eeba:	60c6      	str	r6, [r0, #12]
 800eebc:	69e6      	ldr	r6, [r4, #28]
 800eebe:	68f3      	ldr	r3, [r6, #12]
 800eec0:	b183      	cbz	r3, 800eee4 <_Balloc+0x50>
 800eec2:	69e3      	ldr	r3, [r4, #28]
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eeca:	b9b8      	cbnz	r0, 800eefc <_Balloc+0x68>
 800eecc:	2101      	movs	r1, #1
 800eece:	fa01 f605 	lsl.w	r6, r1, r5
 800eed2:	1d72      	adds	r2, r6, #5
 800eed4:	4620      	mov	r0, r4
 800eed6:	0092      	lsls	r2, r2, #2
 800eed8:	f000 fd9b 	bl	800fa12 <_calloc_r>
 800eedc:	b160      	cbz	r0, 800eef8 <_Balloc+0x64>
 800eede:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eee2:	e00e      	b.n	800ef02 <_Balloc+0x6e>
 800eee4:	2221      	movs	r2, #33	@ 0x21
 800eee6:	2104      	movs	r1, #4
 800eee8:	4620      	mov	r0, r4
 800eeea:	f000 fd92 	bl	800fa12 <_calloc_r>
 800eeee:	69e3      	ldr	r3, [r4, #28]
 800eef0:	60f0      	str	r0, [r6, #12]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d1e4      	bne.n	800eec2 <_Balloc+0x2e>
 800eef8:	2000      	movs	r0, #0
 800eefa:	bd70      	pop	{r4, r5, r6, pc}
 800eefc:	6802      	ldr	r2, [r0, #0]
 800eefe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ef02:	2300      	movs	r3, #0
 800ef04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef08:	e7f7      	b.n	800eefa <_Balloc+0x66>
 800ef0a:	bf00      	nop
 800ef0c:	080103bb 	.word	0x080103bb
 800ef10:	0801043b 	.word	0x0801043b

0800ef14 <_Bfree>:
 800ef14:	b570      	push	{r4, r5, r6, lr}
 800ef16:	69c6      	ldr	r6, [r0, #28]
 800ef18:	4605      	mov	r5, r0
 800ef1a:	460c      	mov	r4, r1
 800ef1c:	b976      	cbnz	r6, 800ef3c <_Bfree+0x28>
 800ef1e:	2010      	movs	r0, #16
 800ef20:	f7fe f9a4 	bl	800d26c <malloc>
 800ef24:	4602      	mov	r2, r0
 800ef26:	61e8      	str	r0, [r5, #28]
 800ef28:	b920      	cbnz	r0, 800ef34 <_Bfree+0x20>
 800ef2a:	218f      	movs	r1, #143	@ 0x8f
 800ef2c:	4b08      	ldr	r3, [pc, #32]	@ (800ef50 <_Bfree+0x3c>)
 800ef2e:	4809      	ldr	r0, [pc, #36]	@ (800ef54 <_Bfree+0x40>)
 800ef30:	f7ff f8e8 	bl	800e104 <__assert_func>
 800ef34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef38:	6006      	str	r6, [r0, #0]
 800ef3a:	60c6      	str	r6, [r0, #12]
 800ef3c:	b13c      	cbz	r4, 800ef4e <_Bfree+0x3a>
 800ef3e:	69eb      	ldr	r3, [r5, #28]
 800ef40:	6862      	ldr	r2, [r4, #4]
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef48:	6021      	str	r1, [r4, #0]
 800ef4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ef4e:	bd70      	pop	{r4, r5, r6, pc}
 800ef50:	080103bb 	.word	0x080103bb
 800ef54:	0801043b 	.word	0x0801043b

0800ef58 <__multadd>:
 800ef58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef5c:	4607      	mov	r7, r0
 800ef5e:	460c      	mov	r4, r1
 800ef60:	461e      	mov	r6, r3
 800ef62:	2000      	movs	r0, #0
 800ef64:	690d      	ldr	r5, [r1, #16]
 800ef66:	f101 0c14 	add.w	ip, r1, #20
 800ef6a:	f8dc 3000 	ldr.w	r3, [ip]
 800ef6e:	3001      	adds	r0, #1
 800ef70:	b299      	uxth	r1, r3
 800ef72:	fb02 6101 	mla	r1, r2, r1, r6
 800ef76:	0c1e      	lsrs	r6, r3, #16
 800ef78:	0c0b      	lsrs	r3, r1, #16
 800ef7a:	fb02 3306 	mla	r3, r2, r6, r3
 800ef7e:	b289      	uxth	r1, r1
 800ef80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ef84:	4285      	cmp	r5, r0
 800ef86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ef8a:	f84c 1b04 	str.w	r1, [ip], #4
 800ef8e:	dcec      	bgt.n	800ef6a <__multadd+0x12>
 800ef90:	b30e      	cbz	r6, 800efd6 <__multadd+0x7e>
 800ef92:	68a3      	ldr	r3, [r4, #8]
 800ef94:	42ab      	cmp	r3, r5
 800ef96:	dc19      	bgt.n	800efcc <__multadd+0x74>
 800ef98:	6861      	ldr	r1, [r4, #4]
 800ef9a:	4638      	mov	r0, r7
 800ef9c:	3101      	adds	r1, #1
 800ef9e:	f7ff ff79 	bl	800ee94 <_Balloc>
 800efa2:	4680      	mov	r8, r0
 800efa4:	b928      	cbnz	r0, 800efb2 <__multadd+0x5a>
 800efa6:	4602      	mov	r2, r0
 800efa8:	21ba      	movs	r1, #186	@ 0xba
 800efaa:	4b0c      	ldr	r3, [pc, #48]	@ (800efdc <__multadd+0x84>)
 800efac:	480c      	ldr	r0, [pc, #48]	@ (800efe0 <__multadd+0x88>)
 800efae:	f7ff f8a9 	bl	800e104 <__assert_func>
 800efb2:	6922      	ldr	r2, [r4, #16]
 800efb4:	f104 010c 	add.w	r1, r4, #12
 800efb8:	3202      	adds	r2, #2
 800efba:	0092      	lsls	r2, r2, #2
 800efbc:	300c      	adds	r0, #12
 800efbe:	f7ff f892 	bl	800e0e6 <memcpy>
 800efc2:	4621      	mov	r1, r4
 800efc4:	4638      	mov	r0, r7
 800efc6:	f7ff ffa5 	bl	800ef14 <_Bfree>
 800efca:	4644      	mov	r4, r8
 800efcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800efd0:	3501      	adds	r5, #1
 800efd2:	615e      	str	r6, [r3, #20]
 800efd4:	6125      	str	r5, [r4, #16]
 800efd6:	4620      	mov	r0, r4
 800efd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efdc:	0801042a 	.word	0x0801042a
 800efe0:	0801043b 	.word	0x0801043b

0800efe4 <__hi0bits>:
 800efe4:	4603      	mov	r3, r0
 800efe6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800efea:	bf3a      	itte	cc
 800efec:	0403      	lslcc	r3, r0, #16
 800efee:	2010      	movcc	r0, #16
 800eff0:	2000      	movcs	r0, #0
 800eff2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eff6:	bf3c      	itt	cc
 800eff8:	021b      	lslcc	r3, r3, #8
 800effa:	3008      	addcc	r0, #8
 800effc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f000:	bf3c      	itt	cc
 800f002:	011b      	lslcc	r3, r3, #4
 800f004:	3004      	addcc	r0, #4
 800f006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f00a:	bf3c      	itt	cc
 800f00c:	009b      	lslcc	r3, r3, #2
 800f00e:	3002      	addcc	r0, #2
 800f010:	2b00      	cmp	r3, #0
 800f012:	db05      	blt.n	800f020 <__hi0bits+0x3c>
 800f014:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f018:	f100 0001 	add.w	r0, r0, #1
 800f01c:	bf08      	it	eq
 800f01e:	2020      	moveq	r0, #32
 800f020:	4770      	bx	lr

0800f022 <__lo0bits>:
 800f022:	6803      	ldr	r3, [r0, #0]
 800f024:	4602      	mov	r2, r0
 800f026:	f013 0007 	ands.w	r0, r3, #7
 800f02a:	d00b      	beq.n	800f044 <__lo0bits+0x22>
 800f02c:	07d9      	lsls	r1, r3, #31
 800f02e:	d421      	bmi.n	800f074 <__lo0bits+0x52>
 800f030:	0798      	lsls	r0, r3, #30
 800f032:	bf49      	itett	mi
 800f034:	085b      	lsrmi	r3, r3, #1
 800f036:	089b      	lsrpl	r3, r3, #2
 800f038:	2001      	movmi	r0, #1
 800f03a:	6013      	strmi	r3, [r2, #0]
 800f03c:	bf5c      	itt	pl
 800f03e:	2002      	movpl	r0, #2
 800f040:	6013      	strpl	r3, [r2, #0]
 800f042:	4770      	bx	lr
 800f044:	b299      	uxth	r1, r3
 800f046:	b909      	cbnz	r1, 800f04c <__lo0bits+0x2a>
 800f048:	2010      	movs	r0, #16
 800f04a:	0c1b      	lsrs	r3, r3, #16
 800f04c:	b2d9      	uxtb	r1, r3
 800f04e:	b909      	cbnz	r1, 800f054 <__lo0bits+0x32>
 800f050:	3008      	adds	r0, #8
 800f052:	0a1b      	lsrs	r3, r3, #8
 800f054:	0719      	lsls	r1, r3, #28
 800f056:	bf04      	itt	eq
 800f058:	091b      	lsreq	r3, r3, #4
 800f05a:	3004      	addeq	r0, #4
 800f05c:	0799      	lsls	r1, r3, #30
 800f05e:	bf04      	itt	eq
 800f060:	089b      	lsreq	r3, r3, #2
 800f062:	3002      	addeq	r0, #2
 800f064:	07d9      	lsls	r1, r3, #31
 800f066:	d403      	bmi.n	800f070 <__lo0bits+0x4e>
 800f068:	085b      	lsrs	r3, r3, #1
 800f06a:	f100 0001 	add.w	r0, r0, #1
 800f06e:	d003      	beq.n	800f078 <__lo0bits+0x56>
 800f070:	6013      	str	r3, [r2, #0]
 800f072:	4770      	bx	lr
 800f074:	2000      	movs	r0, #0
 800f076:	4770      	bx	lr
 800f078:	2020      	movs	r0, #32
 800f07a:	4770      	bx	lr

0800f07c <__i2b>:
 800f07c:	b510      	push	{r4, lr}
 800f07e:	460c      	mov	r4, r1
 800f080:	2101      	movs	r1, #1
 800f082:	f7ff ff07 	bl	800ee94 <_Balloc>
 800f086:	4602      	mov	r2, r0
 800f088:	b928      	cbnz	r0, 800f096 <__i2b+0x1a>
 800f08a:	f240 1145 	movw	r1, #325	@ 0x145
 800f08e:	4b04      	ldr	r3, [pc, #16]	@ (800f0a0 <__i2b+0x24>)
 800f090:	4804      	ldr	r0, [pc, #16]	@ (800f0a4 <__i2b+0x28>)
 800f092:	f7ff f837 	bl	800e104 <__assert_func>
 800f096:	2301      	movs	r3, #1
 800f098:	6144      	str	r4, [r0, #20]
 800f09a:	6103      	str	r3, [r0, #16]
 800f09c:	bd10      	pop	{r4, pc}
 800f09e:	bf00      	nop
 800f0a0:	0801042a 	.word	0x0801042a
 800f0a4:	0801043b 	.word	0x0801043b

0800f0a8 <__multiply>:
 800f0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ac:	4614      	mov	r4, r2
 800f0ae:	690a      	ldr	r2, [r1, #16]
 800f0b0:	6923      	ldr	r3, [r4, #16]
 800f0b2:	460f      	mov	r7, r1
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	bfa2      	ittt	ge
 800f0b8:	4623      	movge	r3, r4
 800f0ba:	460c      	movge	r4, r1
 800f0bc:	461f      	movge	r7, r3
 800f0be:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f0c2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f0c6:	68a3      	ldr	r3, [r4, #8]
 800f0c8:	6861      	ldr	r1, [r4, #4]
 800f0ca:	eb0a 0609 	add.w	r6, sl, r9
 800f0ce:	42b3      	cmp	r3, r6
 800f0d0:	b085      	sub	sp, #20
 800f0d2:	bfb8      	it	lt
 800f0d4:	3101      	addlt	r1, #1
 800f0d6:	f7ff fedd 	bl	800ee94 <_Balloc>
 800f0da:	b930      	cbnz	r0, 800f0ea <__multiply+0x42>
 800f0dc:	4602      	mov	r2, r0
 800f0de:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f0e2:	4b43      	ldr	r3, [pc, #268]	@ (800f1f0 <__multiply+0x148>)
 800f0e4:	4843      	ldr	r0, [pc, #268]	@ (800f1f4 <__multiply+0x14c>)
 800f0e6:	f7ff f80d 	bl	800e104 <__assert_func>
 800f0ea:	f100 0514 	add.w	r5, r0, #20
 800f0ee:	462b      	mov	r3, r5
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f0f6:	4543      	cmp	r3, r8
 800f0f8:	d321      	bcc.n	800f13e <__multiply+0x96>
 800f0fa:	f107 0114 	add.w	r1, r7, #20
 800f0fe:	f104 0214 	add.w	r2, r4, #20
 800f102:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f106:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f10a:	9302      	str	r3, [sp, #8]
 800f10c:	1b13      	subs	r3, r2, r4
 800f10e:	3b15      	subs	r3, #21
 800f110:	f023 0303 	bic.w	r3, r3, #3
 800f114:	3304      	adds	r3, #4
 800f116:	f104 0715 	add.w	r7, r4, #21
 800f11a:	42ba      	cmp	r2, r7
 800f11c:	bf38      	it	cc
 800f11e:	2304      	movcc	r3, #4
 800f120:	9301      	str	r3, [sp, #4]
 800f122:	9b02      	ldr	r3, [sp, #8]
 800f124:	9103      	str	r1, [sp, #12]
 800f126:	428b      	cmp	r3, r1
 800f128:	d80c      	bhi.n	800f144 <__multiply+0x9c>
 800f12a:	2e00      	cmp	r6, #0
 800f12c:	dd03      	ble.n	800f136 <__multiply+0x8e>
 800f12e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f132:	2b00      	cmp	r3, #0
 800f134:	d05a      	beq.n	800f1ec <__multiply+0x144>
 800f136:	6106      	str	r6, [r0, #16]
 800f138:	b005      	add	sp, #20
 800f13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13e:	f843 2b04 	str.w	r2, [r3], #4
 800f142:	e7d8      	b.n	800f0f6 <__multiply+0x4e>
 800f144:	f8b1 a000 	ldrh.w	sl, [r1]
 800f148:	f1ba 0f00 	cmp.w	sl, #0
 800f14c:	d023      	beq.n	800f196 <__multiply+0xee>
 800f14e:	46a9      	mov	r9, r5
 800f150:	f04f 0c00 	mov.w	ip, #0
 800f154:	f104 0e14 	add.w	lr, r4, #20
 800f158:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f15c:	f8d9 3000 	ldr.w	r3, [r9]
 800f160:	fa1f fb87 	uxth.w	fp, r7
 800f164:	b29b      	uxth	r3, r3
 800f166:	fb0a 330b 	mla	r3, sl, fp, r3
 800f16a:	4463      	add	r3, ip
 800f16c:	f8d9 c000 	ldr.w	ip, [r9]
 800f170:	0c3f      	lsrs	r7, r7, #16
 800f172:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800f176:	fb0a c707 	mla	r7, sl, r7, ip
 800f17a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f17e:	b29b      	uxth	r3, r3
 800f180:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f184:	4572      	cmp	r2, lr
 800f186:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f18a:	f849 3b04 	str.w	r3, [r9], #4
 800f18e:	d8e3      	bhi.n	800f158 <__multiply+0xb0>
 800f190:	9b01      	ldr	r3, [sp, #4]
 800f192:	f845 c003 	str.w	ip, [r5, r3]
 800f196:	9b03      	ldr	r3, [sp, #12]
 800f198:	3104      	adds	r1, #4
 800f19a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f19e:	f1b9 0f00 	cmp.w	r9, #0
 800f1a2:	d021      	beq.n	800f1e8 <__multiply+0x140>
 800f1a4:	46ae      	mov	lr, r5
 800f1a6:	f04f 0a00 	mov.w	sl, #0
 800f1aa:	682b      	ldr	r3, [r5, #0]
 800f1ac:	f104 0c14 	add.w	ip, r4, #20
 800f1b0:	f8bc b000 	ldrh.w	fp, [ip]
 800f1b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	fb09 770b 	mla	r7, r9, fp, r7
 800f1be:	4457      	add	r7, sl
 800f1c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f1c4:	f84e 3b04 	str.w	r3, [lr], #4
 800f1c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f1cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f1d0:	f8be 3000 	ldrh.w	r3, [lr]
 800f1d4:	4562      	cmp	r2, ip
 800f1d6:	fb09 330a 	mla	r3, r9, sl, r3
 800f1da:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f1de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f1e2:	d8e5      	bhi.n	800f1b0 <__multiply+0x108>
 800f1e4:	9f01      	ldr	r7, [sp, #4]
 800f1e6:	51eb      	str	r3, [r5, r7]
 800f1e8:	3504      	adds	r5, #4
 800f1ea:	e79a      	b.n	800f122 <__multiply+0x7a>
 800f1ec:	3e01      	subs	r6, #1
 800f1ee:	e79c      	b.n	800f12a <__multiply+0x82>
 800f1f0:	0801042a 	.word	0x0801042a
 800f1f4:	0801043b 	.word	0x0801043b

0800f1f8 <__pow5mult>:
 800f1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1fc:	4615      	mov	r5, r2
 800f1fe:	f012 0203 	ands.w	r2, r2, #3
 800f202:	4607      	mov	r7, r0
 800f204:	460e      	mov	r6, r1
 800f206:	d007      	beq.n	800f218 <__pow5mult+0x20>
 800f208:	4c25      	ldr	r4, [pc, #148]	@ (800f2a0 <__pow5mult+0xa8>)
 800f20a:	3a01      	subs	r2, #1
 800f20c:	2300      	movs	r3, #0
 800f20e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f212:	f7ff fea1 	bl	800ef58 <__multadd>
 800f216:	4606      	mov	r6, r0
 800f218:	10ad      	asrs	r5, r5, #2
 800f21a:	d03d      	beq.n	800f298 <__pow5mult+0xa0>
 800f21c:	69fc      	ldr	r4, [r7, #28]
 800f21e:	b97c      	cbnz	r4, 800f240 <__pow5mult+0x48>
 800f220:	2010      	movs	r0, #16
 800f222:	f7fe f823 	bl	800d26c <malloc>
 800f226:	4602      	mov	r2, r0
 800f228:	61f8      	str	r0, [r7, #28]
 800f22a:	b928      	cbnz	r0, 800f238 <__pow5mult+0x40>
 800f22c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f230:	4b1c      	ldr	r3, [pc, #112]	@ (800f2a4 <__pow5mult+0xac>)
 800f232:	481d      	ldr	r0, [pc, #116]	@ (800f2a8 <__pow5mult+0xb0>)
 800f234:	f7fe ff66 	bl	800e104 <__assert_func>
 800f238:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f23c:	6004      	str	r4, [r0, #0]
 800f23e:	60c4      	str	r4, [r0, #12]
 800f240:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f244:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f248:	b94c      	cbnz	r4, 800f25e <__pow5mult+0x66>
 800f24a:	f240 2171 	movw	r1, #625	@ 0x271
 800f24e:	4638      	mov	r0, r7
 800f250:	f7ff ff14 	bl	800f07c <__i2b>
 800f254:	2300      	movs	r3, #0
 800f256:	4604      	mov	r4, r0
 800f258:	f8c8 0008 	str.w	r0, [r8, #8]
 800f25c:	6003      	str	r3, [r0, #0]
 800f25e:	f04f 0900 	mov.w	r9, #0
 800f262:	07eb      	lsls	r3, r5, #31
 800f264:	d50a      	bpl.n	800f27c <__pow5mult+0x84>
 800f266:	4631      	mov	r1, r6
 800f268:	4622      	mov	r2, r4
 800f26a:	4638      	mov	r0, r7
 800f26c:	f7ff ff1c 	bl	800f0a8 <__multiply>
 800f270:	4680      	mov	r8, r0
 800f272:	4631      	mov	r1, r6
 800f274:	4638      	mov	r0, r7
 800f276:	f7ff fe4d 	bl	800ef14 <_Bfree>
 800f27a:	4646      	mov	r6, r8
 800f27c:	106d      	asrs	r5, r5, #1
 800f27e:	d00b      	beq.n	800f298 <__pow5mult+0xa0>
 800f280:	6820      	ldr	r0, [r4, #0]
 800f282:	b938      	cbnz	r0, 800f294 <__pow5mult+0x9c>
 800f284:	4622      	mov	r2, r4
 800f286:	4621      	mov	r1, r4
 800f288:	4638      	mov	r0, r7
 800f28a:	f7ff ff0d 	bl	800f0a8 <__multiply>
 800f28e:	6020      	str	r0, [r4, #0]
 800f290:	f8c0 9000 	str.w	r9, [r0]
 800f294:	4604      	mov	r4, r0
 800f296:	e7e4      	b.n	800f262 <__pow5mult+0x6a>
 800f298:	4630      	mov	r0, r6
 800f29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f29e:	bf00      	nop
 800f2a0:	08010494 	.word	0x08010494
 800f2a4:	080103bb 	.word	0x080103bb
 800f2a8:	0801043b 	.word	0x0801043b

0800f2ac <__lshift>:
 800f2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2b0:	460c      	mov	r4, r1
 800f2b2:	4607      	mov	r7, r0
 800f2b4:	4691      	mov	r9, r2
 800f2b6:	6923      	ldr	r3, [r4, #16]
 800f2b8:	6849      	ldr	r1, [r1, #4]
 800f2ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f2be:	68a3      	ldr	r3, [r4, #8]
 800f2c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f2c4:	f108 0601 	add.w	r6, r8, #1
 800f2c8:	42b3      	cmp	r3, r6
 800f2ca:	db0b      	blt.n	800f2e4 <__lshift+0x38>
 800f2cc:	4638      	mov	r0, r7
 800f2ce:	f7ff fde1 	bl	800ee94 <_Balloc>
 800f2d2:	4605      	mov	r5, r0
 800f2d4:	b948      	cbnz	r0, 800f2ea <__lshift+0x3e>
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f2dc:	4b27      	ldr	r3, [pc, #156]	@ (800f37c <__lshift+0xd0>)
 800f2de:	4828      	ldr	r0, [pc, #160]	@ (800f380 <__lshift+0xd4>)
 800f2e0:	f7fe ff10 	bl	800e104 <__assert_func>
 800f2e4:	3101      	adds	r1, #1
 800f2e6:	005b      	lsls	r3, r3, #1
 800f2e8:	e7ee      	b.n	800f2c8 <__lshift+0x1c>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	f100 0114 	add.w	r1, r0, #20
 800f2f0:	f100 0210 	add.w	r2, r0, #16
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	4553      	cmp	r3, sl
 800f2f8:	db33      	blt.n	800f362 <__lshift+0xb6>
 800f2fa:	6920      	ldr	r0, [r4, #16]
 800f2fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f300:	f104 0314 	add.w	r3, r4, #20
 800f304:	f019 091f 	ands.w	r9, r9, #31
 800f308:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f30c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f310:	d02b      	beq.n	800f36a <__lshift+0xbe>
 800f312:	468a      	mov	sl, r1
 800f314:	2200      	movs	r2, #0
 800f316:	f1c9 0e20 	rsb	lr, r9, #32
 800f31a:	6818      	ldr	r0, [r3, #0]
 800f31c:	fa00 f009 	lsl.w	r0, r0, r9
 800f320:	4310      	orrs	r0, r2
 800f322:	f84a 0b04 	str.w	r0, [sl], #4
 800f326:	f853 2b04 	ldr.w	r2, [r3], #4
 800f32a:	459c      	cmp	ip, r3
 800f32c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f330:	d8f3      	bhi.n	800f31a <__lshift+0x6e>
 800f332:	ebac 0304 	sub.w	r3, ip, r4
 800f336:	3b15      	subs	r3, #21
 800f338:	f023 0303 	bic.w	r3, r3, #3
 800f33c:	3304      	adds	r3, #4
 800f33e:	f104 0015 	add.w	r0, r4, #21
 800f342:	4584      	cmp	ip, r0
 800f344:	bf38      	it	cc
 800f346:	2304      	movcc	r3, #4
 800f348:	50ca      	str	r2, [r1, r3]
 800f34a:	b10a      	cbz	r2, 800f350 <__lshift+0xa4>
 800f34c:	f108 0602 	add.w	r6, r8, #2
 800f350:	3e01      	subs	r6, #1
 800f352:	4638      	mov	r0, r7
 800f354:	4621      	mov	r1, r4
 800f356:	612e      	str	r6, [r5, #16]
 800f358:	f7ff fddc 	bl	800ef14 <_Bfree>
 800f35c:	4628      	mov	r0, r5
 800f35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f362:	f842 0f04 	str.w	r0, [r2, #4]!
 800f366:	3301      	adds	r3, #1
 800f368:	e7c5      	b.n	800f2f6 <__lshift+0x4a>
 800f36a:	3904      	subs	r1, #4
 800f36c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f370:	459c      	cmp	ip, r3
 800f372:	f841 2f04 	str.w	r2, [r1, #4]!
 800f376:	d8f9      	bhi.n	800f36c <__lshift+0xc0>
 800f378:	e7ea      	b.n	800f350 <__lshift+0xa4>
 800f37a:	bf00      	nop
 800f37c:	0801042a 	.word	0x0801042a
 800f380:	0801043b 	.word	0x0801043b

0800f384 <__mcmp>:
 800f384:	4603      	mov	r3, r0
 800f386:	690a      	ldr	r2, [r1, #16]
 800f388:	6900      	ldr	r0, [r0, #16]
 800f38a:	b530      	push	{r4, r5, lr}
 800f38c:	1a80      	subs	r0, r0, r2
 800f38e:	d10e      	bne.n	800f3ae <__mcmp+0x2a>
 800f390:	3314      	adds	r3, #20
 800f392:	3114      	adds	r1, #20
 800f394:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f398:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f39c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f3a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f3a4:	4295      	cmp	r5, r2
 800f3a6:	d003      	beq.n	800f3b0 <__mcmp+0x2c>
 800f3a8:	d205      	bcs.n	800f3b6 <__mcmp+0x32>
 800f3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ae:	bd30      	pop	{r4, r5, pc}
 800f3b0:	42a3      	cmp	r3, r4
 800f3b2:	d3f3      	bcc.n	800f39c <__mcmp+0x18>
 800f3b4:	e7fb      	b.n	800f3ae <__mcmp+0x2a>
 800f3b6:	2001      	movs	r0, #1
 800f3b8:	e7f9      	b.n	800f3ae <__mcmp+0x2a>
	...

0800f3bc <__mdiff>:
 800f3bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c0:	4689      	mov	r9, r1
 800f3c2:	4606      	mov	r6, r0
 800f3c4:	4611      	mov	r1, r2
 800f3c6:	4648      	mov	r0, r9
 800f3c8:	4614      	mov	r4, r2
 800f3ca:	f7ff ffdb 	bl	800f384 <__mcmp>
 800f3ce:	1e05      	subs	r5, r0, #0
 800f3d0:	d112      	bne.n	800f3f8 <__mdiff+0x3c>
 800f3d2:	4629      	mov	r1, r5
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	f7ff fd5d 	bl	800ee94 <_Balloc>
 800f3da:	4602      	mov	r2, r0
 800f3dc:	b928      	cbnz	r0, 800f3ea <__mdiff+0x2e>
 800f3de:	f240 2137 	movw	r1, #567	@ 0x237
 800f3e2:	4b3e      	ldr	r3, [pc, #248]	@ (800f4dc <__mdiff+0x120>)
 800f3e4:	483e      	ldr	r0, [pc, #248]	@ (800f4e0 <__mdiff+0x124>)
 800f3e6:	f7fe fe8d 	bl	800e104 <__assert_func>
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f3f0:	4610      	mov	r0, r2
 800f3f2:	b003      	add	sp, #12
 800f3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3f8:	bfbc      	itt	lt
 800f3fa:	464b      	movlt	r3, r9
 800f3fc:	46a1      	movlt	r9, r4
 800f3fe:	4630      	mov	r0, r6
 800f400:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f404:	bfba      	itte	lt
 800f406:	461c      	movlt	r4, r3
 800f408:	2501      	movlt	r5, #1
 800f40a:	2500      	movge	r5, #0
 800f40c:	f7ff fd42 	bl	800ee94 <_Balloc>
 800f410:	4602      	mov	r2, r0
 800f412:	b918      	cbnz	r0, 800f41c <__mdiff+0x60>
 800f414:	f240 2145 	movw	r1, #581	@ 0x245
 800f418:	4b30      	ldr	r3, [pc, #192]	@ (800f4dc <__mdiff+0x120>)
 800f41a:	e7e3      	b.n	800f3e4 <__mdiff+0x28>
 800f41c:	f100 0b14 	add.w	fp, r0, #20
 800f420:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f424:	f109 0310 	add.w	r3, r9, #16
 800f428:	60c5      	str	r5, [r0, #12]
 800f42a:	f04f 0c00 	mov.w	ip, #0
 800f42e:	f109 0514 	add.w	r5, r9, #20
 800f432:	46d9      	mov	r9, fp
 800f434:	6926      	ldr	r6, [r4, #16]
 800f436:	f104 0e14 	add.w	lr, r4, #20
 800f43a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f43e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f442:	9301      	str	r3, [sp, #4]
 800f444:	9b01      	ldr	r3, [sp, #4]
 800f446:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f44a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f44e:	b281      	uxth	r1, r0
 800f450:	9301      	str	r3, [sp, #4]
 800f452:	fa1f f38a 	uxth.w	r3, sl
 800f456:	1a5b      	subs	r3, r3, r1
 800f458:	0c00      	lsrs	r0, r0, #16
 800f45a:	4463      	add	r3, ip
 800f45c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f460:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f464:	b29b      	uxth	r3, r3
 800f466:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f46a:	4576      	cmp	r6, lr
 800f46c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f470:	f849 3b04 	str.w	r3, [r9], #4
 800f474:	d8e6      	bhi.n	800f444 <__mdiff+0x88>
 800f476:	1b33      	subs	r3, r6, r4
 800f478:	3b15      	subs	r3, #21
 800f47a:	f023 0303 	bic.w	r3, r3, #3
 800f47e:	3415      	adds	r4, #21
 800f480:	3304      	adds	r3, #4
 800f482:	42a6      	cmp	r6, r4
 800f484:	bf38      	it	cc
 800f486:	2304      	movcc	r3, #4
 800f488:	441d      	add	r5, r3
 800f48a:	445b      	add	r3, fp
 800f48c:	461e      	mov	r6, r3
 800f48e:	462c      	mov	r4, r5
 800f490:	4544      	cmp	r4, r8
 800f492:	d30e      	bcc.n	800f4b2 <__mdiff+0xf6>
 800f494:	f108 0103 	add.w	r1, r8, #3
 800f498:	1b49      	subs	r1, r1, r5
 800f49a:	f021 0103 	bic.w	r1, r1, #3
 800f49e:	3d03      	subs	r5, #3
 800f4a0:	45a8      	cmp	r8, r5
 800f4a2:	bf38      	it	cc
 800f4a4:	2100      	movcc	r1, #0
 800f4a6:	440b      	add	r3, r1
 800f4a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f4ac:	b199      	cbz	r1, 800f4d6 <__mdiff+0x11a>
 800f4ae:	6117      	str	r7, [r2, #16]
 800f4b0:	e79e      	b.n	800f3f0 <__mdiff+0x34>
 800f4b2:	46e6      	mov	lr, ip
 800f4b4:	f854 1b04 	ldr.w	r1, [r4], #4
 800f4b8:	fa1f fc81 	uxth.w	ip, r1
 800f4bc:	44f4      	add	ip, lr
 800f4be:	0c08      	lsrs	r0, r1, #16
 800f4c0:	4471      	add	r1, lr
 800f4c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f4c6:	b289      	uxth	r1, r1
 800f4c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f4cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f4d0:	f846 1b04 	str.w	r1, [r6], #4
 800f4d4:	e7dc      	b.n	800f490 <__mdiff+0xd4>
 800f4d6:	3f01      	subs	r7, #1
 800f4d8:	e7e6      	b.n	800f4a8 <__mdiff+0xec>
 800f4da:	bf00      	nop
 800f4dc:	0801042a 	.word	0x0801042a
 800f4e0:	0801043b 	.word	0x0801043b

0800f4e4 <__d2b>:
 800f4e4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800f4e8:	2101      	movs	r1, #1
 800f4ea:	4690      	mov	r8, r2
 800f4ec:	4699      	mov	r9, r3
 800f4ee:	9e08      	ldr	r6, [sp, #32]
 800f4f0:	f7ff fcd0 	bl	800ee94 <_Balloc>
 800f4f4:	4604      	mov	r4, r0
 800f4f6:	b930      	cbnz	r0, 800f506 <__d2b+0x22>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	f240 310f 	movw	r1, #783	@ 0x30f
 800f4fe:	4b23      	ldr	r3, [pc, #140]	@ (800f58c <__d2b+0xa8>)
 800f500:	4823      	ldr	r0, [pc, #140]	@ (800f590 <__d2b+0xac>)
 800f502:	f7fe fdff 	bl	800e104 <__assert_func>
 800f506:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f50a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f50e:	b10d      	cbz	r5, 800f514 <__d2b+0x30>
 800f510:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f514:	9301      	str	r3, [sp, #4]
 800f516:	f1b8 0300 	subs.w	r3, r8, #0
 800f51a:	d024      	beq.n	800f566 <__d2b+0x82>
 800f51c:	4668      	mov	r0, sp
 800f51e:	9300      	str	r3, [sp, #0]
 800f520:	f7ff fd7f 	bl	800f022 <__lo0bits>
 800f524:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f528:	b1d8      	cbz	r0, 800f562 <__d2b+0x7e>
 800f52a:	f1c0 0320 	rsb	r3, r0, #32
 800f52e:	fa02 f303 	lsl.w	r3, r2, r3
 800f532:	430b      	orrs	r3, r1
 800f534:	40c2      	lsrs	r2, r0
 800f536:	6163      	str	r3, [r4, #20]
 800f538:	9201      	str	r2, [sp, #4]
 800f53a:	9b01      	ldr	r3, [sp, #4]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	bf0c      	ite	eq
 800f540:	2201      	moveq	r2, #1
 800f542:	2202      	movne	r2, #2
 800f544:	61a3      	str	r3, [r4, #24]
 800f546:	6122      	str	r2, [r4, #16]
 800f548:	b1ad      	cbz	r5, 800f576 <__d2b+0x92>
 800f54a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f54e:	4405      	add	r5, r0
 800f550:	6035      	str	r5, [r6, #0]
 800f552:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f558:	6018      	str	r0, [r3, #0]
 800f55a:	4620      	mov	r0, r4
 800f55c:	b002      	add	sp, #8
 800f55e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800f562:	6161      	str	r1, [r4, #20]
 800f564:	e7e9      	b.n	800f53a <__d2b+0x56>
 800f566:	a801      	add	r0, sp, #4
 800f568:	f7ff fd5b 	bl	800f022 <__lo0bits>
 800f56c:	9b01      	ldr	r3, [sp, #4]
 800f56e:	2201      	movs	r2, #1
 800f570:	6163      	str	r3, [r4, #20]
 800f572:	3020      	adds	r0, #32
 800f574:	e7e7      	b.n	800f546 <__d2b+0x62>
 800f576:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f57a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f57e:	6030      	str	r0, [r6, #0]
 800f580:	6918      	ldr	r0, [r3, #16]
 800f582:	f7ff fd2f 	bl	800efe4 <__hi0bits>
 800f586:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f58a:	e7e4      	b.n	800f556 <__d2b+0x72>
 800f58c:	0801042a 	.word	0x0801042a
 800f590:	0801043b 	.word	0x0801043b

0800f594 <__ascii_wctomb>:
 800f594:	4603      	mov	r3, r0
 800f596:	4608      	mov	r0, r1
 800f598:	b141      	cbz	r1, 800f5ac <__ascii_wctomb+0x18>
 800f59a:	2aff      	cmp	r2, #255	@ 0xff
 800f59c:	d904      	bls.n	800f5a8 <__ascii_wctomb+0x14>
 800f59e:	228a      	movs	r2, #138	@ 0x8a
 800f5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a4:	601a      	str	r2, [r3, #0]
 800f5a6:	4770      	bx	lr
 800f5a8:	2001      	movs	r0, #1
 800f5aa:	700a      	strb	r2, [r1, #0]
 800f5ac:	4770      	bx	lr

0800f5ae <__ssputs_r>:
 800f5ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5b2:	461f      	mov	r7, r3
 800f5b4:	688e      	ldr	r6, [r1, #8]
 800f5b6:	4682      	mov	sl, r0
 800f5b8:	42be      	cmp	r6, r7
 800f5ba:	460c      	mov	r4, r1
 800f5bc:	4690      	mov	r8, r2
 800f5be:	680b      	ldr	r3, [r1, #0]
 800f5c0:	d82d      	bhi.n	800f61e <__ssputs_r+0x70>
 800f5c2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5c6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f5ca:	d026      	beq.n	800f61a <__ssputs_r+0x6c>
 800f5cc:	6965      	ldr	r5, [r4, #20]
 800f5ce:	6909      	ldr	r1, [r1, #16]
 800f5d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5d4:	eba3 0901 	sub.w	r9, r3, r1
 800f5d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5dc:	1c7b      	adds	r3, r7, #1
 800f5de:	444b      	add	r3, r9
 800f5e0:	106d      	asrs	r5, r5, #1
 800f5e2:	429d      	cmp	r5, r3
 800f5e4:	bf38      	it	cc
 800f5e6:	461d      	movcc	r5, r3
 800f5e8:	0553      	lsls	r3, r2, #21
 800f5ea:	d527      	bpl.n	800f63c <__ssputs_r+0x8e>
 800f5ec:	4629      	mov	r1, r5
 800f5ee:	f7fd fe67 	bl	800d2c0 <_malloc_r>
 800f5f2:	4606      	mov	r6, r0
 800f5f4:	b360      	cbz	r0, 800f650 <__ssputs_r+0xa2>
 800f5f6:	464a      	mov	r2, r9
 800f5f8:	6921      	ldr	r1, [r4, #16]
 800f5fa:	f7fe fd74 	bl	800e0e6 <memcpy>
 800f5fe:	89a3      	ldrh	r3, [r4, #12]
 800f600:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f608:	81a3      	strh	r3, [r4, #12]
 800f60a:	6126      	str	r6, [r4, #16]
 800f60c:	444e      	add	r6, r9
 800f60e:	6026      	str	r6, [r4, #0]
 800f610:	463e      	mov	r6, r7
 800f612:	6165      	str	r5, [r4, #20]
 800f614:	eba5 0509 	sub.w	r5, r5, r9
 800f618:	60a5      	str	r5, [r4, #8]
 800f61a:	42be      	cmp	r6, r7
 800f61c:	d900      	bls.n	800f620 <__ssputs_r+0x72>
 800f61e:	463e      	mov	r6, r7
 800f620:	4632      	mov	r2, r6
 800f622:	4641      	mov	r1, r8
 800f624:	6820      	ldr	r0, [r4, #0]
 800f626:	f000 f9d3 	bl	800f9d0 <memmove>
 800f62a:	2000      	movs	r0, #0
 800f62c:	68a3      	ldr	r3, [r4, #8]
 800f62e:	1b9b      	subs	r3, r3, r6
 800f630:	60a3      	str	r3, [r4, #8]
 800f632:	6823      	ldr	r3, [r4, #0]
 800f634:	4433      	add	r3, r6
 800f636:	6023      	str	r3, [r4, #0]
 800f638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f63c:	462a      	mov	r2, r5
 800f63e:	f000 f9fc 	bl	800fa3a <_realloc_r>
 800f642:	4606      	mov	r6, r0
 800f644:	2800      	cmp	r0, #0
 800f646:	d1e0      	bne.n	800f60a <__ssputs_r+0x5c>
 800f648:	4650      	mov	r0, sl
 800f64a:	6921      	ldr	r1, [r4, #16]
 800f64c:	f7ff fbc8 	bl	800ede0 <_free_r>
 800f650:	230c      	movs	r3, #12
 800f652:	f8ca 3000 	str.w	r3, [sl]
 800f656:	89a3      	ldrh	r3, [r4, #12]
 800f658:	f04f 30ff 	mov.w	r0, #4294967295
 800f65c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f660:	81a3      	strh	r3, [r4, #12]
 800f662:	e7e9      	b.n	800f638 <__ssputs_r+0x8a>

0800f664 <_svfiprintf_r>:
 800f664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f668:	4698      	mov	r8, r3
 800f66a:	898b      	ldrh	r3, [r1, #12]
 800f66c:	4607      	mov	r7, r0
 800f66e:	061b      	lsls	r3, r3, #24
 800f670:	460d      	mov	r5, r1
 800f672:	4614      	mov	r4, r2
 800f674:	b09d      	sub	sp, #116	@ 0x74
 800f676:	d510      	bpl.n	800f69a <_svfiprintf_r+0x36>
 800f678:	690b      	ldr	r3, [r1, #16]
 800f67a:	b973      	cbnz	r3, 800f69a <_svfiprintf_r+0x36>
 800f67c:	2140      	movs	r1, #64	@ 0x40
 800f67e:	f7fd fe1f 	bl	800d2c0 <_malloc_r>
 800f682:	6028      	str	r0, [r5, #0]
 800f684:	6128      	str	r0, [r5, #16]
 800f686:	b930      	cbnz	r0, 800f696 <_svfiprintf_r+0x32>
 800f688:	230c      	movs	r3, #12
 800f68a:	603b      	str	r3, [r7, #0]
 800f68c:	f04f 30ff 	mov.w	r0, #4294967295
 800f690:	b01d      	add	sp, #116	@ 0x74
 800f692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f696:	2340      	movs	r3, #64	@ 0x40
 800f698:	616b      	str	r3, [r5, #20]
 800f69a:	2300      	movs	r3, #0
 800f69c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f69e:	2320      	movs	r3, #32
 800f6a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f6a4:	2330      	movs	r3, #48	@ 0x30
 800f6a6:	f04f 0901 	mov.w	r9, #1
 800f6aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800f848 <_svfiprintf_r+0x1e4>
 800f6b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f6b6:	4623      	mov	r3, r4
 800f6b8:	469a      	mov	sl, r3
 800f6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6be:	b10a      	cbz	r2, 800f6c4 <_svfiprintf_r+0x60>
 800f6c0:	2a25      	cmp	r2, #37	@ 0x25
 800f6c2:	d1f9      	bne.n	800f6b8 <_svfiprintf_r+0x54>
 800f6c4:	ebba 0b04 	subs.w	fp, sl, r4
 800f6c8:	d00b      	beq.n	800f6e2 <_svfiprintf_r+0x7e>
 800f6ca:	465b      	mov	r3, fp
 800f6cc:	4622      	mov	r2, r4
 800f6ce:	4629      	mov	r1, r5
 800f6d0:	4638      	mov	r0, r7
 800f6d2:	f7ff ff6c 	bl	800f5ae <__ssputs_r>
 800f6d6:	3001      	adds	r0, #1
 800f6d8:	f000 80a7 	beq.w	800f82a <_svfiprintf_r+0x1c6>
 800f6dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f6de:	445a      	add	r2, fp
 800f6e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	f000 809f 	beq.w	800f82a <_svfiprintf_r+0x1c6>
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f6f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6f6:	f10a 0a01 	add.w	sl, sl, #1
 800f6fa:	9304      	str	r3, [sp, #16]
 800f6fc:	9307      	str	r3, [sp, #28]
 800f6fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f702:	931a      	str	r3, [sp, #104]	@ 0x68
 800f704:	4654      	mov	r4, sl
 800f706:	2205      	movs	r2, #5
 800f708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f70c:	484e      	ldr	r0, [pc, #312]	@ (800f848 <_svfiprintf_r+0x1e4>)
 800f70e:	f7fe fcdc 	bl	800e0ca <memchr>
 800f712:	9a04      	ldr	r2, [sp, #16]
 800f714:	b9d8      	cbnz	r0, 800f74e <_svfiprintf_r+0xea>
 800f716:	06d0      	lsls	r0, r2, #27
 800f718:	bf44      	itt	mi
 800f71a:	2320      	movmi	r3, #32
 800f71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f720:	0711      	lsls	r1, r2, #28
 800f722:	bf44      	itt	mi
 800f724:	232b      	movmi	r3, #43	@ 0x2b
 800f726:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f72a:	f89a 3000 	ldrb.w	r3, [sl]
 800f72e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f730:	d015      	beq.n	800f75e <_svfiprintf_r+0xfa>
 800f732:	4654      	mov	r4, sl
 800f734:	2000      	movs	r0, #0
 800f736:	f04f 0c0a 	mov.w	ip, #10
 800f73a:	9a07      	ldr	r2, [sp, #28]
 800f73c:	4621      	mov	r1, r4
 800f73e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f742:	3b30      	subs	r3, #48	@ 0x30
 800f744:	2b09      	cmp	r3, #9
 800f746:	d94b      	bls.n	800f7e0 <_svfiprintf_r+0x17c>
 800f748:	b1b0      	cbz	r0, 800f778 <_svfiprintf_r+0x114>
 800f74a:	9207      	str	r2, [sp, #28]
 800f74c:	e014      	b.n	800f778 <_svfiprintf_r+0x114>
 800f74e:	eba0 0308 	sub.w	r3, r0, r8
 800f752:	fa09 f303 	lsl.w	r3, r9, r3
 800f756:	4313      	orrs	r3, r2
 800f758:	46a2      	mov	sl, r4
 800f75a:	9304      	str	r3, [sp, #16]
 800f75c:	e7d2      	b.n	800f704 <_svfiprintf_r+0xa0>
 800f75e:	9b03      	ldr	r3, [sp, #12]
 800f760:	1d19      	adds	r1, r3, #4
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	9103      	str	r1, [sp, #12]
 800f766:	2b00      	cmp	r3, #0
 800f768:	bfbb      	ittet	lt
 800f76a:	425b      	neglt	r3, r3
 800f76c:	f042 0202 	orrlt.w	r2, r2, #2
 800f770:	9307      	strge	r3, [sp, #28]
 800f772:	9307      	strlt	r3, [sp, #28]
 800f774:	bfb8      	it	lt
 800f776:	9204      	strlt	r2, [sp, #16]
 800f778:	7823      	ldrb	r3, [r4, #0]
 800f77a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f77c:	d10a      	bne.n	800f794 <_svfiprintf_r+0x130>
 800f77e:	7863      	ldrb	r3, [r4, #1]
 800f780:	2b2a      	cmp	r3, #42	@ 0x2a
 800f782:	d132      	bne.n	800f7ea <_svfiprintf_r+0x186>
 800f784:	9b03      	ldr	r3, [sp, #12]
 800f786:	3402      	adds	r4, #2
 800f788:	1d1a      	adds	r2, r3, #4
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	9203      	str	r2, [sp, #12]
 800f78e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f792:	9305      	str	r3, [sp, #20]
 800f794:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800f84c <_svfiprintf_r+0x1e8>
 800f798:	2203      	movs	r2, #3
 800f79a:	4650      	mov	r0, sl
 800f79c:	7821      	ldrb	r1, [r4, #0]
 800f79e:	f7fe fc94 	bl	800e0ca <memchr>
 800f7a2:	b138      	cbz	r0, 800f7b4 <_svfiprintf_r+0x150>
 800f7a4:	2240      	movs	r2, #64	@ 0x40
 800f7a6:	9b04      	ldr	r3, [sp, #16]
 800f7a8:	eba0 000a 	sub.w	r0, r0, sl
 800f7ac:	4082      	lsls	r2, r0
 800f7ae:	4313      	orrs	r3, r2
 800f7b0:	3401      	adds	r4, #1
 800f7b2:	9304      	str	r3, [sp, #16]
 800f7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7b8:	2206      	movs	r2, #6
 800f7ba:	4825      	ldr	r0, [pc, #148]	@ (800f850 <_svfiprintf_r+0x1ec>)
 800f7bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f7c0:	f7fe fc83 	bl	800e0ca <memchr>
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	d036      	beq.n	800f836 <_svfiprintf_r+0x1d2>
 800f7c8:	4b22      	ldr	r3, [pc, #136]	@ (800f854 <_svfiprintf_r+0x1f0>)
 800f7ca:	bb1b      	cbnz	r3, 800f814 <_svfiprintf_r+0x1b0>
 800f7cc:	9b03      	ldr	r3, [sp, #12]
 800f7ce:	3307      	adds	r3, #7
 800f7d0:	f023 0307 	bic.w	r3, r3, #7
 800f7d4:	3308      	adds	r3, #8
 800f7d6:	9303      	str	r3, [sp, #12]
 800f7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7da:	4433      	add	r3, r6
 800f7dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7de:	e76a      	b.n	800f6b6 <_svfiprintf_r+0x52>
 800f7e0:	460c      	mov	r4, r1
 800f7e2:	2001      	movs	r0, #1
 800f7e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7e8:	e7a8      	b.n	800f73c <_svfiprintf_r+0xd8>
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	f04f 0c0a 	mov.w	ip, #10
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	3401      	adds	r4, #1
 800f7f4:	9305      	str	r3, [sp, #20]
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7fc:	3a30      	subs	r2, #48	@ 0x30
 800f7fe:	2a09      	cmp	r2, #9
 800f800:	d903      	bls.n	800f80a <_svfiprintf_r+0x1a6>
 800f802:	2b00      	cmp	r3, #0
 800f804:	d0c6      	beq.n	800f794 <_svfiprintf_r+0x130>
 800f806:	9105      	str	r1, [sp, #20]
 800f808:	e7c4      	b.n	800f794 <_svfiprintf_r+0x130>
 800f80a:	4604      	mov	r4, r0
 800f80c:	2301      	movs	r3, #1
 800f80e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f812:	e7f0      	b.n	800f7f6 <_svfiprintf_r+0x192>
 800f814:	ab03      	add	r3, sp, #12
 800f816:	9300      	str	r3, [sp, #0]
 800f818:	462a      	mov	r2, r5
 800f81a:	4638      	mov	r0, r7
 800f81c:	4b0e      	ldr	r3, [pc, #56]	@ (800f858 <_svfiprintf_r+0x1f4>)
 800f81e:	a904      	add	r1, sp, #16
 800f820:	f7fd fe78 	bl	800d514 <_printf_float>
 800f824:	1c42      	adds	r2, r0, #1
 800f826:	4606      	mov	r6, r0
 800f828:	d1d6      	bne.n	800f7d8 <_svfiprintf_r+0x174>
 800f82a:	89ab      	ldrh	r3, [r5, #12]
 800f82c:	065b      	lsls	r3, r3, #25
 800f82e:	f53f af2d 	bmi.w	800f68c <_svfiprintf_r+0x28>
 800f832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f834:	e72c      	b.n	800f690 <_svfiprintf_r+0x2c>
 800f836:	ab03      	add	r3, sp, #12
 800f838:	9300      	str	r3, [sp, #0]
 800f83a:	462a      	mov	r2, r5
 800f83c:	4638      	mov	r0, r7
 800f83e:	4b06      	ldr	r3, [pc, #24]	@ (800f858 <_svfiprintf_r+0x1f4>)
 800f840:	a904      	add	r1, sp, #16
 800f842:	f7fe f905 	bl	800da50 <_printf_i>
 800f846:	e7ed      	b.n	800f824 <_svfiprintf_r+0x1c0>
 800f848:	08010691 	.word	0x08010691
 800f84c:	08010697 	.word	0x08010697
 800f850:	0801069b 	.word	0x0801069b
 800f854:	0800d515 	.word	0x0800d515
 800f858:	0800f5af 	.word	0x0800f5af

0800f85c <__sflush_r>:
 800f85c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f862:	0716      	lsls	r6, r2, #28
 800f864:	4605      	mov	r5, r0
 800f866:	460c      	mov	r4, r1
 800f868:	d454      	bmi.n	800f914 <__sflush_r+0xb8>
 800f86a:	684b      	ldr	r3, [r1, #4]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	dc02      	bgt.n	800f876 <__sflush_r+0x1a>
 800f870:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f872:	2b00      	cmp	r3, #0
 800f874:	dd48      	ble.n	800f908 <__sflush_r+0xac>
 800f876:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f878:	2e00      	cmp	r6, #0
 800f87a:	d045      	beq.n	800f908 <__sflush_r+0xac>
 800f87c:	2300      	movs	r3, #0
 800f87e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f882:	682f      	ldr	r7, [r5, #0]
 800f884:	6a21      	ldr	r1, [r4, #32]
 800f886:	602b      	str	r3, [r5, #0]
 800f888:	d030      	beq.n	800f8ec <__sflush_r+0x90>
 800f88a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f88c:	89a3      	ldrh	r3, [r4, #12]
 800f88e:	0759      	lsls	r1, r3, #29
 800f890:	d505      	bpl.n	800f89e <__sflush_r+0x42>
 800f892:	6863      	ldr	r3, [r4, #4]
 800f894:	1ad2      	subs	r2, r2, r3
 800f896:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f898:	b10b      	cbz	r3, 800f89e <__sflush_r+0x42>
 800f89a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f89c:	1ad2      	subs	r2, r2, r3
 800f89e:	2300      	movs	r3, #0
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f8a4:	6a21      	ldr	r1, [r4, #32]
 800f8a6:	47b0      	blx	r6
 800f8a8:	1c43      	adds	r3, r0, #1
 800f8aa:	89a3      	ldrh	r3, [r4, #12]
 800f8ac:	d106      	bne.n	800f8bc <__sflush_r+0x60>
 800f8ae:	6829      	ldr	r1, [r5, #0]
 800f8b0:	291d      	cmp	r1, #29
 800f8b2:	d82b      	bhi.n	800f90c <__sflush_r+0xb0>
 800f8b4:	4a28      	ldr	r2, [pc, #160]	@ (800f958 <__sflush_r+0xfc>)
 800f8b6:	410a      	asrs	r2, r1
 800f8b8:	07d6      	lsls	r6, r2, #31
 800f8ba:	d427      	bmi.n	800f90c <__sflush_r+0xb0>
 800f8bc:	2200      	movs	r2, #0
 800f8be:	6062      	str	r2, [r4, #4]
 800f8c0:	6922      	ldr	r2, [r4, #16]
 800f8c2:	04d9      	lsls	r1, r3, #19
 800f8c4:	6022      	str	r2, [r4, #0]
 800f8c6:	d504      	bpl.n	800f8d2 <__sflush_r+0x76>
 800f8c8:	1c42      	adds	r2, r0, #1
 800f8ca:	d101      	bne.n	800f8d0 <__sflush_r+0x74>
 800f8cc:	682b      	ldr	r3, [r5, #0]
 800f8ce:	b903      	cbnz	r3, 800f8d2 <__sflush_r+0x76>
 800f8d0:	6560      	str	r0, [r4, #84]	@ 0x54
 800f8d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8d4:	602f      	str	r7, [r5, #0]
 800f8d6:	b1b9      	cbz	r1, 800f908 <__sflush_r+0xac>
 800f8d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8dc:	4299      	cmp	r1, r3
 800f8de:	d002      	beq.n	800f8e6 <__sflush_r+0x8a>
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	f7ff fa7d 	bl	800ede0 <_free_r>
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8ea:	e00d      	b.n	800f908 <__sflush_r+0xac>
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	47b0      	blx	r6
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	1c50      	adds	r0, r2, #1
 800f8f6:	d1c9      	bne.n	800f88c <__sflush_r+0x30>
 800f8f8:	682b      	ldr	r3, [r5, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d0c6      	beq.n	800f88c <__sflush_r+0x30>
 800f8fe:	2b1d      	cmp	r3, #29
 800f900:	d001      	beq.n	800f906 <__sflush_r+0xaa>
 800f902:	2b16      	cmp	r3, #22
 800f904:	d11d      	bne.n	800f942 <__sflush_r+0xe6>
 800f906:	602f      	str	r7, [r5, #0]
 800f908:	2000      	movs	r0, #0
 800f90a:	e021      	b.n	800f950 <__sflush_r+0xf4>
 800f90c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f910:	b21b      	sxth	r3, r3
 800f912:	e01a      	b.n	800f94a <__sflush_r+0xee>
 800f914:	690f      	ldr	r7, [r1, #16]
 800f916:	2f00      	cmp	r7, #0
 800f918:	d0f6      	beq.n	800f908 <__sflush_r+0xac>
 800f91a:	0793      	lsls	r3, r2, #30
 800f91c:	bf18      	it	ne
 800f91e:	2300      	movne	r3, #0
 800f920:	680e      	ldr	r6, [r1, #0]
 800f922:	bf08      	it	eq
 800f924:	694b      	ldreq	r3, [r1, #20]
 800f926:	1bf6      	subs	r6, r6, r7
 800f928:	600f      	str	r7, [r1, #0]
 800f92a:	608b      	str	r3, [r1, #8]
 800f92c:	2e00      	cmp	r6, #0
 800f92e:	ddeb      	ble.n	800f908 <__sflush_r+0xac>
 800f930:	4633      	mov	r3, r6
 800f932:	463a      	mov	r2, r7
 800f934:	4628      	mov	r0, r5
 800f936:	6a21      	ldr	r1, [r4, #32]
 800f938:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800f93c:	47e0      	blx	ip
 800f93e:	2800      	cmp	r0, #0
 800f940:	dc07      	bgt.n	800f952 <__sflush_r+0xf6>
 800f942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f94a:	f04f 30ff 	mov.w	r0, #4294967295
 800f94e:	81a3      	strh	r3, [r4, #12]
 800f950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f952:	4407      	add	r7, r0
 800f954:	1a36      	subs	r6, r6, r0
 800f956:	e7e9      	b.n	800f92c <__sflush_r+0xd0>
 800f958:	dfbffffe 	.word	0xdfbffffe

0800f95c <_fflush_r>:
 800f95c:	b538      	push	{r3, r4, r5, lr}
 800f95e:	690b      	ldr	r3, [r1, #16]
 800f960:	4605      	mov	r5, r0
 800f962:	460c      	mov	r4, r1
 800f964:	b913      	cbnz	r3, 800f96c <_fflush_r+0x10>
 800f966:	2500      	movs	r5, #0
 800f968:	4628      	mov	r0, r5
 800f96a:	bd38      	pop	{r3, r4, r5, pc}
 800f96c:	b118      	cbz	r0, 800f976 <_fflush_r+0x1a>
 800f96e:	6a03      	ldr	r3, [r0, #32]
 800f970:	b90b      	cbnz	r3, 800f976 <_fflush_r+0x1a>
 800f972:	f7fe fa19 	bl	800dda8 <__sinit>
 800f976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d0f3      	beq.n	800f966 <_fflush_r+0xa>
 800f97e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f980:	07d0      	lsls	r0, r2, #31
 800f982:	d404      	bmi.n	800f98e <_fflush_r+0x32>
 800f984:	0599      	lsls	r1, r3, #22
 800f986:	d402      	bmi.n	800f98e <_fflush_r+0x32>
 800f988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f98a:	f7fe fb9c 	bl	800e0c6 <__retarget_lock_acquire_recursive>
 800f98e:	4628      	mov	r0, r5
 800f990:	4621      	mov	r1, r4
 800f992:	f7ff ff63 	bl	800f85c <__sflush_r>
 800f996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f998:	4605      	mov	r5, r0
 800f99a:	07da      	lsls	r2, r3, #31
 800f99c:	d4e4      	bmi.n	800f968 <_fflush_r+0xc>
 800f99e:	89a3      	ldrh	r3, [r4, #12]
 800f9a0:	059b      	lsls	r3, r3, #22
 800f9a2:	d4e1      	bmi.n	800f968 <_fflush_r+0xc>
 800f9a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9a6:	f7fe fb8f 	bl	800e0c8 <__retarget_lock_release_recursive>
 800f9aa:	e7dd      	b.n	800f968 <_fflush_r+0xc>

0800f9ac <fiprintf>:
 800f9ac:	b40e      	push	{r1, r2, r3}
 800f9ae:	b503      	push	{r0, r1, lr}
 800f9b0:	4601      	mov	r1, r0
 800f9b2:	ab03      	add	r3, sp, #12
 800f9b4:	4805      	ldr	r0, [pc, #20]	@ (800f9cc <fiprintf+0x20>)
 800f9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9ba:	6800      	ldr	r0, [r0, #0]
 800f9bc:	9301      	str	r3, [sp, #4]
 800f9be:	f000 f891 	bl	800fae4 <_vfiprintf_r>
 800f9c2:	b002      	add	sp, #8
 800f9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9c8:	b003      	add	sp, #12
 800f9ca:	4770      	bx	lr
 800f9cc:	2000019c 	.word	0x2000019c

0800f9d0 <memmove>:
 800f9d0:	4288      	cmp	r0, r1
 800f9d2:	b510      	push	{r4, lr}
 800f9d4:	eb01 0402 	add.w	r4, r1, r2
 800f9d8:	d902      	bls.n	800f9e0 <memmove+0x10>
 800f9da:	4284      	cmp	r4, r0
 800f9dc:	4623      	mov	r3, r4
 800f9de:	d807      	bhi.n	800f9f0 <memmove+0x20>
 800f9e0:	1e43      	subs	r3, r0, #1
 800f9e2:	42a1      	cmp	r1, r4
 800f9e4:	d008      	beq.n	800f9f8 <memmove+0x28>
 800f9e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f9ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f9ee:	e7f8      	b.n	800f9e2 <memmove+0x12>
 800f9f0:	4601      	mov	r1, r0
 800f9f2:	4402      	add	r2, r0
 800f9f4:	428a      	cmp	r2, r1
 800f9f6:	d100      	bne.n	800f9fa <memmove+0x2a>
 800f9f8:	bd10      	pop	{r4, pc}
 800f9fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f9fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa02:	e7f7      	b.n	800f9f4 <memmove+0x24>

0800fa04 <abort>:
 800fa04:	2006      	movs	r0, #6
 800fa06:	b508      	push	{r3, lr}
 800fa08:	f000 fa40 	bl	800fe8c <raise>
 800fa0c:	2001      	movs	r0, #1
 800fa0e:	f7f3 f854 	bl	8002aba <_exit>

0800fa12 <_calloc_r>:
 800fa12:	b570      	push	{r4, r5, r6, lr}
 800fa14:	fba1 5402 	umull	r5, r4, r1, r2
 800fa18:	b93c      	cbnz	r4, 800fa2a <_calloc_r+0x18>
 800fa1a:	4629      	mov	r1, r5
 800fa1c:	f7fd fc50 	bl	800d2c0 <_malloc_r>
 800fa20:	4606      	mov	r6, r0
 800fa22:	b928      	cbnz	r0, 800fa30 <_calloc_r+0x1e>
 800fa24:	2600      	movs	r6, #0
 800fa26:	4630      	mov	r0, r6
 800fa28:	bd70      	pop	{r4, r5, r6, pc}
 800fa2a:	220c      	movs	r2, #12
 800fa2c:	6002      	str	r2, [r0, #0]
 800fa2e:	e7f9      	b.n	800fa24 <_calloc_r+0x12>
 800fa30:	462a      	mov	r2, r5
 800fa32:	4621      	mov	r1, r4
 800fa34:	f7fe fa75 	bl	800df22 <memset>
 800fa38:	e7f5      	b.n	800fa26 <_calloc_r+0x14>

0800fa3a <_realloc_r>:
 800fa3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa3e:	4680      	mov	r8, r0
 800fa40:	4615      	mov	r5, r2
 800fa42:	460c      	mov	r4, r1
 800fa44:	b921      	cbnz	r1, 800fa50 <_realloc_r+0x16>
 800fa46:	4611      	mov	r1, r2
 800fa48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa4c:	f7fd bc38 	b.w	800d2c0 <_malloc_r>
 800fa50:	b92a      	cbnz	r2, 800fa5e <_realloc_r+0x24>
 800fa52:	f7ff f9c5 	bl	800ede0 <_free_r>
 800fa56:	2400      	movs	r4, #0
 800fa58:	4620      	mov	r0, r4
 800fa5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa5e:	f000 fa31 	bl	800fec4 <_malloc_usable_size_r>
 800fa62:	4285      	cmp	r5, r0
 800fa64:	4606      	mov	r6, r0
 800fa66:	d802      	bhi.n	800fa6e <_realloc_r+0x34>
 800fa68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fa6c:	d8f4      	bhi.n	800fa58 <_realloc_r+0x1e>
 800fa6e:	4629      	mov	r1, r5
 800fa70:	4640      	mov	r0, r8
 800fa72:	f7fd fc25 	bl	800d2c0 <_malloc_r>
 800fa76:	4607      	mov	r7, r0
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	d0ec      	beq.n	800fa56 <_realloc_r+0x1c>
 800fa7c:	42b5      	cmp	r5, r6
 800fa7e:	462a      	mov	r2, r5
 800fa80:	4621      	mov	r1, r4
 800fa82:	bf28      	it	cs
 800fa84:	4632      	movcs	r2, r6
 800fa86:	f7fe fb2e 	bl	800e0e6 <memcpy>
 800fa8a:	4621      	mov	r1, r4
 800fa8c:	4640      	mov	r0, r8
 800fa8e:	f7ff f9a7 	bl	800ede0 <_free_r>
 800fa92:	463c      	mov	r4, r7
 800fa94:	e7e0      	b.n	800fa58 <_realloc_r+0x1e>

0800fa96 <__sfputc_r>:
 800fa96:	6893      	ldr	r3, [r2, #8]
 800fa98:	b410      	push	{r4}
 800fa9a:	3b01      	subs	r3, #1
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	6093      	str	r3, [r2, #8]
 800faa0:	da07      	bge.n	800fab2 <__sfputc_r+0x1c>
 800faa2:	6994      	ldr	r4, [r2, #24]
 800faa4:	42a3      	cmp	r3, r4
 800faa6:	db01      	blt.n	800faac <__sfputc_r+0x16>
 800faa8:	290a      	cmp	r1, #10
 800faaa:	d102      	bne.n	800fab2 <__sfputc_r+0x1c>
 800faac:	bc10      	pop	{r4}
 800faae:	f000 b931 	b.w	800fd14 <__swbuf_r>
 800fab2:	6813      	ldr	r3, [r2, #0]
 800fab4:	1c58      	adds	r0, r3, #1
 800fab6:	6010      	str	r0, [r2, #0]
 800fab8:	7019      	strb	r1, [r3, #0]
 800faba:	4608      	mov	r0, r1
 800fabc:	bc10      	pop	{r4}
 800fabe:	4770      	bx	lr

0800fac0 <__sfputs_r>:
 800fac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fac2:	4606      	mov	r6, r0
 800fac4:	460f      	mov	r7, r1
 800fac6:	4614      	mov	r4, r2
 800fac8:	18d5      	adds	r5, r2, r3
 800faca:	42ac      	cmp	r4, r5
 800facc:	d101      	bne.n	800fad2 <__sfputs_r+0x12>
 800face:	2000      	movs	r0, #0
 800fad0:	e007      	b.n	800fae2 <__sfputs_r+0x22>
 800fad2:	463a      	mov	r2, r7
 800fad4:	4630      	mov	r0, r6
 800fad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fada:	f7ff ffdc 	bl	800fa96 <__sfputc_r>
 800fade:	1c43      	adds	r3, r0, #1
 800fae0:	d1f3      	bne.n	800faca <__sfputs_r+0xa>
 800fae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fae4 <_vfiprintf_r>:
 800fae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae8:	460d      	mov	r5, r1
 800faea:	4614      	mov	r4, r2
 800faec:	4698      	mov	r8, r3
 800faee:	4606      	mov	r6, r0
 800faf0:	b09d      	sub	sp, #116	@ 0x74
 800faf2:	b118      	cbz	r0, 800fafc <_vfiprintf_r+0x18>
 800faf4:	6a03      	ldr	r3, [r0, #32]
 800faf6:	b90b      	cbnz	r3, 800fafc <_vfiprintf_r+0x18>
 800faf8:	f7fe f956 	bl	800dda8 <__sinit>
 800fafc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fafe:	07d9      	lsls	r1, r3, #31
 800fb00:	d405      	bmi.n	800fb0e <_vfiprintf_r+0x2a>
 800fb02:	89ab      	ldrh	r3, [r5, #12]
 800fb04:	059a      	lsls	r2, r3, #22
 800fb06:	d402      	bmi.n	800fb0e <_vfiprintf_r+0x2a>
 800fb08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb0a:	f7fe fadc 	bl	800e0c6 <__retarget_lock_acquire_recursive>
 800fb0e:	89ab      	ldrh	r3, [r5, #12]
 800fb10:	071b      	lsls	r3, r3, #28
 800fb12:	d501      	bpl.n	800fb18 <_vfiprintf_r+0x34>
 800fb14:	692b      	ldr	r3, [r5, #16]
 800fb16:	b99b      	cbnz	r3, 800fb40 <_vfiprintf_r+0x5c>
 800fb18:	4629      	mov	r1, r5
 800fb1a:	4630      	mov	r0, r6
 800fb1c:	f000 f938 	bl	800fd90 <__swsetup_r>
 800fb20:	b170      	cbz	r0, 800fb40 <_vfiprintf_r+0x5c>
 800fb22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb24:	07dc      	lsls	r4, r3, #31
 800fb26:	d504      	bpl.n	800fb32 <_vfiprintf_r+0x4e>
 800fb28:	f04f 30ff 	mov.w	r0, #4294967295
 800fb2c:	b01d      	add	sp, #116	@ 0x74
 800fb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb32:	89ab      	ldrh	r3, [r5, #12]
 800fb34:	0598      	lsls	r0, r3, #22
 800fb36:	d4f7      	bmi.n	800fb28 <_vfiprintf_r+0x44>
 800fb38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb3a:	f7fe fac5 	bl	800e0c8 <__retarget_lock_release_recursive>
 800fb3e:	e7f3      	b.n	800fb28 <_vfiprintf_r+0x44>
 800fb40:	2300      	movs	r3, #0
 800fb42:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb44:	2320      	movs	r3, #32
 800fb46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fb4a:	2330      	movs	r3, #48	@ 0x30
 800fb4c:	f04f 0901 	mov.w	r9, #1
 800fb50:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb54:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800fd00 <_vfiprintf_r+0x21c>
 800fb58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fb5c:	4623      	mov	r3, r4
 800fb5e:	469a      	mov	sl, r3
 800fb60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb64:	b10a      	cbz	r2, 800fb6a <_vfiprintf_r+0x86>
 800fb66:	2a25      	cmp	r2, #37	@ 0x25
 800fb68:	d1f9      	bne.n	800fb5e <_vfiprintf_r+0x7a>
 800fb6a:	ebba 0b04 	subs.w	fp, sl, r4
 800fb6e:	d00b      	beq.n	800fb88 <_vfiprintf_r+0xa4>
 800fb70:	465b      	mov	r3, fp
 800fb72:	4622      	mov	r2, r4
 800fb74:	4629      	mov	r1, r5
 800fb76:	4630      	mov	r0, r6
 800fb78:	f7ff ffa2 	bl	800fac0 <__sfputs_r>
 800fb7c:	3001      	adds	r0, #1
 800fb7e:	f000 80a7 	beq.w	800fcd0 <_vfiprintf_r+0x1ec>
 800fb82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb84:	445a      	add	r2, fp
 800fb86:	9209      	str	r2, [sp, #36]	@ 0x24
 800fb88:	f89a 3000 	ldrb.w	r3, [sl]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f000 809f 	beq.w	800fcd0 <_vfiprintf_r+0x1ec>
 800fb92:	2300      	movs	r3, #0
 800fb94:	f04f 32ff 	mov.w	r2, #4294967295
 800fb98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb9c:	f10a 0a01 	add.w	sl, sl, #1
 800fba0:	9304      	str	r3, [sp, #16]
 800fba2:	9307      	str	r3, [sp, #28]
 800fba4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fba8:	931a      	str	r3, [sp, #104]	@ 0x68
 800fbaa:	4654      	mov	r4, sl
 800fbac:	2205      	movs	r2, #5
 800fbae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbb2:	4853      	ldr	r0, [pc, #332]	@ (800fd00 <_vfiprintf_r+0x21c>)
 800fbb4:	f7fe fa89 	bl	800e0ca <memchr>
 800fbb8:	9a04      	ldr	r2, [sp, #16]
 800fbba:	b9d8      	cbnz	r0, 800fbf4 <_vfiprintf_r+0x110>
 800fbbc:	06d1      	lsls	r1, r2, #27
 800fbbe:	bf44      	itt	mi
 800fbc0:	2320      	movmi	r3, #32
 800fbc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fbc6:	0713      	lsls	r3, r2, #28
 800fbc8:	bf44      	itt	mi
 800fbca:	232b      	movmi	r3, #43	@ 0x2b
 800fbcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fbd0:	f89a 3000 	ldrb.w	r3, [sl]
 800fbd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fbd6:	d015      	beq.n	800fc04 <_vfiprintf_r+0x120>
 800fbd8:	4654      	mov	r4, sl
 800fbda:	2000      	movs	r0, #0
 800fbdc:	f04f 0c0a 	mov.w	ip, #10
 800fbe0:	9a07      	ldr	r2, [sp, #28]
 800fbe2:	4621      	mov	r1, r4
 800fbe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbe8:	3b30      	subs	r3, #48	@ 0x30
 800fbea:	2b09      	cmp	r3, #9
 800fbec:	d94b      	bls.n	800fc86 <_vfiprintf_r+0x1a2>
 800fbee:	b1b0      	cbz	r0, 800fc1e <_vfiprintf_r+0x13a>
 800fbf0:	9207      	str	r2, [sp, #28]
 800fbf2:	e014      	b.n	800fc1e <_vfiprintf_r+0x13a>
 800fbf4:	eba0 0308 	sub.w	r3, r0, r8
 800fbf8:	fa09 f303 	lsl.w	r3, r9, r3
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	46a2      	mov	sl, r4
 800fc00:	9304      	str	r3, [sp, #16]
 800fc02:	e7d2      	b.n	800fbaa <_vfiprintf_r+0xc6>
 800fc04:	9b03      	ldr	r3, [sp, #12]
 800fc06:	1d19      	adds	r1, r3, #4
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	9103      	str	r1, [sp, #12]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	bfbb      	ittet	lt
 800fc10:	425b      	neglt	r3, r3
 800fc12:	f042 0202 	orrlt.w	r2, r2, #2
 800fc16:	9307      	strge	r3, [sp, #28]
 800fc18:	9307      	strlt	r3, [sp, #28]
 800fc1a:	bfb8      	it	lt
 800fc1c:	9204      	strlt	r2, [sp, #16]
 800fc1e:	7823      	ldrb	r3, [r4, #0]
 800fc20:	2b2e      	cmp	r3, #46	@ 0x2e
 800fc22:	d10a      	bne.n	800fc3a <_vfiprintf_r+0x156>
 800fc24:	7863      	ldrb	r3, [r4, #1]
 800fc26:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc28:	d132      	bne.n	800fc90 <_vfiprintf_r+0x1ac>
 800fc2a:	9b03      	ldr	r3, [sp, #12]
 800fc2c:	3402      	adds	r4, #2
 800fc2e:	1d1a      	adds	r2, r3, #4
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	9203      	str	r2, [sp, #12]
 800fc34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fc38:	9305      	str	r3, [sp, #20]
 800fc3a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800fd04 <_vfiprintf_r+0x220>
 800fc3e:	2203      	movs	r2, #3
 800fc40:	4650      	mov	r0, sl
 800fc42:	7821      	ldrb	r1, [r4, #0]
 800fc44:	f7fe fa41 	bl	800e0ca <memchr>
 800fc48:	b138      	cbz	r0, 800fc5a <_vfiprintf_r+0x176>
 800fc4a:	2240      	movs	r2, #64	@ 0x40
 800fc4c:	9b04      	ldr	r3, [sp, #16]
 800fc4e:	eba0 000a 	sub.w	r0, r0, sl
 800fc52:	4082      	lsls	r2, r0
 800fc54:	4313      	orrs	r3, r2
 800fc56:	3401      	adds	r4, #1
 800fc58:	9304      	str	r3, [sp, #16]
 800fc5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc5e:	2206      	movs	r2, #6
 800fc60:	4829      	ldr	r0, [pc, #164]	@ (800fd08 <_vfiprintf_r+0x224>)
 800fc62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fc66:	f7fe fa30 	bl	800e0ca <memchr>
 800fc6a:	2800      	cmp	r0, #0
 800fc6c:	d03f      	beq.n	800fcee <_vfiprintf_r+0x20a>
 800fc6e:	4b27      	ldr	r3, [pc, #156]	@ (800fd0c <_vfiprintf_r+0x228>)
 800fc70:	bb1b      	cbnz	r3, 800fcba <_vfiprintf_r+0x1d6>
 800fc72:	9b03      	ldr	r3, [sp, #12]
 800fc74:	3307      	adds	r3, #7
 800fc76:	f023 0307 	bic.w	r3, r3, #7
 800fc7a:	3308      	adds	r3, #8
 800fc7c:	9303      	str	r3, [sp, #12]
 800fc7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc80:	443b      	add	r3, r7
 800fc82:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc84:	e76a      	b.n	800fb5c <_vfiprintf_r+0x78>
 800fc86:	460c      	mov	r4, r1
 800fc88:	2001      	movs	r0, #1
 800fc8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc8e:	e7a8      	b.n	800fbe2 <_vfiprintf_r+0xfe>
 800fc90:	2300      	movs	r3, #0
 800fc92:	f04f 0c0a 	mov.w	ip, #10
 800fc96:	4619      	mov	r1, r3
 800fc98:	3401      	adds	r4, #1
 800fc9a:	9305      	str	r3, [sp, #20]
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fca2:	3a30      	subs	r2, #48	@ 0x30
 800fca4:	2a09      	cmp	r2, #9
 800fca6:	d903      	bls.n	800fcb0 <_vfiprintf_r+0x1cc>
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d0c6      	beq.n	800fc3a <_vfiprintf_r+0x156>
 800fcac:	9105      	str	r1, [sp, #20]
 800fcae:	e7c4      	b.n	800fc3a <_vfiprintf_r+0x156>
 800fcb0:	4604      	mov	r4, r0
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800fcb8:	e7f0      	b.n	800fc9c <_vfiprintf_r+0x1b8>
 800fcba:	ab03      	add	r3, sp, #12
 800fcbc:	9300      	str	r3, [sp, #0]
 800fcbe:	462a      	mov	r2, r5
 800fcc0:	4630      	mov	r0, r6
 800fcc2:	4b13      	ldr	r3, [pc, #76]	@ (800fd10 <_vfiprintf_r+0x22c>)
 800fcc4:	a904      	add	r1, sp, #16
 800fcc6:	f7fd fc25 	bl	800d514 <_printf_float>
 800fcca:	4607      	mov	r7, r0
 800fccc:	1c78      	adds	r0, r7, #1
 800fcce:	d1d6      	bne.n	800fc7e <_vfiprintf_r+0x19a>
 800fcd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fcd2:	07d9      	lsls	r1, r3, #31
 800fcd4:	d405      	bmi.n	800fce2 <_vfiprintf_r+0x1fe>
 800fcd6:	89ab      	ldrh	r3, [r5, #12]
 800fcd8:	059a      	lsls	r2, r3, #22
 800fcda:	d402      	bmi.n	800fce2 <_vfiprintf_r+0x1fe>
 800fcdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fcde:	f7fe f9f3 	bl	800e0c8 <__retarget_lock_release_recursive>
 800fce2:	89ab      	ldrh	r3, [r5, #12]
 800fce4:	065b      	lsls	r3, r3, #25
 800fce6:	f53f af1f 	bmi.w	800fb28 <_vfiprintf_r+0x44>
 800fcea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fcec:	e71e      	b.n	800fb2c <_vfiprintf_r+0x48>
 800fcee:	ab03      	add	r3, sp, #12
 800fcf0:	9300      	str	r3, [sp, #0]
 800fcf2:	462a      	mov	r2, r5
 800fcf4:	4630      	mov	r0, r6
 800fcf6:	4b06      	ldr	r3, [pc, #24]	@ (800fd10 <_vfiprintf_r+0x22c>)
 800fcf8:	a904      	add	r1, sp, #16
 800fcfa:	f7fd fea9 	bl	800da50 <_printf_i>
 800fcfe:	e7e4      	b.n	800fcca <_vfiprintf_r+0x1e6>
 800fd00:	08010691 	.word	0x08010691
 800fd04:	08010697 	.word	0x08010697
 800fd08:	0801069b 	.word	0x0801069b
 800fd0c:	0800d515 	.word	0x0800d515
 800fd10:	0800fac1 	.word	0x0800fac1

0800fd14 <__swbuf_r>:
 800fd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd16:	460e      	mov	r6, r1
 800fd18:	4614      	mov	r4, r2
 800fd1a:	4605      	mov	r5, r0
 800fd1c:	b118      	cbz	r0, 800fd26 <__swbuf_r+0x12>
 800fd1e:	6a03      	ldr	r3, [r0, #32]
 800fd20:	b90b      	cbnz	r3, 800fd26 <__swbuf_r+0x12>
 800fd22:	f7fe f841 	bl	800dda8 <__sinit>
 800fd26:	69a3      	ldr	r3, [r4, #24]
 800fd28:	60a3      	str	r3, [r4, #8]
 800fd2a:	89a3      	ldrh	r3, [r4, #12]
 800fd2c:	071a      	lsls	r2, r3, #28
 800fd2e:	d501      	bpl.n	800fd34 <__swbuf_r+0x20>
 800fd30:	6923      	ldr	r3, [r4, #16]
 800fd32:	b943      	cbnz	r3, 800fd46 <__swbuf_r+0x32>
 800fd34:	4621      	mov	r1, r4
 800fd36:	4628      	mov	r0, r5
 800fd38:	f000 f82a 	bl	800fd90 <__swsetup_r>
 800fd3c:	b118      	cbz	r0, 800fd46 <__swbuf_r+0x32>
 800fd3e:	f04f 37ff 	mov.w	r7, #4294967295
 800fd42:	4638      	mov	r0, r7
 800fd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd46:	6823      	ldr	r3, [r4, #0]
 800fd48:	6922      	ldr	r2, [r4, #16]
 800fd4a:	b2f6      	uxtb	r6, r6
 800fd4c:	1a98      	subs	r0, r3, r2
 800fd4e:	6963      	ldr	r3, [r4, #20]
 800fd50:	4637      	mov	r7, r6
 800fd52:	4283      	cmp	r3, r0
 800fd54:	dc05      	bgt.n	800fd62 <__swbuf_r+0x4e>
 800fd56:	4621      	mov	r1, r4
 800fd58:	4628      	mov	r0, r5
 800fd5a:	f7ff fdff 	bl	800f95c <_fflush_r>
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	d1ed      	bne.n	800fd3e <__swbuf_r+0x2a>
 800fd62:	68a3      	ldr	r3, [r4, #8]
 800fd64:	3b01      	subs	r3, #1
 800fd66:	60a3      	str	r3, [r4, #8]
 800fd68:	6823      	ldr	r3, [r4, #0]
 800fd6a:	1c5a      	adds	r2, r3, #1
 800fd6c:	6022      	str	r2, [r4, #0]
 800fd6e:	701e      	strb	r6, [r3, #0]
 800fd70:	6962      	ldr	r2, [r4, #20]
 800fd72:	1c43      	adds	r3, r0, #1
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d004      	beq.n	800fd82 <__swbuf_r+0x6e>
 800fd78:	89a3      	ldrh	r3, [r4, #12]
 800fd7a:	07db      	lsls	r3, r3, #31
 800fd7c:	d5e1      	bpl.n	800fd42 <__swbuf_r+0x2e>
 800fd7e:	2e0a      	cmp	r6, #10
 800fd80:	d1df      	bne.n	800fd42 <__swbuf_r+0x2e>
 800fd82:	4621      	mov	r1, r4
 800fd84:	4628      	mov	r0, r5
 800fd86:	f7ff fde9 	bl	800f95c <_fflush_r>
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	d0d9      	beq.n	800fd42 <__swbuf_r+0x2e>
 800fd8e:	e7d6      	b.n	800fd3e <__swbuf_r+0x2a>

0800fd90 <__swsetup_r>:
 800fd90:	b538      	push	{r3, r4, r5, lr}
 800fd92:	4b29      	ldr	r3, [pc, #164]	@ (800fe38 <__swsetup_r+0xa8>)
 800fd94:	4605      	mov	r5, r0
 800fd96:	6818      	ldr	r0, [r3, #0]
 800fd98:	460c      	mov	r4, r1
 800fd9a:	b118      	cbz	r0, 800fda4 <__swsetup_r+0x14>
 800fd9c:	6a03      	ldr	r3, [r0, #32]
 800fd9e:	b90b      	cbnz	r3, 800fda4 <__swsetup_r+0x14>
 800fda0:	f7fe f802 	bl	800dda8 <__sinit>
 800fda4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fda8:	0719      	lsls	r1, r3, #28
 800fdaa:	d422      	bmi.n	800fdf2 <__swsetup_r+0x62>
 800fdac:	06da      	lsls	r2, r3, #27
 800fdae:	d407      	bmi.n	800fdc0 <__swsetup_r+0x30>
 800fdb0:	2209      	movs	r2, #9
 800fdb2:	602a      	str	r2, [r5, #0]
 800fdb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fdb8:	f04f 30ff 	mov.w	r0, #4294967295
 800fdbc:	81a3      	strh	r3, [r4, #12]
 800fdbe:	e033      	b.n	800fe28 <__swsetup_r+0x98>
 800fdc0:	0758      	lsls	r0, r3, #29
 800fdc2:	d512      	bpl.n	800fdea <__swsetup_r+0x5a>
 800fdc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fdc6:	b141      	cbz	r1, 800fdda <__swsetup_r+0x4a>
 800fdc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fdcc:	4299      	cmp	r1, r3
 800fdce:	d002      	beq.n	800fdd6 <__swsetup_r+0x46>
 800fdd0:	4628      	mov	r0, r5
 800fdd2:	f7ff f805 	bl	800ede0 <_free_r>
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	6363      	str	r3, [r4, #52]	@ 0x34
 800fdda:	89a3      	ldrh	r3, [r4, #12]
 800fddc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fde0:	81a3      	strh	r3, [r4, #12]
 800fde2:	2300      	movs	r3, #0
 800fde4:	6063      	str	r3, [r4, #4]
 800fde6:	6923      	ldr	r3, [r4, #16]
 800fde8:	6023      	str	r3, [r4, #0]
 800fdea:	89a3      	ldrh	r3, [r4, #12]
 800fdec:	f043 0308 	orr.w	r3, r3, #8
 800fdf0:	81a3      	strh	r3, [r4, #12]
 800fdf2:	6923      	ldr	r3, [r4, #16]
 800fdf4:	b94b      	cbnz	r3, 800fe0a <__swsetup_r+0x7a>
 800fdf6:	89a3      	ldrh	r3, [r4, #12]
 800fdf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fdfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe00:	d003      	beq.n	800fe0a <__swsetup_r+0x7a>
 800fe02:	4621      	mov	r1, r4
 800fe04:	4628      	mov	r0, r5
 800fe06:	f000 f88a 	bl	800ff1e <__smakebuf_r>
 800fe0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe0e:	f013 0201 	ands.w	r2, r3, #1
 800fe12:	d00a      	beq.n	800fe2a <__swsetup_r+0x9a>
 800fe14:	2200      	movs	r2, #0
 800fe16:	60a2      	str	r2, [r4, #8]
 800fe18:	6962      	ldr	r2, [r4, #20]
 800fe1a:	4252      	negs	r2, r2
 800fe1c:	61a2      	str	r2, [r4, #24]
 800fe1e:	6922      	ldr	r2, [r4, #16]
 800fe20:	b942      	cbnz	r2, 800fe34 <__swsetup_r+0xa4>
 800fe22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fe26:	d1c5      	bne.n	800fdb4 <__swsetup_r+0x24>
 800fe28:	bd38      	pop	{r3, r4, r5, pc}
 800fe2a:	0799      	lsls	r1, r3, #30
 800fe2c:	bf58      	it	pl
 800fe2e:	6962      	ldrpl	r2, [r4, #20]
 800fe30:	60a2      	str	r2, [r4, #8]
 800fe32:	e7f4      	b.n	800fe1e <__swsetup_r+0x8e>
 800fe34:	2000      	movs	r0, #0
 800fe36:	e7f7      	b.n	800fe28 <__swsetup_r+0x98>
 800fe38:	2000019c 	.word	0x2000019c

0800fe3c <_raise_r>:
 800fe3c:	291f      	cmp	r1, #31
 800fe3e:	b538      	push	{r3, r4, r5, lr}
 800fe40:	4605      	mov	r5, r0
 800fe42:	460c      	mov	r4, r1
 800fe44:	d904      	bls.n	800fe50 <_raise_r+0x14>
 800fe46:	2316      	movs	r3, #22
 800fe48:	6003      	str	r3, [r0, #0]
 800fe4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe4e:	bd38      	pop	{r3, r4, r5, pc}
 800fe50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fe52:	b112      	cbz	r2, 800fe5a <_raise_r+0x1e>
 800fe54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe58:	b94b      	cbnz	r3, 800fe6e <_raise_r+0x32>
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	f000 f830 	bl	800fec0 <_getpid_r>
 800fe60:	4622      	mov	r2, r4
 800fe62:	4601      	mov	r1, r0
 800fe64:	4628      	mov	r0, r5
 800fe66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe6a:	f000 b817 	b.w	800fe9c <_kill_r>
 800fe6e:	2b01      	cmp	r3, #1
 800fe70:	d00a      	beq.n	800fe88 <_raise_r+0x4c>
 800fe72:	1c59      	adds	r1, r3, #1
 800fe74:	d103      	bne.n	800fe7e <_raise_r+0x42>
 800fe76:	2316      	movs	r3, #22
 800fe78:	6003      	str	r3, [r0, #0]
 800fe7a:	2001      	movs	r0, #1
 800fe7c:	e7e7      	b.n	800fe4e <_raise_r+0x12>
 800fe7e:	2100      	movs	r1, #0
 800fe80:	4620      	mov	r0, r4
 800fe82:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fe86:	4798      	blx	r3
 800fe88:	2000      	movs	r0, #0
 800fe8a:	e7e0      	b.n	800fe4e <_raise_r+0x12>

0800fe8c <raise>:
 800fe8c:	4b02      	ldr	r3, [pc, #8]	@ (800fe98 <raise+0xc>)
 800fe8e:	4601      	mov	r1, r0
 800fe90:	6818      	ldr	r0, [r3, #0]
 800fe92:	f7ff bfd3 	b.w	800fe3c <_raise_r>
 800fe96:	bf00      	nop
 800fe98:	2000019c 	.word	0x2000019c

0800fe9c <_kill_r>:
 800fe9c:	b538      	push	{r3, r4, r5, lr}
 800fe9e:	2300      	movs	r3, #0
 800fea0:	4d06      	ldr	r5, [pc, #24]	@ (800febc <_kill_r+0x20>)
 800fea2:	4604      	mov	r4, r0
 800fea4:	4608      	mov	r0, r1
 800fea6:	4611      	mov	r1, r2
 800fea8:	602b      	str	r3, [r5, #0]
 800feaa:	f7f2 fdf6 	bl	8002a9a <_kill>
 800feae:	1c43      	adds	r3, r0, #1
 800feb0:	d102      	bne.n	800feb8 <_kill_r+0x1c>
 800feb2:	682b      	ldr	r3, [r5, #0]
 800feb4:	b103      	cbz	r3, 800feb8 <_kill_r+0x1c>
 800feb6:	6023      	str	r3, [r4, #0]
 800feb8:	bd38      	pop	{r3, r4, r5, pc}
 800feba:	bf00      	nop
 800febc:	20004680 	.word	0x20004680

0800fec0 <_getpid_r>:
 800fec0:	f7f2 bde4 	b.w	8002a8c <_getpid>

0800fec4 <_malloc_usable_size_r>:
 800fec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fec8:	1f18      	subs	r0, r3, #4
 800feca:	2b00      	cmp	r3, #0
 800fecc:	bfbc      	itt	lt
 800fece:	580b      	ldrlt	r3, [r1, r0]
 800fed0:	18c0      	addlt	r0, r0, r3
 800fed2:	4770      	bx	lr

0800fed4 <__swhatbuf_r>:
 800fed4:	b570      	push	{r4, r5, r6, lr}
 800fed6:	460c      	mov	r4, r1
 800fed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fedc:	4615      	mov	r5, r2
 800fede:	2900      	cmp	r1, #0
 800fee0:	461e      	mov	r6, r3
 800fee2:	b096      	sub	sp, #88	@ 0x58
 800fee4:	da0c      	bge.n	800ff00 <__swhatbuf_r+0x2c>
 800fee6:	89a3      	ldrh	r3, [r4, #12]
 800fee8:	2100      	movs	r1, #0
 800feea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800feee:	bf14      	ite	ne
 800fef0:	2340      	movne	r3, #64	@ 0x40
 800fef2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fef6:	2000      	movs	r0, #0
 800fef8:	6031      	str	r1, [r6, #0]
 800fefa:	602b      	str	r3, [r5, #0]
 800fefc:	b016      	add	sp, #88	@ 0x58
 800fefe:	bd70      	pop	{r4, r5, r6, pc}
 800ff00:	466a      	mov	r2, sp
 800ff02:	f000 f849 	bl	800ff98 <_fstat_r>
 800ff06:	2800      	cmp	r0, #0
 800ff08:	dbed      	blt.n	800fee6 <__swhatbuf_r+0x12>
 800ff0a:	9901      	ldr	r1, [sp, #4]
 800ff0c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ff10:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ff14:	4259      	negs	r1, r3
 800ff16:	4159      	adcs	r1, r3
 800ff18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff1c:	e7eb      	b.n	800fef6 <__swhatbuf_r+0x22>

0800ff1e <__smakebuf_r>:
 800ff1e:	898b      	ldrh	r3, [r1, #12]
 800ff20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff22:	079d      	lsls	r5, r3, #30
 800ff24:	4606      	mov	r6, r0
 800ff26:	460c      	mov	r4, r1
 800ff28:	d507      	bpl.n	800ff3a <__smakebuf_r+0x1c>
 800ff2a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ff2e:	6023      	str	r3, [r4, #0]
 800ff30:	6123      	str	r3, [r4, #16]
 800ff32:	2301      	movs	r3, #1
 800ff34:	6163      	str	r3, [r4, #20]
 800ff36:	b003      	add	sp, #12
 800ff38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff3a:	466a      	mov	r2, sp
 800ff3c:	ab01      	add	r3, sp, #4
 800ff3e:	f7ff ffc9 	bl	800fed4 <__swhatbuf_r>
 800ff42:	9f00      	ldr	r7, [sp, #0]
 800ff44:	4605      	mov	r5, r0
 800ff46:	4639      	mov	r1, r7
 800ff48:	4630      	mov	r0, r6
 800ff4a:	f7fd f9b9 	bl	800d2c0 <_malloc_r>
 800ff4e:	b948      	cbnz	r0, 800ff64 <__smakebuf_r+0x46>
 800ff50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff54:	059a      	lsls	r2, r3, #22
 800ff56:	d4ee      	bmi.n	800ff36 <__smakebuf_r+0x18>
 800ff58:	f023 0303 	bic.w	r3, r3, #3
 800ff5c:	f043 0302 	orr.w	r3, r3, #2
 800ff60:	81a3      	strh	r3, [r4, #12]
 800ff62:	e7e2      	b.n	800ff2a <__smakebuf_r+0xc>
 800ff64:	89a3      	ldrh	r3, [r4, #12]
 800ff66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ff6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff6e:	81a3      	strh	r3, [r4, #12]
 800ff70:	9b01      	ldr	r3, [sp, #4]
 800ff72:	6020      	str	r0, [r4, #0]
 800ff74:	b15b      	cbz	r3, 800ff8e <__smakebuf_r+0x70>
 800ff76:	4630      	mov	r0, r6
 800ff78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff7c:	f000 f81e 	bl	800ffbc <_isatty_r>
 800ff80:	b128      	cbz	r0, 800ff8e <__smakebuf_r+0x70>
 800ff82:	89a3      	ldrh	r3, [r4, #12]
 800ff84:	f023 0303 	bic.w	r3, r3, #3
 800ff88:	f043 0301 	orr.w	r3, r3, #1
 800ff8c:	81a3      	strh	r3, [r4, #12]
 800ff8e:	89a3      	ldrh	r3, [r4, #12]
 800ff90:	431d      	orrs	r5, r3
 800ff92:	81a5      	strh	r5, [r4, #12]
 800ff94:	e7cf      	b.n	800ff36 <__smakebuf_r+0x18>
	...

0800ff98 <_fstat_r>:
 800ff98:	b538      	push	{r3, r4, r5, lr}
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	4d06      	ldr	r5, [pc, #24]	@ (800ffb8 <_fstat_r+0x20>)
 800ff9e:	4604      	mov	r4, r0
 800ffa0:	4608      	mov	r0, r1
 800ffa2:	4611      	mov	r1, r2
 800ffa4:	602b      	str	r3, [r5, #0]
 800ffa6:	f7f2 fdbb 	bl	8002b20 <_fstat>
 800ffaa:	1c43      	adds	r3, r0, #1
 800ffac:	d102      	bne.n	800ffb4 <_fstat_r+0x1c>
 800ffae:	682b      	ldr	r3, [r5, #0]
 800ffb0:	b103      	cbz	r3, 800ffb4 <_fstat_r+0x1c>
 800ffb2:	6023      	str	r3, [r4, #0]
 800ffb4:	bd38      	pop	{r3, r4, r5, pc}
 800ffb6:	bf00      	nop
 800ffb8:	20004680 	.word	0x20004680

0800ffbc <_isatty_r>:
 800ffbc:	b538      	push	{r3, r4, r5, lr}
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	4d05      	ldr	r5, [pc, #20]	@ (800ffd8 <_isatty_r+0x1c>)
 800ffc2:	4604      	mov	r4, r0
 800ffc4:	4608      	mov	r0, r1
 800ffc6:	602b      	str	r3, [r5, #0]
 800ffc8:	f7f2 fdb9 	bl	8002b3e <_isatty>
 800ffcc:	1c43      	adds	r3, r0, #1
 800ffce:	d102      	bne.n	800ffd6 <_isatty_r+0x1a>
 800ffd0:	682b      	ldr	r3, [r5, #0]
 800ffd2:	b103      	cbz	r3, 800ffd6 <_isatty_r+0x1a>
 800ffd4:	6023      	str	r3, [r4, #0]
 800ffd6:	bd38      	pop	{r3, r4, r5, pc}
 800ffd8:	20004680 	.word	0x20004680

0800ffdc <_init>:
 800ffdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffde:	bf00      	nop
 800ffe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffe2:	bc08      	pop	{r3}
 800ffe4:	469e      	mov	lr, r3
 800ffe6:	4770      	bx	lr

0800ffe8 <_fini>:
 800ffe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffea:	bf00      	nop
 800ffec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffee:	bc08      	pop	{r3}
 800fff0:	469e      	mov	lr, r3
 800fff2:	4770      	bx	lr
